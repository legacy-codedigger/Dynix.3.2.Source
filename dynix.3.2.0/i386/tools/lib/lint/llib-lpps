/* $Copyright:	$
 * Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990 
 * Sequent Computer Systems, Inc.   All rights reserved.
 *  
 * This software is furnished under a license and may be used
 * only in accordance with the terms of that license and with the
 * inclusion of the above copyright notice.   This software may not
 * be provided or otherwise made available to, or used by, any
 * other person.  No title to or ownership of the software is
 * hereby transferred.
 */

/* $Header: llib-lpps 1.2 86/05/06 $ */

/* LINTLIBRARY */
#include <sys/types.h>
#include <parallel/parallel.h>
#include <parallel/microtask.h>

shared	int	m_numprocs = -1;		/* total # processes working */
private		int	m_myid;			/* procid[] idx for each proc */

int cpus_online() { return(0); }

/*ARGSUSED*/
int m_set_procs(nprocs) int	nprocs; { return(0); }

/*VARARGS1*/
/*ARGSUSED*/
int m_fork(func, args) void	(*func)(); int	args; { return(0); }

/*ARGSUSED*/
int m_single(x) int	x; { return(0); }

/*ARGSUSED*/
int m_multi(x) int	x; { return(0); }

int m_park_procs() { return(0); }

int m_rele_procs() { return(0); }

int m_sync() { return(0); }

m_lock() {;}

m_unlock() {;}

int m_next() { return(0); }

int m_kill_procs() { return(0); }

int m_get_myid() { return(m_myid); }

int m_get_numprocs() { return(m_numprocs); }

/*ARGSUSED*/
int _mkuntmp(as) char	*as; { return(0); }

/*ARGSUSED*/
s_init_barrier(b, limit) sbarrier_t *b; int	limit; {;}

/*ARGSUSED*/
s_wait_barrier(b) sbarrier_t *b; {;}

/*ARGSUSED*/
char * shsbrk(incr) int	incr; { return(0); }

/*ARGSUSED*/
int shbrk(newbrk) char	*newbrk; { return(0); }

/*ARGSUSED*/
char * shmalloc(nbytes) unsigned nbytes; { return (NULL); }

/*ARGSUSED*/
shfree(cp) char *cp; {;}

/*ARGSUSED*/
s_init_lock(lock) slock_t	*lock; {;}

/*ARGSUSED*/
s_lock(lock) slock_t *lock; {;}

/*ARGSUSED*/
s_unlock(lock) slock_t	*lock; {;}

