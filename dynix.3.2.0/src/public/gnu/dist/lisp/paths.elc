
(defvar Info-directory (expand-file-name "../info/" exec-directory))

(defvar news-path "/usr/spool/news/" "\
The root directory below which all news files are stored.")

(defvar news-inews-program (cond ((file-exists-p "/usr/bin/inews") "/usr/bin/inews") ((file-exists-p "/usr/local/inews") "/usr/local/inews") ((file-exists-p "/usr/local/bin/inews") "/usr/local/bin/inews") ((file-exists-p "/usr/lib/news/inews") "/usr/lib/news/inews") (t "inews")) "\
Program to post news.")

(defvar mh-progs (cond ((file-exists-p "/usr/new/mh") "/usr/new/mh/") ((file-exists-p "/usr/local/bin/mh") "/usr/local/bin/mh/") (t "/usr/local/mh/")) "\
Directory containing MH commands")

(defvar mh-lib (cond ((file-exists-p "/usr/new/lib/mh") "/usr/new/lib/mh/") ((file-exists-p "/usr/local/lib/mh") "/usr/local/lib/mh/") (t "/usr/local/bin/mh/")) "\
Directory of MH library")

(defconst rmail-file-name "~/RMAIL" "\
Name of user's primary mail file.")

(defconst rmail-spool-directory (if (memq system-type (quote (hpux usg-unix-v unisoft-unix rtu silicon-graphics-unix))) "/usr/mail/" "/usr/spool/mail/") "\
Name of directory used by system mailer for delivering new mail.
Its name should end with a slash.")

(defconst sendmail-program (if (file-exists-p "/usr/lib/sendmail") "/usr/lib/sendmail" "fakemail") "\
Program used to send messages.")

(defconst term-file-prefix (if (eq system-type (quote vax-vms)) "[.term]" "term/") "\
If non-nil, Emacs startup does (load (concat term-file-prefix (getenv \"TERM\")))
You may set this variable to nil in your `.emacs' file if you do not wish
the terminal-initialization file to be loaded.")

(defconst manual-program (if (eq system-type (quote berkeley-unix)) "/usr/ucb/man" "/usr/bin/man") "\
Program to run to print man pages.")

(defconst manual-formatted-dir-prefix (if (file-exists-p "/usr/man/cat.C") "/usr/man/cat." "/usr/man/cat") "\
Prefix for directories containing formatted manual pages.
Append a section-number or section-name to get a directory name.")

(defconst manual-formatted-dirlist (cond ((eq system-type (quote hpux)) (quote ("/usr/man/cat1" "/usr/man/cat2" "/usr/man/cat3" "/usr/man/cat4" "/usr/man/cat5" "/usr/man/cat6" "/usr/man/cat7" "/usr/man/cat1m" "/usr/man/cat8" "/usr/local/man/cat1" "/usr/local/man/cat2" "/usr/local/man/cat3" "/usr/local/man/cat4" "/usr/local/man/cat5" "/usr/local/man/cat6" "/usr/local/man/cat7" "/usr/local/man/cat1m" "/usr/local/man/cat8" "/usr/contrib/man/cat1" "/usr/contrib/man/cat2" "/usr/contrib/man/cat3" "/usr/contrib/man/cat4" "/usr/contrib/man/cat5" "/usr/contrib/man/cat6" "/usr/contrib/man/cat7" "/usr/contrib/man/cat1m" "/usr/contrib/man/cat8"))) ((file-exists-p "/usr/man/cat.C") (quote ("/usr/man/cat.C" "/usr/man/cat.CP" "/usr/man/cat.CT" "/usr/man/cat.DOS/" "/usr/man/cat.F" "/usr/man/cat.HW" "/usr/man/cat.M/" "/usr/man/cat.S" "/usr/man/cat.LOCAL"))) ((file-exists-p "/usr/man/cat1") (quote ("/usr/man/cat1" "/usr/man/cat2" "/usr/man/cat3" "/usr/man/cat4" "/usr/man/cat5" "/usr/man/cat6" "/usr/man/cat7" "/usr/man/cat8" "/usr/man/catl" "/usr/man/catn"))) (t (quote ("/usr/catman/u_man/man1" "/usr/catman/u_man/man6" "/usr/catman/p_man/man2" "/usr/catman/p_man/man3" "/usr/catman/p_man/man4" "/usr/catman/p_man/man5" "/usr/catman/a_man/man1" "/usr/catman/a_man/man7" "/usr/catman/a_man/man8" "/usr/catman/local")))) "\
List of directories containing formatted manual pages.")

(defconst abbrev-file-name (if (eq system-type (quote vax-vms)) "~/abbrev.def" "~/.abbrev_defs") "\
*Default name of file to read abbrevs from.")
