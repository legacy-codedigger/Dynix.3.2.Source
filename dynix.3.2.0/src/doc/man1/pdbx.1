.V= $Header: pdbx.1 1.20 1991/08/06 19:06:34 $
.\" $Copyright: $
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.TH pdbx 1 "\*(V)" "DYNIX"
.ds dB pdbx
.ds DB Pdbx
.SH NAME
pdbx, dbx \- parallel debugger
.SH SYNOPSIS
.B pdbx
[
.B \-i
] [
.B \-u
] [
.B \-a
] [
.B \-c
.I file
] [
.B \-D
] [
.B \-I
.I dir
]...
[
.I execfile
]
.ie \n(.p>8.9i \{\
[
.I coredump
]]
.\}
.el \{\
.if t .in +.37i
[
.I coredump
]]
.if t .in -.37i
.\}
.sp
.B pdbx
[
.B \-i
] [
.B \-u
] [
.B \-a
] [
.B \-c
.I file
] [
.B \-D
] [[
.B \-I
.I dir
]...
.B \-O
.I execfile
] 
.ie \n(.p>8.9i \{\
[
.B \-Q
.I execfile
]...
.if t .in +.37i	\" troff
[
.B \-C
.I coredump
]...
.if t .in -.37i	\" troff
.\}
.el \{\
.if t .in +.37i
[
.B \-Q
.I execfile
]...
[
.B \-C
.I coredump
]...
.if t .in -.37i
.\}
.SH DESCRIPTION
\f2Pdbx\fP is a tool for source-level debugging and execution of
both conventional and parallel programs under DYNIX.
Currently, you can use \f2pdbx\fP to source-level debug FORTRAN, Pascal,
C, and, on Symmetry systems, C++ programs.
The machine-level facilities of \f2pdbx\fP
can be used for any executable program.
\f2Pdbx\fP
is based on the UNIX 4.3bsd debugger,
dbx,
and performs almost identically to UNIX 4.3bsd 
dbx
when used to debug conventional one-process, one-program
applications.
You can invoke \f2pdbx\fP as either
.B pdbx
or
.BR dbx .
Both names are links to the same program; however, forks and
signals are handled appropriately for parallel debugging when
\f2pdbx\fP is invoked as 
.BR pdbx .
Refer to the
.I "Pdbx User's Manual"
for a list of differences between UNIX 4.3bsd 
dbx and \f2pdbx\fP,
and for differences dependent on invocation.
.PP
Use the first form of the 
.B pdbx
command
when debugging an application
that consists of one or more processes running the same program.
Use the second form when debugging applications that
consist of multiple programs
(e.g., client/server applications or processes that exec);\0each
.B \-O
option specifies a program to debug.
.PP
.I execfile
is an executable object file produced by the
FORTRAN, Pascal, C, or C++ compiler
when the
.B \-g
option
is specified on the compiler command line.
It contains a symbol table that includes the names of
all the source files translated by the compiler to create it.
These files are available for perusal while using the debugger.
.PP
If a file named 
.I core
exists in the current directory,
or one or more
.I coredump
files are specified, you can use \f2pdbx\fP
to examine the state of the program when it faulted.
.PP
If a file named 
.I .dbxinit
exists in the current directory,
the debugger commands in
.I .dbxinit
are executed.
\f2Pdbx\fP also checks for a
.I .dbxinit
in your home directory
if one does not exist in the current directory.
.PP
When invoked, \f2pdbx\fP
processes command line options and 
.I .dbxinit
information, and then
prompts and waits for a command.
\f2Pdbx\fP supports the following command line options:
.TP 15
.B \-i
Force the debugger to act as though standard input is a terminal
(e.g., prompt for commands).
.TP 15
.B \-u
Preserve the case of identifiers for FORTRAN and Pascal programs.
The Sequent Pascal and FORTRAN V3.2 compilers translate identifiers to
uppercase only.
Sequent C and Sequent ATS C compilers always preserve the case of identifiers.
ATS FORTRAN converts all identifiers to lowercase,
unless the
.B \-case
option is specified.
If ATS FORTRAN
was invoked with the
.B \-case
option,  
invoke
.I pdbx
with the
.B \-u
option to preserve case sensitivity.
.TP 15
.B \-a
Run all processes asynchronously (i.e.,
in the background).
As soon as
.I pdbx
starts a process running,
it prompts immediately for another command.
No process may read from the terminal.
.TP 15
\&\f3\-c\fP \f2file\fP
Execute the \f2pdbx\fP commands in
.I file 
before
reading from standard input.
.TP
.B\-D
The
.B \-D
option is available on Symmetry systems only.
It supports the debugging of C++ source code.  \f2Pdbx\f1 translates
\f3cfront\f1-mangled names to the original C++ versions
after reading the program symbols.  This allows the
C++ names in the source code to be used while debugging
instead of the mangled names generated by \f3cfront\f1.  The \f2pdbx\f1
command \f2demangle\f1 performs the same function as this option and 
can be included in \f2.dbxinit\f1.
.TP 15
\&\f3\-I\fP \f2dir\fP
Add
.I dir
to the list of directories
that are searched when looking for a source file.
Normally, \f2pdbx\fP looks for source files in the current directory
and in the directory where
.I execfile
is located.
You can add a directory to the search path with the
.B use
command.
When you specify more than one object file, each
.B \-I
option applies to the program specified by the next
.B \-O
option.
.TP 15
\&\f3\-O\fP \f2execfile\fP
Identifies
.I execfile
as a program to debug.
If there is only one program, invoke \f2pdbx\fP without the
.B \-O 
option (use the first form of the 
.B pdbx
command).
.TP 15
\&\f3\-Q\fP \f2execfile\fP
Identifies
.I execfile
as a program not to debug.
This is similar to the
.B \-O
option,
except that it specifies a program that has minimal debugging
information.
Use this option when the size of a program limits the amount of memory
space available for debugging information.
.TP 15
\&\f3\-C\fP \f2coredump\fP
Identifies
.I coredump
as a core file to analyze.
Use the
.B \-C
option when there is more than one program or more than one
core file.
The position of the
.B \-C
option relative to the
.B \-O
option on the command line is not important;
.I pdbx
matches each core file with the appropriate object file.
.sp 1
.PP
.B Compiling Programs for Use with Pdbx
.sp 0.5
Specifying the
.B \-g
option as an argument on the
.IR fortran (1),
.IR cc (1),
.IR CC (1),
or
.IR pascal(1)
command line causes the compiler
to produce symbolic information for
\f2pdbx\fP.
If you explicitly invoke
.B ld 
(1)
to link your program,
you must include the
.B \-lg
option in the
.B ld
command line.
Depending on the compiler, the symbolic information is encoded
in the symbol table of the object file, or placed in
a separate file with the extension
.I .dbg.
When \f2pdbx\fP is invoked on an object file
.I objfile,
it will
read the symbolic information in the file
.I objfile.dbg
(if such
a file exists) as well as the symbolic information in
.I objfile.
.PP
Multiple
.I .dbg
files 
can be concatenated (with
.IR cat(1))
into
.I objfile.dbg.
.PP
For C++ programs, as long as the source code is compiled with the \f3\-g\f1
command line option, \f2pdbx\fP correlates object code with the original C++ source
instead of the C source code generated by \f3cfront\f1.
.PP
Code compiled with the
.B \-g
option cannot be optimized using the compiler's
.B \-O
option.
.sp 1
.B "Debugging Multiprocess Applications"
.sp 0.5
.I Pdbx 
can control multiple processes and their descendants (child
processes).
When a process is created (e.g., by means of the
.B run
command),
it is assigned a process number.
The first process created is process number 1,
and the process created most recently by
.I pdbx
is referred to as the current process.
Certain \f2pdbx\fP
commands operate on the current process by default,
but you can direct \f2pdbx\fP to operate on a specified process 
or on all processes.
You can list process numbers using the
.I pdbx
.B ps
command, and the current process designation can be changed using the
.B %
command.
.PP
To run a process in the background,
append an ampersand (&) to the
command that starts the process running (e.g.,
.BR run ,
.BR cont ,
.BR step ).
.I pdbx
will prompt for another command without waiting for the process
to stop.
.sp 1
.ne 8
.B Execution and Tracing Commands
.TP
\f3run\fP [\f2execfile\fP] [\f2args\fP] [\f3<\fP \f2filename\fP] [\f3>\fP \f2filename\fP] [&]
.ns
.TP
\f3rerun\fP [\f2execfile\fP] [\f2args\fP] [\f3<\fP \f2filename\fP] [\f3>\fP \f2filename\fP] [&]
Start executing \f2execfile\fP, passing \f2args\fP as command line arguments.
You can use redirection in the usual manner.
When you enter the
.B rerun 
command without arguments, the previous
argument list is passed to the program;
otherwise it is identical to \f3run\fP.
.B run
and
.B rerun
terminate any existing processes before creating the process to execute.
.sp .5
NOTE:
You must specify the
.I execfile
parameter when more than one
.I execfile
was specified when \f2pdbx\fP
was invoked; otherwise it must be omitted.
.\" If \f2execfile\fP has been written since the last time the symbolic information
.\" was read in, \f2pdbx\fP will read in the new information.
.TP
.BI release\0 %procnum
Release the specified process from \f2pdbx\fP control and continue execution 
without further debugger control.  Child processes that call
.I setuid
can be released immediately after being stopped by a fork to allow
debugging of the parent to continue.
.TP
\f3create\fP [\f2execfile\fP] [\f2args\fP] [\f3<\fP \f2filename\fP] [\f3>\fP \f2filename\fP]
Create a process as with
.BR run ,
but do not run the process and do not terminate any existing
processes.
The created process can be run using the
.B cont
command.
.TP
\f3terminate\fP [%\f2n\fP]
.ns
.TP
\f3terminate all\fP
Terminate the specified process (defaults to the current process).
The
.B ps
command does not list terminated processes.
.TP
\f3ps\fP [\f3%\f2n\f1]
Report the status, process id, and parent process
of process
.IR n .
If no process is specified,
print a list of all processes,
indicating the status of each.
For core dumps,
.B ps
reports which type of signal caused the program to abort.
.TP
\f3%\f2n\f1
Change the current process to process
.I n
\&.
.nf
.TP
\f3trace\fP [\f2procid\fP] [\f3in\fP \f2procedure\fP] [\f3if\fP \f2condition\fP]
.ns
.TP
\f3trace\fP [\f2procid\fP] \f2source-line-number\fP [\f3if\fP \f2condition\fP]
.ns
.TP
\f3trace\fP [\f2procid\fP] \f2procedure\fP [\f3in\fP \f2procedure\fP] [\f3if\fP \f2condition\fP]
.ns
.TP
\f3trace\fP [\f2procid\fP] \f2expression\fP \f3at\fP \f2source-line-number\fP [\f3if\fP \f2condition\fP]
.ns
.TP
\f3trace\fP [\f2procid\fP] \f2variable\fP [\f3in\fP \f2procedure\fP] [\f3if\fP \f2condition\fP]
.rs
.fi
Print trace information during program execution.
Use the 
.B delete
command
to turn tracing off.
.sp .5
For multiprocess applications, the optional
.I procid
parameter specifies which process to trace (defaults to all processes
associated with the current source file).
A
.I procid
of the form %\f2n\f1
directs \f2pdbx\fP to trace process
.I n
\&.
A
.I procid
of the form %\f2execfile\f1
directs \f2pdbx\fP to trace all processes created from
.I execfile
\&.
.sp .5
The next argument describes what to trace.
If it is a \f2source-line-number\fP, the line is printed
just before execution.
Source line numbers in a file other than the current one
must be preceded by the name of the file in quotes and a colon (e.g.,
"mumble.c":17).
.sp .5
If the argument is a procedure or function name,
every time it is called, information is printed telling
what routine called it, from what source line it was called,
and what parameters were passed to it.
In addition, its return is noted, and if it's a function,
the value it is returning is also printed.
.sp .5
If the argument is an expression with an \f3at\fP clause,
the value of the expression is printed
just before the identified source line is executed.
.sp .5
If the argument is a variable, the name and value of the variable
are printed whenever it changes.
Execution is substantially slower during this form of tracing.
.sp .5
If no argument is specified, all source lines are printed
before they are executed.
Execution is substantially slower during this form of tracing.
.sp .5
The clause ``\f3in\fP \f2procedure\fP'' restricts tracing information
to be printed only
while executing inside the given procedure
or function.
.sp .5
\f2condition\fP is a Boolean expression and is
evaluated prior to printing the tracing information;
if it is false, the information is not printed.
.br
.IP "\f3stop\fP [\f2procid\fP] \f3if\fP \f2condition\fP"
.ns
.IP "\f3stop\fP [\f2procid\fP] \f3at\fP \f2source-line-number\fP [\f3if\fP \f2condition\fP]"
.ns
.IP "\f3stop\fP [\f2procid\fP] \f3in\fP \f2procedure\fP [\f3if\fP \f2condition\fP]"
.ns
.IP "\f3stop\fP [\f2procid\fP] \f2variable\fP [\f3if\fP \f2condition\fP]"
.ns
.IP "\f3stop all\fP"
.br
Stop execution when the given line is reached, a procedure or function
is called, a variable is changed, or the condition is true.
.B "stop all"
immediately stops all running processes;
all other forms of the
.B stop
command set a breakpoint.
.sp .5
For multiprocess applications, the optional
.I procid
parameter specifies which process the breakpoint applies to.
By default, the breakpoint is set in all processes created from the
current program, and only the process that encounters the breakpoint
is stopped.
A
.I procid
of the form
%\f2n\fP
specifies that the breakpoint applies only to process
.IR n .
If the
.I procid
is
.BR all ,
all processes are stopped if any process encounters the breakpoint.
A
.I procid
of the form
%\f2execfile\fP
specifies that the breakpoint applies to each process created from
.I execfile .
.sp .5
If a process is running, the
.B stop
command does not take effect in that process until it is stopped.
.IP "\f3status\fP [\f3>\fP \f2filename\fP]"
Print the currently active tracepoints and breakpoints.
.IP "\f3delete\fP \f2cmdnumber\fP ..."
Cancel the tracepoints or breakpoints associated with
.I cmdnumber .
Use the \f3status\fP command to print the current tracepoints and
breakpoints, and their associated command numbers.
.IP "\f3catch\fP [\f2signal\fP]"
.ns
.IP "\f3ignore\fP [\f2signal\fP]"
Start or stop trapping a signal before it is sent
to the program.
This is useful when a program being debugged
handles signals such as interrupts.
A signal may be specified by number or by a name
(e.g., SIGINT).
Signal names are case insensitive and the ``SIG'' prefix is optional.
By default all signals are trapped except SIGCONT, SIGCHILD,
SIGALRM and SIGKILL.
When entered without parameters,
.B catch
lists the signals and events that will be caught, and
.B ignore
lists the signals and events that will be ignored.
.ns
.IP "\f3catch\fP \f2event\fP"
.ns
.IP "\f3ignore\fP \f2event\fP"
Catch or ignore the specified event, which may be
.BR fork ,
.BR exec ,
or
.BR exit .
By default,
execs and exits are caught and forks are ignored.
If you direct 
.I pdbx 
to catch forks,
the child process is stopped immediately after a fork,
but the parent is not stopped.
If you direct 
.I pdbx 
to catch execs,
the process is stopped just before
the new program begins execution.
If you direct 
.I pdbx 
to catch exits,
the process is stopped just before it is removed by the system;
no matter how you resume execution of the process, it will exit.
.IP "\f3signal\fP [\f2procid\fP] \f2signal\fP"
Send the specified signal to the specified process
(defaults to the current process).
.I procid
may be
.B all
or
\f3%\f2n\f1.
.IP "\f3cont\fP [\f2procid\fP] [\f2signal\fP] [\f3to\fP \f2source-line-number\fP] [&]"
Continue execution from where it stopped.
For multiprocess applications, the optional
.I procid
parameter
specifies which process to continue (defaults to the current process).
.I procid
may be
.B all
or
\f3%\f2n\f1.
.sp .5
If a signal is specified, the process continues as though
it received the signal
(any signal previously caught is canceled).
A signal of zero indicates that execution should continue as if the
process had never been stopped.
Otherwise, the process is continued with whatever signal was just received.
If the process has multiple signals pending, the
.I signal
parameter overrides only the signal that was caught.
.sp .5
If the optional \f2source-line-number\fP parameter is specified,
execution continues until the specified source line is
executed, then stops.
.IP "\f3step\fP [\f2procid\fP] [&]"
Execute one source line.
Any signal previously caught is canceled.
For multiprocess applications, the optional
.I procid
parameter specifies which process to execute.
.I procid
may be
.B all
or
\f3%\f2n\f1.
.IP "\f3next\fP [\f2procid\fP] [&]"
Execute up to the next source line.
Any signal previously caught is canceled.
.I procid
may be
.B all
or
\f3%\f2n\f1.
The difference between \f3next\fP and \f3step\fP is that
if the line contains a call to a procedure (or function),
the \f3step\fP command will stop at the beginning of that
procedure, while the \f3next\fP command will stop after completion
of the procedure.
.IP "\f3return\fP [\f2procedure\fP]"
Continue until a return to \f2procedure\fP is executed, or
until the current procedure returns if none is specified.
.IP "\f3call\fP \f2procedure()\fP"
.ns
.IP "\f3call\fP \f2procedure(parameters)\fP"
Execute the object code associated with the named procedure or function.
.IP "\f3window\fP [%\f2n\fP] \f3on\fP \f2ttyname\fP"
Make
.I ttyname
the debugging window for process
.IR n .
This command can be used to simplify the debugging of multiprocess
applications by providing a different control terminal for each process.
The specified process
(defaults to the current process)
will be used as the current process
when interpreting commands from
.IR ttyname .
If a process is explicitly specified,
.I ttyname
will be used for the specified process's standard input,
standard output, standard error, and debugger messages.
.I ttyname
must specify 
an ordinary terminal with login disabled.
.I ttyname
may be a complete device name (e.g., ``/dev/ttyp9'')
or its two-character suffix (e.g., ``p9'').
To use this command, you must have either BSS/PC-Shells
(available on Balance systems only)
or multiple terminals.
.ne 8v
.sp 1
.PP
.B Printing Variables and Expressions
.sp .5
Names are resolved first using the static scope of the current function,
then using the dynamic scope if the name is not defined
in the static scope.
If static and dynamic searches do not yield a result,
an arbitrary symbol is chosen and
the message \f5[using\ \f2qualified name\fP]\f1
is printed.
This may be overridden by qualifying an identifier
with a block name, e.g., ``\f2module\fP.\f2variable\fP''.
A \f2module\fP consists of the subroutines and data inside a source
file, and is named
by the file name without the 
.IR .c ,
.IR .C ,
.IR .cc ,
.IR .f ,
or 
.I .p
suffix.
.PP
The Sequent Pascal and FORTRAN V3.2 compilers translate identifiers to
uppercase only.  Sequent C and Sequent ATS C compilers always preserve
the case of identifiers.  ATS FORTRAN converts all identifiers to
lowercase (unless the FORTRAN command line option 
.B \-case
is specified).
Specifying 
.B \-u
when invoking
.I pdbx 
preserves the case of identifiers for FORTRAN and
Pascal programs.
.PP
Expressions are specified with a C-like syntax.
Indirection can be denoted using either a prefix ``*'' or
a Pascal-style postfix ``^'', and
array expressions are subscripted by brackets ([ ]).
The field reference operator (``.'') can be used with pointers
as well as records, so a period can be used in place of the C operator
``->''
(but ``->'' is also supported). 
.PP
For C++ programs, use the Pdbx
.B demangle
command (Symmetry systems only) to distinguish overloaded C++ names. This
command causes subsequent Pdbx commands to display names
as they appear in the source code. Refer to the 
.B \-D 
option
and the \f2DYNIX C++ Release Notes\fP
for more information on the 
.B demangle
command.
.PP
For multiprocess applications,
an expression of the form \f2n\fP:\f2expr\fP
yields the value of
.I expr
when interpreted in the context of process
.I n .
Process
.I n
must be stopped when the expression is evaluated.
If the \f2n\fP: prefix is omitted, the current process is used.
.PP
Types of expressions are checked;
the type of an expression may be overridden
by using the syntax (\f2expression\fP)\\\f2type-name\fP.
When there is no corresponding named type,
the special constructs &\f2type-name\fP and $$\f2tag-name\fP
can be used to represent a pointer to a named type or C structure tag.
.sp 1
.IP "\f3assign\fP \f2variable\fP \f3=\fP \f2expression\fP"
Assign the value of the expression to the variable.
.IP "\f3dump\fP [\f2procedure\f1] [\f3>\fP \f2filename\fP]"
Print the names and values of variables in the given procedure,
or the current one if none is specified.
If 
.I procedure
is ``.'',
.I pdbx 
dumps all active variables.
.IP "\f3print\fP \f2expression\fP [\f3,\fP \f2expression\fP] ..."
Print the values of the specified expressions.
.IP "\f3print fpustack\fP"
Display control and data register information for the 80387 floating-point
coprocessor.
The
.B "print fpustack"
command is available on Symmetry systems only.
.IP "\f3func\fP [\f2procedure\fP]"
Change the current function.
If none is specified, print the current function.
Changing the current function with
.B func
implicitly changes the current source file
to the one that contains the function; it also changes the current scope
used for name resolution.
.IP "\f3up\fP [\f2count\fP]"
.ns
.IP "\f3down\fP [\f2count\fP]"
Move the current function
up or down the stack \f2count\fP levels.
The default \f2count\fP is 1.
.B up
moves toward the main program;
.B down
moves toward the most recently called procedure.
The use of 
.B up
or
.B down
does not change the current source file.
.sp
.if \n(.p=8.9i \{\
.if t .bp
.bp
.\}
.IP "\f3whatis\fP \f2name\fP"
Print the declaration of the given name, which may be qualified
with block names as above.
.IP "\f3which\fP \f2identifier\fP"
Print the full qualification of the given identifier, i.e.,
the outer blocks with which the identifier is associated.
.IP "\f3where\fP [%\f2n\fP]"
Print a list of the active procedures for the specified process
(defaults to the current process).
.IP "\f3whereis\fP \f2identifier\fP"
Print the full qualification of all the symbols
in the current program
whose
names match the given identifier.
The order in which the symbols are printed is not meaningful.
.sp 1
.br
.ne 8v
.PP
.B Accessing Source Files
.IP "/\f2regular\ expression\fP[/]"
.ns
.IP "?\f2regular\ expression\fP[?]"
Search forward or backward in the current source file
for the given pattern.
.IP "\f3edit\fP [\f2filename\fP]"
.ns
.IP "\f3edit\fP \f2procedure-name\fP"
Invoke an editor on \f2filename\fP or the current source file if none
is specified.
If you specify the name of a procedure or function,
the editor is invoked on the file that contains it.
The environment variable
.br
\s-1\f3EDITOR\fP\s+1
should be set to the name of the desired editor \(em e.g.,
.I /usr/ucb/vi
\&.
.IP "\f3file\fP [[%\f2execfile\fP] \f2sourcefile\fP]"
Change the current source file name to \f2sourcefile\fP.
If none is specified, the current source file name is printed.
If an object file is specified, 
.I pdbx
searches for
.I sourcefile
in the source directories listed for the specified program.
.IP "\f3list\fP [\f2source-line-number\fP [\f3,\fP \f2source-line-number\fP]]"
.ns
.IP "\f3list\fP \f2procedure\fP"
List the lines in the current source file from the first line number to
the second inclusive.
If no lines are specified, the next 10 lines are listed.
If the name of a procedure or function is given,
.I pdbx
lists a 10-line window centered around the first statement of the
specified procedure or function.
The default number of lines to list is specified by the debugger variable
$listwindow, which can be set using the
.B set
command.
.IP "\f3use\fP [%\f2execfile\fP] [\f2directory\fP ...]"
Set or display the list of directories to be searched
when looking for source files.
If an object file is specified, the
.B use
command applies to the indicated program.
.sp 1
.br
.ne 8v
.PP
.B Command Aliases and Variables
.TP
\f3alias\fP \f2name\fP \f2cmdname\fP
.ns
.TP
\f3alias\fP \f2name\fP ``\f2cmdstring\fP''
.ns
.TP
\f3alias\fP \f2name\fP (\f2parameter\fP [, \f2parameter\fP] ...) ``\f2cmdstring\fP''
.ns
.TP
\f3alias\fP [\f2name\fP]
Define an alias for the specified command name or command string.
If no command name or string is specified,
display the
definition of the specified alias, or of all aliases if none
is specified.
.sp .5
When commands are processed,
.I pdbx
first checks to see if the word
is an alias for either a command or a string.
If it is an alias, \f2pdbx\fP treats the input as though
the corresponding string (with values substituted for any parameters)
had been entered.
For example, use the following command
to define an alias 
.B rr 
for the command 
.B rerun
:
.sp .5
.in +8n
alias rr rerun
.in -8n
.sp .5
To define an alias called 
.B b
that sets a stop at a particular line
enter the following:
.sp .5
.in +8n
alias b(x) ``stop at x''
.in -8n
.sp .5
Subsequently, the command 
.B b(12) 
will expand to 
.B stop at 12 .
.TP
\f3set\fP [\f2name\fP [= \f2expression\fP]]
The \f3set\fP command defines or displays values for debugger variables.
The names of these variables cannot conflict with names in the program
being debugged, and are expanded to the corresponding expression
within other commands.
The following variables have special meanings:
.sp .5
.in +8n
.ti -5n
$fpasingle
.br
When set, \f2pdbx\fP displays values in floating-point registers as single-precision
numbers.
.ti -5n
$fpustackall (Symmetry systems only)
.br
When set, \f2pdbx\fP displays nonzero floating-point stack entries
even when they are in the empty state (80387 FPU only).
.sp .5
.ti -5n
$hexchars
.ti -5n
$hexints
.ti -5n
$hexstrings
.br
When set, \f2pdbx\fP
prints
out characters, integers, or character pointers,
respectively, in hexadecimal.
.sp .5
.ti -5n
$hexin
.ti -5n
$octin
.br
When set, 
.I pdbx
expects integers to be entered in hexadecimal or octal, respectively.
If $hexin is set, $octin is ignored.
.sp .5
.ti -5n
$listwindow
.br
The value of this variable specifies the number
of lines to list around a function or the number of lines
listed when the \f3list\fP command
is given without any parameters.
Its default value is 10.
.sp .5
.if \n(.p=8.9i \{\
.if t .bp
.bp
.\}
.ti -5n
$noframe (Symmetry systems only)
.br
When set, \f2pdbx\fP does not attempt to follow the chain of call frames on
the stack.  This allows access to global variables and register contents
in code that does not establish conventional stack frames.
.sp .5
.ti -5n
$nostrict
.br 
When set, \f2pdbx\fP relaxes type checking rules for 
.B call
and
.B assign
commands.
.sp .5
.ti -5n
$whichreg
.br
When set, \f2pdbx\fP includes the register name (if any) with the information
displayed by the 
.B whatis
command for the specified variable.
Affects only variables declared as type \f5register\f1.
Valid for C and C++ programs only.
.in -8n
.TP
\f3unalias\fP \f2name\fP
Remove the alias with the given name.
.TP
\f3unset\fP \f2name\fP
Delete the debugger variable associated with \f2name\fP.
.sp .5
.br
.ne 8v
.PP
.B Machine Level Commands
.TP
\f3tracei\fP [\f2procid\fP] [\f2address\fP] [\f3if\fP \f2cond\fP]
.ns
.TP
\f3tracei\fP [\f2procid\fP] [\f2variable\fP] [\f3at\fP \f2address\fP] [\f3if\fP \f2cond\fP]
Turn on tracing using a machine instruction address.
.TP
\f3stopi\fP [\f2procid\fP] [\f3at\fP] \f2address\fP [\f3if\fP \f2cond\fP]
Stop on accesses to the specified address.
.B stopi at 
.I address
sets a breakpoint at the machine instruction
at the specified address.
.B stopi 
.I address
traces changes to the variable at the specified address.
.TP
\f3stepi\fP [\f2procid\fP] [&]
.ns
.TP
\f3nexti\fP [\f2procid\fP] [&]
Single-step as in \f3step\fP or \f3next\fP, but do a single instruction
rather than a source line.
.TP
\f3listi\fP [\f2source-line-number\fP [\f3,\fP \f2source-line-number\fP]]
.ns
.TP
\f3listi\fP \f2procedure\fP
Same as
.BR list ,
but print the machine instructions that correspond to the specified
source lines.
.TP
\f2address\fP\f3,\0\fP\f2address\fP\f3/\fP [\f2format\fP]
.ns
.TP
\f2address\fP \f3/\fP [\f2count\fP] [\f2format\fP]
Print the contents of memory starting at the first \f2address\fP
and continuing up to the second \f2address\fP or until \f2count\fP items are printed.
If the address is a period (.), \f2pdbx\fP uses the address that follows the one
most 
recently printed.
The \f2format\fP specifies how values are displayed;
if it is omitted, the last specified format is used.
The initial value of 
.I format
is 
.B X
\&.
\f2Pdbx\fP supports the following formats:
.nr In 5
.in +\n(Inn
.ta \n(Inn
.sp .5
.ti -\n(Inn
\&\f3i\fP	\c
print the machine instruction
.ti -\n(Inn
\&\f3d\fP	\c
print a short word in decimal
.ti -\n(Inn
\&\f3D\fP	\c
print a long word in decimal
.ti -\n(Inn
\&\f3o\fP	\c
print a short word in octal
.ti -\n(Inn
\&\f3O\fP	\c
print a long word in octal
.ti -\n(Inn
\&\f3x\fP	\c
print a short word in hexadecimal
.ti -\n(Inn
\&\f3X\fP	\c
print a long word in hexadecimal
.ti -\n(Inn
\&\f3b\fP	\c
print a byte in octal
.ti -\n(Inn
\&\f3c\fP	\c
print a byte as a character
.ti -\n(Inn
\&\f3s\fP	\c
print a string of characters terminated by a null byte
.ti -\n(Inn
\&\f3f\fP	\c
print a single precision real number
.ti -\n(Inn
\&\f3g\fP	\c
print a double precision real number
.in -\n(Inn
.TP
\f2address\fP \f3=\fP [\f2format\fP]
Print the value of the specified
.I address
in the specified format (refer to previous list
of supported formats).
For example, the command
.B 0xffff=D
prints the decimal equivalent of 0xffff.
.sp 1
.PP
Symbolic addresses are specified by preceding the name with an 
ampersand (&).
Register names must be preceded by a dollar sign ($).
The Balance register names are r0\-r7.
The Symmetry register names are:
eax, edx, ecx, ebx, ebp, esi, edi, esp, eip, and eflags;
the floating-point registers for the 80387 are st0\-st7;
and the FPA (Weitek 1167) registers are fp1\-fp31.
In addition, the aliases $pc, $fp, and $sp 
refer to the program
counter, frame pointer, and stack pointer, respectively.
Addresses may be expressions made up of other addresses and
the operators ``+'', ``-'', and indirection (unary ``*'').
.sp 1
.br
.ne 8v
.PP
.B Miscellaneous Commands
.sp 1
.\" .IP \f3gripe\fP
.\" Invoke a mail program to send a message to the person in charge of
.\" \f2pdbx\fP.
.IP \f3demangle\f1
Translate C++ mangled names so they match the C++ source code names.
The
.B demangle
command is available on Symmetry systems only.
See the
description of the \f3\-D\f1 option previously in this man page.
.IP \f3help\fP
Print out a synopsis of \f2pdbx\fP commands.
.IP "\f3quit\fP"
Terminate all processes and exit \f2pdbx\fP.
If
.B quit
is entered from a window that was created with the
.B window
command,
.I pdbx 
stops reading commands from that window,
and the window is freed for reuse with another process.
.IP "\f3sh\fP [\f2command-line\fP]"
Create a new shell and pass it the specified
command line shell for execution,
or execute a new shell if no command line is specified.
The value of the
\s-1\f3SHELL\fP\s+1
environment variable determines which shell is used.
.TP
\f3suspend\fP
Suspend \f2pdbx\fP
and return control to the shell that invoked it (this command
is not supported by the Bourne shell).
The effect of entering this command is analogous to the effect of
entering CTRL-Z in a shell.
Any running process continues to run until it hits a breakpoint
or receives a signal.
.TP
\f3source\fP \f2filename\fP
Read \f2pdbx\fP commands from the given \f2filename\fP.
.if \n(.p=8.9i \{\
.if t .bp
.bp
.\}
.SH FILES
.nr In 20
.in +\n(Inn
.ta \n(Inn
.sp 1
.ti -\n(Inn
\&a.out	\c
object file
.ti -\n(Inn
core	\c
core dump file
.ti -\n(Inn
\&\&.dbxinit	\c
initial commands
.ti -\n(Inn
\&\f2name\fP.dbg	\c
symbolic information from some compilations
.SH SEE ALSO
cc(1),  CC(1),  cpp(1),  pascal(1),  fortran(1),  ddt(1)
.br
.I "Sequent Pdbx User's Manual"
.SH COMMENTS
If you have a program consisting of a number of object files
and each is built from source files that include header files,
the symbolic information for the header files is replicated in
each object file.
Since approximately one debugger start-up is done for each link,
having the linker (\f2ld\fP) reorganize the symbol information
would not save much time, though it would reduce some of the
disk space used.
.PP
This problem is an artifact of the unrestricted semantics
of #include's in C.  For example, an include file can contain
static declarations that are separate entities for each file
in which they are included.
