.\" $Copyright:	$
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990 
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: ctags.1 1.8 87/04/13 $
.TH CTAGS 1 "\*(V)" "4BSD"
.SH NAME
ctags \- create a tags file
.SH SYNOPSIS
.B ctags
[ 
.B \-BFatuwvxm
] [
.B \-f 
.I tagsfile
]
[ name ... ]
.SH DESCRIPTION
.I Ctags
makes a tags file for
.IR ex (1)
from the specified assembly language, C, Pascal, FORTRAN,
YACC, lex, and lisp sources.  If no files are specified,
the standard input is read for the list of file names.
A tags file gives the locations of specified objects (in this case
functions and typedefs) in a group of files.  Each line of the tags
file contains the object name, the file in which it is defined, and
an address specification for the object definition. Functions are
searched with a pattern, typedefs with a line number. Specifiers are
given in separate fields on the line, separated by blanks or tabs.
Using the
.I tags
file,
.I ex
can quickly find these objects definitions.
.PP
If the
.B \-x
flag is given, 
.I ctags
produces a list of object names, the line number and file
name on which each is defined, as well as the text of that line
and prints this on the standard output.  This is a simple index
which can be printed out as an off-line readable function index.
.PP
If the
.B \-v
flag is given,
an index of the form expected by
.IR vgrind (1)
is produced on the standard output.
This listing contains the function name,
file name, and page number
(assuming 64 line pages).
Since the output will be sorted into lexicographic order,
it may be desired to run the output through
.BR "sort \-f" .
Sample use:
.PP
.nf
	ctags \-v files | sort \-f > index
	vgrind \-x index
.fi
.PP
Normally 
.I ctags
places the tag descriptions in a file called
.IR tags ;
this may be overridden with the
.B \-f
option.
.PP
Files whose names end in 
.B \.c
or
.B \.h
are assumed to be C source files and are searched for C routine and
macro definitions.
Files whose names end in
.B \.f
or
.B \.for
are assumed to be FORTRAN source files.
Files whose names end in
.B \.p
or
.B \.pas
are assumed to be Pascal source files.
Files whose names end in
.B \.s
are assumed to be assembly language source files.
Files whose names end in
.B \.y
are assumed to be YACC source files.
Files whose names end in
.B \.l
are assumed to be either lisp files
if their first non-blank character is `;', `(', or `[',
or lex files otherwise.
Other files are first examined to see if they contain any Pascal or
FORTRAN routine definitions; if not, they are processed again
looking for C definitions.
.PP
For Pascal source files, ``forward'', ``external'',
and ``cexternal'' declarations are omitted from the tags file.
The directives ``{tags+}'' and ``{tags-}'' can be used to
enable or disable scanning for Pascal routines.
By default, scanning is disabled only
in the ``interface'' section of a Pascal unit.
.PP
Other options are:
.TP 5
.B \-F
use forward searching patterns (/.../) (default).
.TP 5
.B \-B
use backward searching patterns (?...?).
.TP 5
.B \-a
append to tags file.
.TP 5
.B \-t
create tags for typedefs.
.TP 5
.B \-w
suppressing warning diagnostics.
.TP 5
.B \-u
causing the specified files to be
.I updated
in tags, that is, all references to them are deleted,
and the new values are appended to the file.
(Beware: this option is implemented in a way which is rather slow;
it is usually faster to simply rebuild the
.I tags
file.)
.TP 5
.B \-m
create multiple entries for tags that occur more than once.
.PP
The tag
.I main
is treated specially in C programs.
The tag formed is created by prepending
.I M
to the name of the file, with a trailing .c removed, if
any, and leading pathname components also removed.
This makes use of
.I ctags
practical in directories with more than one program.
.SH FILES
.DT
tags		output tags file
.SH SEE ALSO
ex(1), vi(1)
.SH AUTHOR
Ken Arnold; FORTRAN added by Jim Kleckner; Bill Joy
added Pascal and
.B \-x,
replacing
.I cxref;
C typedefs added by Ed Pelegri-Llopart.
.SH BUGS
Recognition of \f3functions\f1, \f3subroutines\f1 and \f3procedures\f1
for FORTRAN and Pascal is done is a very simpleminded way.
No attempt is made to deal with block structure; if you have two
Pascal procedures in different blocks with the same name you lose.
.PP
When processing a file whose name lacks a recognizable suffix,
.I ctags
may mistake C code for FORTRAN or Pascal.
If
.I ctags
finds what appears to be a FORTRAN or Pascal routine,
it will not look for C routines.
.PP
Does not know about #ifdefs.
.PP
Should know about Pascal types.
Relies on the input being well formed to detect typedefs.
Use of -tx shows only the last line of typedefs.
