.xx "" "" "@: arithmetic on shell variables." "" csh(1)
.xx "login, read, readonly,/" "sh, for, case, if, while, :," "., break, continue, cd, eval, exec, exit, export," "" sh(1)
.xx "" "exit, export, login, read, readonly, set, shift," "[, times, trap, umask, wait: command language" "/exec," sh(1)
.xx "" "lib2648: subroutines for the HP" "2648 graphics terminal" "" lib2648(3X)
.xx "" "dis: disassemble Series" "32000 or Series 386 instructions" "" dis(3X)
.xx "" "usclk:" "32-bit microsecond counter" "" usclk(4)
.xx "" "dis: disassemble Series 32000 or Series" "386 instructions" "" dis(3X)
.xx "" "xpformat: standalone" "400-Mbyte disk formatter" "" xpformat(8S)
.xx "" "xp: Xylogics" "450 MULTIBUS disk interface" "" xp(4)
.xx "" "xt: Xylogics" "472 MULTIBUS magtape interface" "" xt(4)
.xx "" "" "abort: generate a fault" "" abort(3)
.xx "" "" "abs: integer absolute value" "" abs(3)
.xx "" "abs: integer" "absolute value" "" abs(3)
.xx "" "fabs, floor, ceil:" "absolute value, floor, ceiling functions" "" floor(3M)
.xx "" "" "ac: login accounting" "" ac(8)
.xx "" "accept:" "accept a connection on a socket" "" accept(2)
.xx "" "" "accept: accept a connection on a socket" "" accept(2)
.xx "" "" "access: determine accessibility of file" "" access(2)
.xx "" "getgroups: get group" "access list" "" getgroups(2)
.xx "" "initgroups: initialize group" "access list" "" initgroups(3X)
.xx "" "setgroups: set group" "access list" "" setgroups(2)
.xx "" "access: determine" "accessibility of file" "" access(2)
.xx "" "ac: login" "accounting" "" ac(8)
.xx "" "sa, accton: system" "accounting" "" sa(8)
.xx "" "acct: execution" "accounting file" "" acct(5)
.xx "" "pac: printer/ploter" "accounting information" "" pac(8)
.xx "" "acct: turn" "accounting on or off" "" acct(2)
.xx "" "" "acct: execution accounting file" "" acct(5)
.xx "" "" "acct: turn accounting on or off" "" acct(2)
.xx "" "sa," "accton: system accounting" "" sa(8)
.xx "" "sin, cos, tan, asin," "acos, atan, atan2: trigonometric functions" "" sin(3M)
.xx "" "offline_all: take all but one" "active processor off line" "" offline_all(3)
.xx "" "monitor: monitor system" "activity" "" monitor(8)
.xx "" "a.vi: vi with extensions for" "Ada source files" "" a.vi(1)
.xx "" "a.tags: create a tags file for" "Ada sources" "" a.tags(1)
.xx "" "fortune: print a random, hopefully interesting," "adage" "" fortune(6)
.xx "" "swapon:" "add a swap device for interleaved paging/swapping" "" swapon(2)
.xx "information" "" "addbad: modify dec standard 144 bad sector" "" addbad(8)
.xx "" "" "addbib: create or extend bibliographic database" "" addbib(1)
.xx "" "adduser: procedure for" "adding new users" "" adduser(8)
.xx "" "swapon: specify" "additional device for paging and swapping" "" swapon(8)
.xx "setmntent: get file system descriptor file entry" "" "addmntent, endmntent, getmntent, hasmntopt," "" getmntent(3)
.xx "" "inet_makeaddr, inet_lnaof, inet_netof: Internet" "address manipulation routines" "/inet_ntoa," inet(3N)
.xx "" "ether_line, ether_ntoa, ether_ntohost: ethernet" "address mapping operations" "/ether_hostton," ethers(3N)
.xx "" "arp:" "address resolution display and control" "" arp(8C)
.xx "" "arp:" "Address Resolution Protocol" "" arp(4P)
.xx "" "mmap: map an open file into the process's" "address space" "" mmap(2)
.xx "" "munmap: unmap part of the process's" "address space" "" munmap(2)
.xx "" "pmap: map physical addresses into process's virtual" "address space" "" pmap(4)
.xx "" "pmap: map physical" "addresses into process's virtual address space" "" pmap(4)
.xx "" "mailaddr: mail" "addressing description" "" mailaddr(7)
.xx "" "" "adduser: procedure for adding new users" "" adduser(8)
.xx "" "flock: apply or remove an" "advisory lock on an open file" "" flock(2)
.xx "" "yes: be repetitively" "affirmative" "" yes(1)
.xx "" "basename: strip filename" "affixes" "" basename(1)
.xx "" "nopff, noswap, on: run a command with priority" "aging, PFF, swapping, or processor migration/" "noage," noage(8)
.xx "" "learn: computer" "aided instruction about UNIX" "" learn(1)
.xx "" "" "alarm: schedule signal after specified time" "" alarm(3C)
.xx "" "L.aliases: UUCP hostname" "alias file" "" l.aliases(5)
.xx "" "" "alias: shell macros." "" csh(1)
.xx "" "unalias: remove" "aliases." "" csh(1)
.xx "" "" "aliases: aliases file for sendmail" "" aliases(5)
.xx "" "which: locate a program file including" "aliases and paths (csh only)" "" which(1)
.xx "" "newaliases: rebuild the data base for the mail" "aliases file" "" newaliases(1)
.xx "" "aliases:" "aliases file for sendmail" "" aliases(5)
.xx "" "valloc:" "aligned memory allocator" "" valloc(3)
.xx "" "malloc, free, realloc, calloc," "alloca: memory allocator" "" malloc(3)
.xx "" "malloc, free, realloc, calloc, alloca: memory" "allocator" "" malloc(3)
.xx "" "shmalloc, shrealloc, shfree: shared memory" "allocator" "" shmalloc(3P)
.xx "" "valloc: aligned memory" "allocator" "" valloc(3)
.xx "" "eyacc: modified yacc" "allowing much improved error recovery" "" eyacc(1)
.xx "" "scandir," "alphasort: scan a directory" "" scandir(3)
.xx "devices" "pmap: display or" "alter parameters of virtual-to-physical mapping" "" pmap(8)
.xx "" "limit:" "alter per-process resource limitations." "" csh(1)
.xx "" "renice:" "alter priority of running processes" "" renice(8)
.xx "" "else:" "alternative commands." "" csh(1)
.xx "" "lex: generator of lexical" "analysis programs" "" lex(1)
.xx "" "error:" "analyze and disperse compiler error messages" "" error(1)
.xx "" "style:" "analyze surface characteristics of a document" "" style(1)
.xx "" "worms:" "animate worms on a display terminal" "" worms(6)
.xx "" "rain:" "animated raindrops display" "" rain(6)
.xx "" "bcd: convert to" "antique media" "" bcd(6)
.xx "" "" "a.out: assembler and link editor output" "" a.out(5)
.xx "" "" "appletalk: AppleTalk protocol family" "" appletalk(4F)
.xx "" "ddp:" "AppleTalk Datagram Delivery Protocol" "" ddp(4P)
.xx "" "appletalk:" "AppleTalk protocol family" "" appletalk(4F)
.xx "" "apply:" "apply a command to a set of arguments" "" apply(1)
.xx "" "" "apply: apply a command to a set of arguments" "" apply(1)
.xx "" "flock:" "apply or remove an advisory lock on an open file" "" flock(2)
.xx "" "" "apropos: locate commands by keyword lookup" "" apropos(1)
.xx "" "" "ar: archive and library maintainer" "" ar(1)
.xx "" "" "ar: archive (library) file format" "" ar(5)
.xx "" "number: convert" "Arabic numerals to English" "" number(6)
.xx "" "bc:" "arbitrary-precision arithmetic language" "" bc(1)
.xx "graphics/" "plot: openpl, erase, label, line, circle," "arc, move, cont, point, linemod, space, closepl:" "" plot(3X)
.xx "" "tp: manipulate tape" "archive" "" tp(1)
.xx "" "ar:" "archive and library maintainer" "" ar(1)
.xx "" "tar: tape" "archive file format" "" tar(5)
.xx "" "ar:" "archive (library) file format" "" ar(5)
.xx "" "tar: tape" "archiver" "" tar(1)
.xx "" "arcv: convert" "archives to new format" "" arcv(8)
.xx "" "ranlib: convert" "archives to random libraries" "" ranlib(1)
.xx "" "" "arcv: convert archives to new format" "" arcv(8)
.xx "" "nargs: get" "argument count" "" nargs(3C)
.xx "" "glob: filename expand" "argument list." "" csh(1)
.xx "" "shift: manipulate" "argument list." "" csh(1)
.xx "" "varargs: variable" "argument list" "" varargs(3)
.xx "" "xargs: construct" "argument list(s) and execute command" "" xargs(1)
.xx "" "getopt: get option letter from" "argument vector" "" getopt(3X)
.xx "" "apply: apply a command to a set of" "arguments" "" apply(1)
.xx "" "echo: echo" "arguments." "" csh(1)
.xx "" "echo: echo" "arguments" "" echo(1)
.xx "" "expr: evaluate" "arguments as an expression" "" expr(1)
.xx "" "bc: arbitrary-precision" "arithmetic language" "" bc(1)
.xx "" "@:" "arithmetic on shell variables." "" csh(1)
.xx "" "" "arithmetic: provide drill in number facts" "" arithmetic(6)
.xx "" "" "arp: address resolution display and control" "" arp(8C)
.xx "" "" "arp: Address Resolution Protocol" "" arp(4P)
.xx "" "ftp:" "ARPANET file transfer program" "" ftp(1C)
.xx "" "biff: be notified if mail" "arrives and who it is from" "" biff(1)
.xx "" "expr: evaluate arguments" "as an expression" "" expr(1)
.xx "" "" "as: Sequent assembler" "" as(1)
.xx "" "untarmail: encode/decode binary to printable" "ASCII" "btoa, atob, tarmail," btoa(1)
.xx "" "gmtime, asctime, timezone: convert date and time to" "ASCII" "ctime, localtime," ctime(3)
.xx "" "ascii: map of" "ASCII character set" "" ascii(7)
.xx "" "od: octal, decimal, hex," "ascii dump" "" od(1)
.xx "" "" "ascii: map of ASCII character set" "" ascii(7)
.xx "" "atof, atoi, atol: convert" "ASCII to numbers" "" atof(3)
.xx "" "ctime, localtime, gmtime," "asctime, timezone: convert date and time to ASCII" "" ctime(3)
.xx "" "sin, cos, tan," "asin, acos, atan, atan2: trigonometric functions" "" sin(3M)
.xx "" "as: Sequent" "assembler" "" as(1)
.xx "" "a.out:" "assembler and link editor output" "" a.out(5)
.xx "" "" "assert: program verification" "" assert(3X)
.xx "" "setbuf, setbuffer, setlinebuf:" "assign buffering to a stream" "" setbuf(3S)
.xx "" "shutdown: close down the system" "at a given time" "" shutdown(8)
.xx "" "at: execute commands" "at a later time" "" at(1)
.xx "" "m_sync: check in" "at barrier" "" m_sync(3P)
.xx "" "s_wait_barrier: initialize barrier, wait" "at barrier" "s_init_barrier," s_wait_barrier(3P)
.xx "" "" "at: execute commands at a later time" "" at(1)
.xx "" "nice, nohup: run a command" "at low priority (sh only)" "" nice(1)
.xx "" "" "a.tags: create a tags file for Ada sources" "" a.tags(1)
.xx "" "sin, cos, tan, asin, acos," "atan, atan2: trigonometric functions" "" sin(3M)
.xx "" "sin, cos, tan, asin, acos, atan," "atan2: trigonometric functions" "" sin(3M)
.xx "printable ASCII" "btoa," "atob, tarmail, untarmail: encode/decode binary to" "" btoa(1)
.xx "" "" "atof, atoi, atol: convert ASCII to numbers" "" atof(3)
.xx "" "atof," "atoi, atol: convert ASCII to numbers" "" atof(3)
.xx "" "atof, atoi," "atol: convert ASCII to numbers" "" atof(3)
.xx "interrupt" "sigpause:" "atomically release blocked signals and wait for" "" sigpause(2)
.xx "" "universe," "att, ucb: universe manipulations" "" universe(1)
.xx "" "proc_ctl: control over various process" "attributes" "" proc_ctl(2)
.xx "" "rcs: change RCS file" "attributes" "" rcs(1)
.xx "autoconfiguration code" "" "autoconf: diagnostics from the DYNIX" "" autoconf(4)
.xx "" "autoconf: diagnostics from the DYNIX" "autoconfiguration code" "" autoconf(4)
.xx "" "rc: command script for" "auto-reboot and daemons" "" rc(8)
.xx "" "" "a.vi: vi with extensions for Ada source files" "" a.vi(1)
.xx "" "wait:" "await completion of process" "" wait(1)
.xx "" "" "awk: pattern scanning and processing language" "" awk(1)
.xx "" "" "backgammon: the game" "" backgammon(6)
.xx "" "bg: place job in" "background." "" csh(1)
.xx "" "wait: wait for" "background processes to complete." "" csh(1)
.xx "" "addbad: modify dec standard 144" "bad sector information" "" addbad(8)
.xx "" "bad144: read/write dec standard 144" "bad sector information" "" bad144(8)
.xx "" "badsect: create files to contain" "bad sectors" "" badsect(8)
.xx "information" "" "bad144: read/write dec standard 144 bad sector" "" bad144(8)
.xx "" "" "badsect: create files to contain bad sectors" "" badsect(8)
.xx "" "se:" "Balance 8000 10 Mb/s Ethernet interface" "" se(4)
.xx "" "ddt: interactive symbolic debugger (" "Balance only)" "" ddt(1)
.xx "" "banner: print large" "banner on printer" "" banner(6)
.xx "" "" "banner: print large banner on printer" "" banner(6)
.xx "" "m_sync: check in at" "barrier" "" m_sync(3P)
.xx "" "s_wait_barrier: initialize barrier, wait at" "barrier" "s_init_barrier," s_wait_barrier(3P)
.xx "" "s_init_barrier, s_wait_barrier: initialize" "barrier, wait at barrier" "" s_wait_barrier(3P)
.xx "" "gettytab: terminal configuration data" "base" "" gettytab(5)
.xx "" "hosts: host name data" "base" "" hosts(5)
.xx "" "networks: network name data" "base" "" networks(5)
.xx "" "phones: remote host phone number data" "base" "" phones(5)
.xx "" "printcap: printer capability data" "base" "" printcap(5)
.xx "" "protocols: protocol name data" "base" "" protocols(5)
.xx "" "rpc: rpc program number data" "base" "" rpc(5)
.xx "" "servers: inet server data" "base" "" servers(5)
.xx "" "services: service name data" "base" "" services(5)
.xx "" "termcap: terminal capability data" "base" "" termcap(5)
.xx "" "vgrindefs: vgrind's language definition data" "base" "" vgrindefs(5)
.xx "" "newaliases: rebuild the data" "base for the mail aliases file" "" newaliases(1)
.xx "" "ttytype: data" "base of terminal types by port" "" ttytype(5)
.xx "" "fetch, store, delete, firstkey, nextkey: data" "base subroutines" "dbminit," dbm(3X)
.xx "" "vi, view: screen oriented (visual) display editor" "based on ex" "" vi(1)
.xx "" "" "basename: strip filename affixes" "" basename(1)
.xx "" "" "bc: arbitrary-precision arithmetic language" "" bc(1)
.xx "" "" "bcd: convert to antique media" "" bcd(6)
.xx "" "bcopy," "bcmp, bzero, ffs: bit and byte string operations" "" bstring(3)
.xx "operations" "" "bcopy, bcmp, bzero, ffs: bit and byte string" "" bstring(3)
.xx "" "cb: C program" "beautifier" "" cb(1)
.xx "" "vfont: font formats for the" "Benson-Varian or Versatec" "" vfont(5)
.xx "" "berkst: read in symbol and string tables in" "berkeley format" "" berkst(3)
.xx "format" "" "berkst: read in symbol and string tables in berkeley" "" berkst(3)
.xx "" "j0, j1, jn, y0, y1, yn:" "bessel functions" "" j0(3M)
.xx "changing/" "random, srandom, initstate, setstate:" "better random number generator; routines for" "" random(3)
.xx "" "" "bg: place job in background." "" csh(1)
.xx "" "addbib: create or extend" "bibliographic database" "" addbib(1)
.xx "" "roffbib: run off" "bibliographic database" "" roffbib(1)
.xx "" "sortbib: sort" "bibliographic database" "" sortbib(1)
.xx "" "index for a bibliography, find references in a" "bibliography" "indxbib, lookbib: build inverted" lookbib(1)
.xx "" "indxbib, lookbib: build inverted index for a" "bibliography, find references in a bibliography" "" lookbib(1)
.xx "" "" "biff: be notified if mail arrives and who it is from" "" biff(1)
.xx "" "comsat:" "biff server" "" comsat(8C)
.xx "" "install: install" "binaries" "" install(1)
.xx "" "whereis: locate source," "binary, and or manual for program" "" whereis(1)
.xx "" "find the printable strings in an object (or other" "binary) file" "strings:" strings(1)
.xx "" "uuencode, uudecode: encode/decode a" "binary file for transmission via mail" "" uuencode(1C)
.xx "" "disas: disassemble" "binary files" "" disas(1)
.xx "" "fread, fwrite: buffered" "binary input/output" "" fread(3S)
.xx "" "bp:" "binary patcher" "" bp(8)
.xx "" "btoa, atob, tarmail, untarmail: encode/decode" "binary to printable ASCII" "" btoa(1)
.xx "" "bind:" "bind a name to a socket" "" bind(2)
.xx "" "tmp_affinity:" "bind a process to a processor" "" tmp_affinity(2)
.xx "" "" "bind: bind a name to a socket" "" bind(2)
.xx "" "" "binmail: send or receive mail among users" "" binmail(1)
.xx "" "bcopy, bcmp, bzero, ffs:" "bit and byte string operations" "" bstring(3)
.xx "" "usclk: 32-" "bit microsecond counter" "" usclk(4)
.xx "" "sync: update super-" "block" "" sync(2)
.xx "" "sync: update the super" "block" "" sync(8)
.xx "" "update: periodically update the super" "block" "" update(8)
.xx "" "sigblock:" "block signals" "" sigblock(2)
.xx "" "sigpause: atomically release" "blocked signals and wait for interrupt" "" sigpause(2)
.xx "" "sum: sum and count" "blocks in a file" "" sum(1)
.xx "" "boggle: play the game of" "boggle" "" boggle(6)
.xx "" "" "boggle: play the game of boggle" "" boggle(6)
.xx "" "bootflags: display/change system" "boot flags" "" bootflags(8)
.xx "" "" "boot: run a standalone program or bring up DYNIX" "" boot(8S)
.xx "" "" "bootflags: display/change system boot flags" "" bootflags(8)
.xx "" "reboot: DYNIX" "bootstrapping procedures" "" reboot(8)
.xx "" "" "bp: binary patcher" "" bp(8)
.xx "" "switch: multi-way command" "branch." "" csh(1)
.xx "login, read,/" "sh, for, case, if, while, :, .," "break, continue, cd, eval, exec, exit, export," "" sh(1)
.xx "" "" "break: exit while/foreach loop." "" csh(1)
.xx "" "" "breaksw: exit from switch." "" csh(1)
.xx "" "fg:" "bring job into foreground." "" csh(1)
.xx "" "online, offline:" "bring processors online and offline" "" online(8)
.xx "" "boot: run a standalone program or" "bring up DYNIX" "" boot(8S)
.xx "" "" "brk, sbrk: change data segment size" "" brk(2)
.xx "" "" "brk, sbrk: change private data segment size" "" brk(3P)
.xx "binary to printable ASCII" "" "btoa, atob, tarmail, untarmail: encode\&/decode" "" btoa(1)
.xx "" "fread, fwrite:" "buffered binary input/output" "" fread(3S)
.xx "" "stdio: standard" "buffered input/output package" "" intro(3S)
.xx "" "setbuf, setbuffer, setlinebuf: assign" "buffering to a stream" "" setbuf(3S)
.xx "" "mailbug: submit a" "bug report or enhancement request" "" mailbug(1)
.xx "references in a bibliography" "indxbib, lookbib:" "build inverted index for a bibliography, find" "" lookbib(1)
.xx "" "mknod:" "build special file" "" mknod(8)
.xx "" "config:" "build system configuration files" "" config(8)
.xx "" "offline_all: take all" "but one active processor off line" "" offline_all(3)
.xx "" "ntohs: convert values between host and network" "byte order" "htonl, htons, ntohl," byteorder(3N)
.xx "" "bcopy, bcmp, bzero, ffs: bit and" "byte string operations" "" bstring(3)
.xx "" "swab: swap" "bytes" "" swab(3)
.xx "" "bcopy, bcmp," "bzero, ffs: bit and byte string operations" "" bstring(3)
.xx "" "cc:" "C compiler" "" cc(1)
.xx "" "cpp: the" "C language preprocessor" "" cpp(1)
.xx "" "cb:" "C program beautifier" "" cb(1)
.xx "" "indent: indent and format" "C program source" "" indent(1)
.xx "" "lint: a" "C program verifier" "" lint(1)
.xx "" "xstr: extract strings from" "C programs to implement shared strings" "" xstr(1)
.xx "" "mkstr: create an error message file by massaging" "C source" "" mkstr(1)
.xx "" "hypot," "cabs: Euclidean distance" "" hypot(3M)
.xx "" "" "cal: print calendar" "" cal(1)
.xx "" "diskpart:" "calculate default disk partition sizes" "" diskpart(8)
.xx "" "dc: desk" "calculator" "" dc(1)
.xx "" "cal: print" "calendar" "" cal(1)
.xx "" "" "calendar: reminder service" "" calendar(1)
.xx "" "syscall: indirect system" "call" "" syscall(2)
.xx "" "gprof: display" "call graph profile data" "" gprof(1)
.xx "" "malloc, free, realloc," "calloc, alloca: memory allocator" "" malloc(3)
.xx "" "rpc: library routines for remote procedure" "calls" "" rpc(3N)
.xx "" "intro: introduction to system" "calls and error numbers" "" intro(2)
.xx "" "canfield, cfscores: the solitaire card game" "canfield" "" canfield(6)
.xx "" "" "canfield, cfscores: the solitaire card game canfield" "" canfield(6)
.xx "" "printcap: printer" "capability data base" "" printcap(5)
.xx "" "termcap: terminal" "capability data base" "" termcap(5)
.xx "" "canfield, cfscores: the solitaire" "card game canfield" "" canfield(6)
.xx "" "cribbage: the" "card game cribbage" "" cribbage(6)
.xx "exec, exit, export, login, read, readonly,/" "sh, for," "case, if, while, :, ., break, continue, cd, eval," "" sh(1)
.xx "" "" "case: selector in switch." "" csh(1)
.xx "" "" "cat: catenate and print" "" cat(1)
.xx "" "catman: create the" "cat files for the manual" "" catman(8)
.xx "" "" "cat: standalone file display utility" "" cat(8S)
.xx "" "uncompact, ccat: compress and uncompress files, and" "cat them" "compact," compact(1)
.xx "" "default:" "catchall clause in switch." "" csh(1)
.xx "" "cat:" "catenate and print" "" cat(1)
.xx "" "" "catman: create the cat files for the manual" "" catman(8)
.xx "" "" "cb: C program beautifier" "" cb(1)
.xx "" "" "cc: C compiler" "" cc(1)
.xx "" "compact, uncompact," "ccat: compress and uncompress files, and cat them" "" compact(1)
.xx "" "" "cd: change directory." "" csh(1)
.xx "" "" "cd: change working directory" "" cd(1)
.xx "" "sh, for, case, if, while, :, ., break, continue," "cd, eval, exec, exit, export, login, read, readonly,/" "" sh(1)
.xx "" "fabs, floor," "ceil: absolute value, floor, ceiling functions" "" floor(3M)
.xx "" "fabs, floor, ceil: absolute value, floor," "ceiling functions" "" floor(3M)
.xx "" "canfield," "cfscores: the solitaire card game canfield" "" canfield(6)
.xx "" "chdir:" "change current working directory" "" chdir(2)
.xx "" "brk, sbrk:" "change data segment size" "" brk(2)
.xx "" "chsh:" "change default login shell" "" chsh(1)
.xx "" "cd:" "change directory." "" csh(1)
.xx "" "chdir:" "change directory." "" csh(1)
.xx "" "chfn:" "change finger entry" "" chfn(1)
.xx "" "chgrp:" "change group" "" chgrp(1)
.xx "" "passwd:" "change login password" "" passwd(1)
.xx "" "chmod:" "change mode" "" chmod(1)
.xx "" "chmod, fchmod:" "change mode of file" "" chmod(2)
.xx "" "umask:" "change or display file creation mask." "" csh(1)
.xx "" "chown:" "change owner" "" chown(8)
.xx "" "chown, fchown:" "change owner and group of a file" "" chown(2)
.xx "" "brk, sbrk:" "change private data segment size" "" brk(3P)
.xx "" "rcs:" "change RCS file attributes" "" rcs(1)
.xx "" "chroot:" "change root directory" "" chroot(2)
.xx "" "shbrk, shsbrk:" "change shared data segment size" "" shbrk(3P)
.xx "" "bootflags: display/" "change system boot flags" "" bootflags(8)
.xx "" "rename:" "change the name of a file" "" rename(2)
.xx "" "universe:" "change the universe for a process" "" universe(2)
.xx "" "set:" "change value of shell variable." "" csh(1)
.xx "" "vm_ctl: examine and" "change virtual memory tuning parameters" "" vm_ctl(2)
.xx "" "cd:" "change working directory" "" cd(1)
.xx "" "better random number generator; routines for" "changing generators" "/srandom, initstate, setstate:" random(3)
.xx "" "pipe: create an interprocess communication" "channel" "" pipe(2)
.xx "" "zd: Sequent Dual-" "Channel Disk Controller" "" zd(4)
.xx "" "zdformat: standalone disk formatter for dual-" "channel disk controller" "" zdformat(8S)
.xx "" "ungetc: push" "character back into input stream" "" ungetc(3S)
.xx "" "/isspace, isupper, toascii, tolower, toupper:" "character classification and conversion macros" "" ctype(3)
.xx "" "eqnchar: special" "character definitions for eqn" "" eqnchar(7)
.xx "" "getc, getchar, fgetc, getw: get" "character or word from stream" "" getc(3S)
.xx "" "putc, putchar, fputc, putw: put" "character or word on a stream" "" putc(3S)
.xx "" "ascii: map of ASCII" "character set" "" ascii(7)
.xx "" "style: analyze surface" "characteristics of a document" "" style(1)
.xx "" "tr: translate" "characters" "" tr(1)
.xx "" "snake, snscore: display" "chase game" "" snake(6)
.xx "" "" "chdir: change current working directory" "" chdir(2)
.xx "" "" "chdir: change directory." "" csh(1)
.xx "" "dcheck: file system directory consistency" "check" "" dcheck(8)
.xx "" "icheck: file system storage consistency" "check" "" icheck(8)
.xx "" "fsck: file system consistency" "check and interactive repair" "" fsck(8)
.xx "" "fsck: standalone file system consistency" "check and interactive repair" "" fsck(8S)
.xx "" "m_sync:" "check in at barrier" "" m_sync(3P)
.xx "" "ci:" "check in RCS revisions" "" ci(1)
.xx "" "checknr:" "check nroff/troff files" "" checknr(1)
.xx "" "co:" "check out RCS revisions" "" co(1)
.xx "" "eqn, neqn," "checkeq: typeset mathematics" "" eqn(1)
.xx "" "quotacheck: filesystem quota consistency" "checker" "" quotacheck(8)
.xx "" "libsanity: libc routines with runtime sanity" "checking" "" libsanity(3X)
.xx "" "fastboot, fasthalt: reboot/halt the system without" "checking the disks" "" fastboot(8)
.xx "" "" "checknr: check nroff/troff files" "" checknr(1)
.xx "" "" "chfn: change finger entry" "" chfn(1)
.xx "" "" "chgrp: change group" "" chgrp(1)
.xx "" "m_park_procs, m_rele_procs: suspend and resume" "child process execution" "" m_park_procs(3P)
.xx "" "m_get_numprocs: return number of" "child processes" "" m_get_numprocs(3P)
.xx "" "m_kill_procs: kill" "child processes" "" m_kill_procs(3P)
.xx "" "m_set_procs: set number of" "child processes" "" m_set_procs(3P)
.xx "" "" "chmod: change mode" "" chmod(1)
.xx "" "" "chmod, fchmod: change mode of file" "" chmod(2)
.xx "" "" "chown: change owner" "" chown(8)
.xx "" "" "chown, fchown: change owner and group of a file" "" chown(2)
.xx "" "" "chroot: change root directory" "" chroot(2)
.xx "" "" "chsh: change default login shell" "" chsh(1)
.xx "" "" "ci: check in RCS revisions" "" ci(1)
.xx "closepl: graphics/" "plot: openpl, erase, label, line," "circle, arc, move, cont, point, linemod, space," "" plot(3X)
.xx "" "isupper, toascii, tolower, toupper: character" "classification and conversion macros" "/isspace," ctype(3)
.xx "" "default: catchall" "clause in switch." "" csh(1)
.xx "" "uuclean: uucp spool directory" "clean-up" "" uuclean(8C)
.xx "" "" "clear: clear terminal screen" "" clear(1)
.xx "" "clri:" "clear i-node" "" clri(8)
.xx "" "clear:" "clear terminal screen" "" clear(1)
.xx "" "ferror, feof," "clearerr, fileno: stream status inquiries" "" ferror(3S)
.xx "" "yp_master yperr_string ypprot_err: yellow pages" "client interface" "/yp_first yp_next yp_all yp_order" ypclnt(3N)
.xx "" "csh: a shell (command interpreter) with" "C-like syntax" "" csh(1)
.xx "" "getusclk, usclk_init: get/init microsecond" "clock" "" getusclk(3)
.xx "" "usclk_conf: microsecond" "clock confidence test" "" usclk_conf(8)
.xx "" "cron:" "clock daemon" "" cron(8)
.xx "" "" "close: delete a descriptor" "" close(2)
.xx "" "shutdown:" "close down the system at a given time" "" shutdown(8)
.xx "" "fclose, fflush:" "close or flush a stream" "" fclose(3S)
.xx "" "opendir, readdir, telldir, seekdir, rewinddir," "closedir: directory operations" "" directory(3)
.xx "" "syslog, openlog," "closelog: control system log" "" syslog(3)
.xx "" "circle, arc, move, cont, point, linemod, space," "closepl: graphics interface" "/erase, label, line," plot(3X)
.xx "" "" "clri: clear i-node" "" clri(8)
.xx "" "" "cmp: compare two files" "" cmp(1)
.xx "" "" "co: check out RCS revisions" "" co(1)
.xx "" "diagnostics from the DYNIX autoconfiguration" "code" "autoconf:" autoconf(4)
.xx "" "m_single, m_multi: mark single-process" "code section" "" m_single(3P)
.xx "" "" "col: filter reverse line feeds" "" col(1)
.xx "" "" "colcrt: filter nroff output for CRT previewing" "" colcrt(1)
.xx "form error log" "dmesg:" "collect system diagnostic messages to" "" dmesg(8)
.xx "" "" "colrm: remove columns from a file" "" colrm(1)
.xx "" "colrm: remove" "columns from a file" "" colrm(1)
.xx "files" "" "comm: select or reject lines common to two sorted" "" comm(1)
.xx "" "exec: overlay shell with specified" "command." "" csh(1)
.xx "" "time: time" "command." "" csh(1)
.xx "" "ruserok: routines for returning a stream to a remote" "command" "rcmd, rresvport," rcmd(3X)
.xx "" "rexec: return stream to a remote" "command" "" rexec(3X)
.xx "" "system: issue a shell" "command" "" system(3)
.xx "" "test: condition" "command" "" test(1)
.xx "" "time, ptime: time a" "command" "" time(1)
.xx "" "xargs: construct argument list(s) and execute" "command" "" xargs(1)
.xx "" "nice, nohup: run a" "command at low priority (sh only)" "" nice(1)
.xx "" "switch: multi-way" "command branch." "" csh(1)
.xx "" "uux: unix to unix" "command execution" "" uux(1C)
.xx "" "rehash: recompute" "command hash table." "" csh(1)
.xx "" "unhash: discard" "command hash table." "" csh(1)
.xx "" "hashstat: print" "command hashing statistics." "" csh(1)
.xx "" "nohup: run" "command immune to hangups." "" csh(1)
.xx "" "csh: a shell (" "command interpreter) with C-like syntax" "" csh(1)
.xx "" "whatis: describe what a" "command is" "" whatis(1)
.xx "" "readonly, set, shift, [, times, trap, umask, wait:" "command language" "/exec, exit, export, login, read," sh(1)
.xx "" "L.cmds: UUCP remote" "command permissions file" "" l.cmds(5)
.xx "" "repeat: execute" "command repeatedly." "" csh(1)
.xx "" "rc:" "command script for auto-reboot and daemons" "" rc(8)
.xx "" "onintr: process interrupts in" "command scripts." "" csh(1)
.xx "" "apply: apply a" "command to a set of arguments" "" apply(1)
.xx "" "goto:" "command transfer." "" csh(1)
.xx "processor migration/" "noage, nopff, noswap, on: run a" "command with priority aging, PFF, swapping, or" "" noage(8)
.xx "" "else: alternative" "commands." "" csh(1)
.xx "" "intro: introduction to" "commands" "" intro(1)
.xx "" "introduction to system maintenance and operation" "commands" "intro:" intro(8)
.xx "" "rcsintro: introduction to RCS" "commands" "" rcsintro(1)
.xx "" "at: execute" "commands at a later time" "" at(1)
.xx "" "apropos: locate" "commands by keyword lookup" "" apropos(1)
.xx "" "while: repeat" "commands conditionally." "" csh(1)
.xx "" "lastcomm: show last" "commands executed in reverse order" "" lastcomm(1)
.xx "" "source: read" "commands from file." "" csh(1)
.xx "" "comm: select or reject lines" "common to two sorted files" "" comm(1)
.xx "" "socket: create an endpoint for" "communication" "" socket(2)
.xx "" "pipe: create an interprocess" "communication channel" "" pipe(2)
.xx "" "users:" "compact list of users who are on the system" "" users(1)
.xx "compress and uncompress files, and cat them" "" "compact, uncompact, ccat:" "" compact(1)
.xx "" "diff: differential file and directory" "comparator" "" diff(1)
.xx "" "zcmp, zdiff:" "compare compressed files" "" zcmp(1)
.xx "" "rcsdiff:" "compare RCS revisions" "" rcsdiff(1)
.xx "" "cmp:" "compare two files" "" cmp(1)
.xx "" "diff3: 3-way differential file" "comparison" "" diff3(1)
.xx "" "intro: introduction to" "compatibility library functions" "" intro(3C)
.xx "" "cc: C" "compiler" "" cc(1)
.xx "" "pc: Pascal" "compiler" "" pc(1)
.xx "" "yacc: yet another compiler-" "compiler" "" yacc(1)
.xx "" "error: analyze and disperse" "compiler error messages" "" error(1)
.xx "" "yacc: yet another" "compiler-compiler" "" yacc(1)
.xx "" "wait: wait for background processes to" "complete." "" csh(1)
.xx "" "wait: await" "completion of process" "" wait(1)
.xx "" "compress and expand data" "compress, uncompress, zcat:" "" compress(1)
.xx "" "compressdir, uncompressdir:" "compress and uncompress directories of files" "" compressdir(1)
.xx "" "compact, uncompact, ccat:" "compress and uncompress files, and cat them" "" compact(1)
.xx "" "compress, uncompress, zcat: compress and expand data" "" "" compress(1)
.xx "compress and uncompress directories of files" "" "compressdir, uncompressdir:" "" compressdir(1)
.xx "" "zcmp, zdiff: compare" "compressed files" "" zcmp(1)
.xx "" "zmore: file perusal filter for crt viewing of" "compressed text" "" zmore(1)
.xx "" "learn:" "computer aided instruction about UNIX" "" learn(1)
.xx "" "hangman:" "Computer version of the game hangman" "" hangman(6)
.xx "" "" "comsat: biff server" "" comsat(8C)
.xx "" "test:" "condition command" "" test(1)
.xx "" "endif: terminate" "conditional." "" csh(1)
.xx "" "if:" "conditional statement." "" csh(1)
.xx "" "readclink: read value of a" "conditional symbolic link" "" readclink(2)
.xx "" "csymlink: make" "conditional symbolic link to a file" "" csymlink(2)
.xx "" "while: repeat commands" "conditionally." "" csh(1)
.xx "" "usclk_conf: microsecond clock" "confidence test" "" usclk_conf(8)
.xx "" "" "config: build system configuration files" "" config(8)
.xx "" "gettytab: terminal" "configuration data base" "" gettytab(5)
.xx "" "config: build system" "configuration files" "" config(8)
.xx "" "showcfg: show the" "configuration of the machine" "" showcfg(8)
.xx "" "ifconfig:" "configure network interface parameters" "" ifconfig(8C)
.xx "" "ttyconfig:" "configure Systech tty lines" "" ttyconfig(8)
.xx "" "" "connect: initiate a connection on a socket" "" connect(2)
.xx "" "tip, cu:" "connect to a remote system" "" tip(1C)
.xx "" "getpeername: get name of" "connected peer" "" getpeername(2)
.xx "" "socketpair: create a pair of" "connected sockets" "" socketpair(2)
.xx "" "shutdown: shut down part of a full-duplex" "connection" "" shutdown(2)
.xx "" "accept: accept a" "connection on a socket" "" accept(2)
.xx "" "connect: initiate a" "connection on a socket" "" connect(2)
.xx "" "listen: listen for" "connections on a socket" "" listen(2)
.xx "" "" "cons: Sequent console interface" "" cons(4)
.xx "" "dcheck: file system directory" "consistency check" "" dcheck(8)
.xx "" "icheck: file system storage" "consistency check" "" icheck(8)
.xx "" "fsck: file system" "consistency check and interactive repair" "" fsck(8)
.xx "" "fsck: standalone file system" "consistency check and interactive repair" "" fsck(8S)
.xx "" "quotacheck: filesystem quota" "consistency checker" "" quotacheck(8)
.xx "" "cons: Sequent" "console interface" "" cons(4)
.xx "" "show what versions of object modules were used to" "construct a file" "what:" what(1)
.xx "" "mkfs:" "construct a file system" "" mkfs(8)
.xx "" "newfs:" "construct a new file system" "" newfs(8)
.xx "" "mkproto:" "construct a prototype file system" "" mkproto(8)
.xx "" "xargs:" "construct argument list(s) and execute command" "" xargs(1)
.xx "" "deroff: remove nroff, troff, tbl and eqn" "constructs" "" deroff(1)
.xx "" "setrlimit: control maximum system resource" "consumption" "getrlimit," getrlimit(2)
.xx "" "vlimit: control maximum system resource" "consumption" "" vlimit(3C)
.xx "" "plot: openpl, erase, label, line, circle, arc, move," "cont, point, linemod, space, closepl: graphics/" "" plot(3X)
.xx "" "badsect: create files to" "contain bad sectors" "" badsect(8)
.xx "" "ls: list" "contents of directory" "" ls(1)
.xx "" "sigstack: set and/or get signal stack" "context" "" sigstack(2)
.xx "readonly,/" "sh, for, case, if, while, :, ., break," "continue, cd, eval, exec, exit, export, login, read," "" sh(1)
.xx "" "" "continue: cycle in loop." "" csh(1)
.xx "" "arp: address resolution display and" "control" "" arp(8C)
.xx "" "fcntl: file" "control" "" fcntl(2)
.xx "" "tmp_ctl: multi-processor" "control" "" tmp_ctl(2)
.xx "" "ioctl:" "control device" "" ioctl(2)
.xx "" "init: process" "control initialization" "" init(8)
.xx "" "getrlimit, setrlimit:" "control maximum system resource consumption" "" getrlimit(2)
.xx "" "vlimit:" "control maximum system resource consumption" "" vlimit(3C)
.xx "" "icmp: Internet" "Control Message Protocol" "" icmp(4P)
.xx "" "msgctl: message" "control operations" "" msgctl(2)
.xx "" "semctl: semaphore" "control operations" "" semctl(2)
.xx "" "proc_ctl:" "control over various process attributes" "" proc_ctl(2)
.xx "" "lpc: line printer" "control program" "" lpc(8)
.xx "" "tcp: Internet Transmission" "Control Protocol" "" tcp(4P)
.xx "" "syslog, openlog, closelog:" "control system log" "" syslog(3)
.xx "" "vhangup: virtually ``hangup'' the current" "control terminal" "" vhangup(2)
.xx "" "sd: SCSI disk" "controller" "" sd(4)
.xx "" "ts: SCSI tape" "controller" "" ts(4)
.xx "" "zd: Sequent Dual-Channel Disk" "Controller" "" zd(4)
.xx "" "standalone disk formatter for dual-channel disk" "controller" "zdformat:" zdformat(8S)
.xx "" "term:" "conventional names for terminals" "" term(7)
.xx "" "ecvt, fcvt, gcvt: output" "conversion" "" ecvt(3)
.xx "" "printf, fprintf, sprintf: formatted output" "conversion" "" printf(3S)
.xx "" "scanf, fscanf, sscanf: formatted input" "conversion" "" scanf(3S)
.xx "" "tolower, toupper: character classification and" "conversion macros" "/isspace, isupper, toascii," ctype(3)
.xx "" "units:" "conversion program" "" units(1)
.xx "" "dd:" "convert and copy a file" "" dd(1)
.xx "" "number:" "convert Arabic numerals to English" "" number(6)
.xx "" "arcv:" "convert archives to new format" "" arcv(8)
.xx "" "ranlib:" "convert archives to random libraries" "" ranlib(1)
.xx "" "atof, atoi, atol:" "convert ASCII to numbers" "" atof(3)
.xx "" "ctime, localtime, gmtime, asctime, timezone:" "convert date and time to ASCII" "" ctime(3)
.xx "" "htable:" "convert NIC standard format host tables" "" htable(8)
.xx "" "bcd:" "convert to antique media" "" bcd(6)
.xx "" "htonl, htons, ntohl, ntohs:" "convert host and network byte-order values" "" byteorder(3N)
.xx "" "cp:" "copy" "" cp(1)
.xx "" "rcp: remote file" "copy" "" rcp(1C)
.xx "" "uucp: unix to unix" "copy" "" uucp(1C)
.xx "" "dd: convert and" "copy a file" "" dd(1)
.xx "" "" "copy: perform a standalone simple data transfer" "" copy(8S)
.xx "" "" "copy2: perform a standalone data transfer" "" copy2(8S)
.xx "" "savecore: save a" "core dump of the operating system" "" savecore(8)
.xx "" "" "core: format of memory image file" "" core(5)
.xx "" "gcore: get" "core images of running processes" "" gcore(1)
.xx "" "fsync: synchronize a file's in-" "core state with that on disk" "" fsync(2)
.xx "functions" "sin," "cos, tan, asin, acos, atan, atan2: trigonometric" "" sin(3M)
.xx "" "sinh," "cosh, tanh: hyperbolic functions" "" sinh(3M)
.xx "" "nargs: get argument" "count" "" nargs(3C)
.xx "" "wc: word" "count" "" wc(1)
.xx "" "sum: sum and" "count blocks in a file" "" sum(1)
.xx "" "m_next: increment global" "counter" "" m_next(3P)
.xx "" "usclk: 32-bit microsecond" "counter" "" usclk(4)
.xx "" "" "cp: copy" "" cp(1)
.xx "" "" "cpp: the C language preprocessor" "" cpp(1)
.xx "" "cpus_online: returns the number of" "CPUs on-line" "" cpus_online(3P)
.xx "" "" "cpus_online: returns the number of CPUs on-line" "" cpus_online(3P)
.xx "" "" "creat: create a new file" "" creat(2)
.xx "" "creat:" "create a new file" "" creat(2)
.xx "" "open: open a file for reading or writing, or" "create a new file" "" open(2)
.xx "" "fork:" "create a new process" "" fork(2)
.xx "" "socketpair:" "create a pair of connected sockets" "" socketpair(2)
.xx "" "ctags:" "create a tags file" "" ctags(1)
.xx "" "a.tags:" "create a tags file for Ada sources" "" a.tags(1)
.xx "" "socket:" "create an endpoint for communication" "" socket(2)
.xx "" "mkstr:" "create an error message file by massaging C source" "" mkstr(1)
.xx "" "pipe:" "create an interprocess communication channel" "" pipe(2)
.xx "" "badsect:" "create files to contain bad sectors" "" badsect(8)
.xx "" "addbib:" "create or extend bibliographic database" "" addbib(1)
.xx "" "catman:" "create the cat files for the manual" "" catman(8)
.xx "" "umask: change or display file" "creation mask." "" csh(1)
.xx "" "umask: set file" "creation mode mask" "" umask(2)
.xx "" "cribbage: the card game" "cribbage" "" cribbage(6)
.xx "" "" "cribbage: the card game cribbage" "" cribbage(6)
.xx "" "" "cron: clock daemon" "" cron(8)
.xx "" "colcrt: filter nroff output for" "CRT previewing" "" colcrt(1)
.xx "" "more, page: file perusal filter for" "crt viewing" "" more(1)
.xx "" "zmore: file perusal filter for" "crt viewing of compressed text" "" zmore(1)
.xx "" "" "crypt: encode/decode" "" crypt(1)
.xx "" "" "crypt, setkey, encrypt: DES encryption" "" crypt(3)
.xx "syntax" "" "csh: a shell (command interpreter) with C-like" "" csh(1)
.xx "" "locate a program file including aliases and paths (" "csh only)" "which:" which(1)
.xx "" "" "csymlink: make conditional symbolic link to a file" "" csymlink(2)
.xx "" "" "ctags: create a tags file" "" ctags(1)
.xx "convert date and time to ASCII" "" "ctime, localtime, gmtime, asctime, timezone:" "" ctime(3)
.xx "" "tip," "cu: connect to a remote system" "" tip(1C)
.xx "" "vhangup: virtually ``hangup'' the" "current control terminal" "" vhangup(2)
.xx "" "getdomainname, setdomainname: get/set name of" "current domain" "" getdomainname(2)
.xx "" "domainname: set or display name of" "current domain system" "" domainname(1)
.xx "" "gethostid, sethostid: get/set unique identifier of" "current host" "" gethostid(2)
.xx "" "gethostname, sethostname: get/set name of" "current host" "" gethostname(2)
.xx "" "hostid: set or print identifier of" "current host system" "" hostid(1)
.xx "" "hostname: set or print name of" "current host system" "" hostname(1)
.xx "" "jobs: print" "current job list." "" csh(1)
.xx "" "sigsetmask: set" "current signal mask" "" sigsetmask(2)
.xx "" "whoami: print effective" "current user id" "" whoami(1)
.xx "" "chdir: change" "current working directory" "" chdir(2)
.xx "" "getwd: get" "current working directory pathname" "" getwd(3)
.xx "motion" "" "curses: screen functions with ``optimal'' cursor" "" curses(3X)
.xx "" "curses: screen functions with ``optimal''" "cursor motion" "" curses(3X)
.xx "" "spline: interpolate smooth" "curve" "" spline(1G)
.xx "" "continue:" "cycle in loop." "" csh(1)
.xx "" "cron: clock" "daemon" "" cron(8)
.xx "" "inetd: internet services" "daemon" "" inetd(8C)
.xx "" "lpd: line printer" "daemon" "" lpd(8)
.xx "" "routed: network routing" "daemon" "" routed(8C)
.xx "" "rc: command script for auto-reboot and" "daemons" "" rc(8)
.xx "" "ftpd:" "DARPA Internet File Transfer Protocol server" "" ftpd(8C)
.xx "" "portmap:" "DARPA port to RPC program number mapper" "" portmap(8C)
.xx "" "telnetd:" "DARPA TELNET protocol server" "" telnetd(8C)
.xx "" "tftpd:" "DARPA Trivial File Transfer Protocol server" "" tftpd(8C)
.xx "" "compress, uncompress, zcat: compress and expand" "data" "" compress(1)
.xx "" "eval: re-evaluate shell" "data." "" csh(1)
.xx "" "gprof: display call graph profile" "data" "" gprof(1)
.xx "" "prof: display profile" "data" "" prof(1)
.xx "" "ttys: terminal initialization" "data" "" ttys(5)
.xx "" "gettytab: terminal configuration" "data base" "" gettytab(5)
.xx "" "hosts: host name" "data base" "" hosts(5)
.xx "" "networks: network name" "data base" "" networks(5)
.xx "" "phones: remote host phone number" "data base" "" phones(5)
.xx "" "printcap: printer capability" "data base" "" printcap(5)
.xx "" "protocols: protocol name" "data base" "" protocols(5)
.xx "" "rpc: rpc program number" "data base" "" rpc(5)
.xx "" "servers: inet server" "data base" "" servers(5)
.xx "" "services: service name" "data base" "" services(5)
.xx "" "termcap: terminal capability" "data base" "" termcap(5)
.xx "" "vgrindefs: vgrind's language definition" "data base" "" vgrindefs(5)
.xx "" "newaliases: rebuild the" "data base for the mail aliases file" "" newaliases(1)
.xx "" "ttytype:" "data base of terminal types by port" "" ttytype(5)
.xx "" "dbminit, fetch, store, delete, firstkey, nextkey:" "data base subroutines" "" dbm(3X)
.xx "" "xdr: library routines for external" "data representation" "" xdr(3N)
.xx "" "brk, sbrk: change" "data segment size" "" brk(2)
.xx "" "brk, sbrk: change private" "data segment size" "" brk(3P)
.xx "" "shbrk, shsbrk: change shared" "data segment size" "" shbrk(3P)
.xx "" "null:" "data sink" "" null(4)
.xx "" "copy2: perform a standalone" "data transfer" "" copy2(8S)
.xx "" "copy: perform a standalone simple" "data transfer" "" copy(8S)
.xx "" "types: primitive system" "data types" "" types(5)
.xx "" "addbib: create or extend bibliographic" "database" "" addbib(1)
.xx "" "roffbib: run off bibliographic" "database" "" roffbib(1)
.xx "" "sortbib: sort bibliographic" "database" "" sortbib(1)
.xx "" "ddp: AppleTalk" "Datagram Delivery Protocol" "" ddp(4P)
.xx "" "udp: Internet User" "Datagram Protocol" "" udp(4P)
.xx "" "date: print and set the" "date" "" date(1)
.xx "" "gettimeofday, settimeofday: get/set" "date and time" "" gettimeofday(2)
.xx "" "time, ftime: get" "date and time" "" time(3C)
.xx "" "ctime, localtime, gmtime, asctime, timezone: convert" "date and time to ASCII" "" ctime(3)
.xx "" "touch: update" "date last modified of a file" "" touch(1)
.xx "" "" "date: print and set the date" "" date(1)
.xx "data base subroutines" "" "dbminit, fetch, store, delete, firstkey, nextkey:" "" dbm(3X)
.xx "" "pdbx," "dbx: parallel debugger" "" pdbx(1)
.xx "" "" "dc: desk calculator" "" dc(1)
.xx "" "" "dcheck: file system directory consistency check" "" dcheck(8)
.xx "" "" "dd: convert and copy a file" "" dd(1)
.xx "" "" "ddp: AppleTalk Datagram Delivery Protocol" "" ddp(4P)
.xx "" "" "ddt: interactive symbolic debugger (Balance only)" "" ddt(1)
.xx "" "pdbx, dbx: parallel" "debugger" "" pdbx(1)
.xx "" "ddt: interactive symbolic" "debugger (Balance only)" "" ddt(1)
.xx "" "addbad: modify" "dec standard 144 bad sector information" "" addbad(8)
.xx "" "bad144: read/write" "dec standard 144 bad sector information" "" bad144(8)
.xx "" "od: octal," "decimal, hex, ascii dump" "" od(1)
.xx "" "tp:" "DEC/mag tape formats" "" tp(5)
.xx "" "crypt: encode/" "decode" "" crypt(1)
.xx "" "uuencode, uudecode: encode/" "decode a binary file for transmission via mail" "" uuencode(1C)
.xx "" "btoa, atob, tarmail, untarmail: encode/" "decode binary to printable ASCII" "" btoa(1)
.xx "" "" "default: catchall clause in switch." "" csh(1)
.xx "" "diskpart: calculate" "default disk partition sizes" "" diskpart(8)
.xx "" "chsh: change" "default login shell" "" chsh(1)
.xx "" "vgrindefs: vgrind's language" "definition data base" "" vgrindefs(5)
.xx "" "eqnchar: special character" "definitions for eqn" "" eqnchar(7)
.xx "" "stty, gtty: set and get terminal state (" "defunct)" "" stty(3C)
.xx "" "close:" "delete a descriptor" "" close(2)
.xx "" "dbminit, fetch, store," "delete, firstkey, nextkey: data base subroutines" "" dbm(3X)
.xx "" "tail:" "deliver the last part of a file" "" tail(1)
.xx "" "ddp: AppleTalk Datagram" "Delivery Protocol" "" ddp(4P)
.xx "" "mesg: permit or" "deny messages" "" mesg(1)
.xx "" "tset: terminal" "dependent initialization" "" tset(1)
.xx "" "" "deroff: remove nroff, troff, tbl and eqn constructs" "" deroff(1)
.xx "" "crypt, setkey, encrypt:" "DES encryption" "" crypt(3)
.xx "" "whatis:" "describe what a command is" "" whatis(1)
.xx "" "mailaddr: mail addressing" "description" "" mailaddr(7)
.xx "" "getdiskbyname: get disk" "description by its name" "" getdiskbyname(3X)
.xx "" "disktab: disk" "description file" "" disktab(5)
.xx "" "L-devices: UUCP device" "description file" "" l-devices(5)
.xx "" "L.sys: UUCP remote host" "description file" "" l.sys(5)
.xx "" "remote: remote host" "description file" "" remote(5)
.xx "" "close: delete a" "descriptor" "" close(2)
.xx "" "dup, dup2: duplicate a" "descriptor" "" dup(2)
.xx "" "getfstype, setfsent, endfsent: get file system" "descriptor file entry" "/getfsspec, getfsfile," getfsent(3X)
.xx "" "getmntent, hasmntopt, setmntent: get file system" "descriptor file entry" "addmntent, endmntent," getmntent(3)
.xx "" "getdtablemax: get maximum in-use" "descriptor table index" "" getdtablemax(2)
.xx "" "getdtablesize: get" "descriptor table size" "" getdtablesize(2)
.xx "" "setdtablesize: set" "descriptor table size" "" setdtablesize(2)
.xx "" "dc:" "desk calculator" "" dc(1)
.xx "" "access:" "determine accessibility of file" "" access(2)
.xx "" "file:" "determine file type" "" file(1)
.xx "" "virtual terminal/fileserver for standalone program" "development" "host: remote" host(1)
.xx "" "drum: paging" "device" "" drum(4)
.xx "" "fold: fold long lines for finite width output" "device" "" fold(1)
.xx "" "ioctl: control" "device" "" ioctl(2)
.xx "" "L-devices: UUCP" "device description file" "" l-devices(5)
.xx "" "swapon: add a swap" "device for interleaved paging/swapping" "" swapon(2)
.xx "" "swapon: specify additional" "device for paging and swapping" "" swapon(8)
.xx "" "or alter parameters of virtual-to-physical mapping" "devices" "pmap: display" pmap(8)
.xx "" "L-" "devices: UUCP device description file" "" l-devices(5)
.xx "" "" "df: report free disk space on file systems" "" df(1)
.xx "" "dmesg: collect system" "diagnostic messages to form error log" "" dmesg(8)
.xx "diagnostics" "autoonf:" "from the DYNIX autoconfiguration code" "" autoconf(4)
.xx "" "L-" "dialcodes: UUCP phone number index file" "" l-dialcodes(5)
.xx "" "explain: print wordy sentences; thesaurus for" "diction" "diction," diction(1)
.xx "" "diction: print wordy sentences; thesaurus for" "diction" "explain," explain(1)
.xx "for diction" "" "diction, explain: print wordy sentences; thesaurus" "" diction(1)
.xx "diction" "explain," "diction: print wordy sentences; thesaurus for" "" explain(1)
.xx "" "" "diff: differential file and directory comparator" "" diff(1)
.xx "" "" "diff3: 3-way differential file comparison" "" diff3(1)
.xx "" "diff:" "differential file and directory comparator" "" diff(1)
.xx "" "diff3: 3-way" "differential file comparison" "" diff3(1)
.xx "" "" "dir: format of directories" "" dir(5)
.xx "" "dir: format of" "directories" "" dir(5)
.xx "" "rm, rmdir: remove (unlink) files or" "directories" "" rm(1)
.xx "" "compressdir, uncompressdir: compress and uncompress" "directories of files" "" compressdir(1)
.xx "" "rmdir, rm: remove (unlink)" "directories or files" "" rmdir(1)
.xx "" "cd: change working" "directory" "" cd(1)
.xx "" "chdir: change current working" "directory" "" chdir(2)
.xx "" "chroot: change root" "directory" "" chroot(2)
.xx "" "cd: change" "directory." "" csh(1)
.xx "" "chdir: change" "directory." "" csh(1)
.xx "" "ls: list contents of" "directory" "" ls(1)
.xx "" "mkdir: make a" "directory" "" mkdir(1)
.xx "" "scandir, alphasort: scan a" "directory" "" scandir(3)
.xx "" "uuclean: uucp spool" "directory clean-up" "" uuclean(8C)
.xx "" "diff: differential file and" "directory comparator" "" diff(1)
.xx "" "dcheck: file system" "directory consistency check" "" dcheck(8)
.xx "" "getdirentries: gets" "directory entries in a filesystem independent format" "" getdirentries(2)
.xx "" "unlink: remove" "directory entry" "" unlink(2)
.xx "" "mkdir: make a" "directory file" "" mkdir(2)
.xx "" "rmdir: remove a" "directory file" "" rmdir(2)
.xx "" "mklost+found: make a lost+found" "directory for fsck" "" mklost+found(8)
.xx "" "ls: generate a standalone" "directory listing" "" ls(8S)
.xx "" "pwd: working" "directory name" "" pwd(1)
.xx "" "readdir, telldir, seekdir, rewinddir, closedir:" "directory operations" "opendir," directory(3)
.xx "" "getwd: get current working" "directory pathname" "" getwd(3)
.xx "" "popd: pop shell" "directory stack." "" csh(1)
.xx "" "pushd: push shell" "directory stack." "" csh(1)
.xx "instructions" "" "dis: disassemble Series 32000 or Series 386" "" dis(3X)
.xx "" "aging, PFF, swapping, or processor migration" "disabled" "/noswap, on: run a command with priority" noage(8)
.xx "" "" "disas: disassemble binary files" "" disas(1)
.xx "" "disas:" "disassemble binary files" "" disas(1)
.xx "" "dis:" "disassemble Series 32000 or Series 386 instructions" "" dis(3X)
.xx "" "unhash:" "discard command hash table." "" csh(1)
.xx "" "unset:" "discard shell variables." "" csh(1)
.xx "" "synchronize a file's in-core state with that on" "disk" "fsync:" fsync(2)
.xx "" "sd: SCSI" "disk controller" "" sd(4)
.xx "" "zd: Sequent Dual-Channel" "Disk Controller" "" zd(4)
.xx "" "zdformat: standalone disk formatter for dual-channel" "disk controller" "" zdformat(8S)
.xx "" "getdiskbyname: get" "disk description by its name" "" getdiskbyname(3X)
.xx "" "disktab:" "disk description file" "" disktab(5)
.xx "" "formatscsi: standalone SCSI" "disk formatter" "" formatscsi(8S)
.xx "" "sdformat: standalone embedded SCSI" "disk formatter" "" sdformat(8S)
.xx "" "xpformat: standalone 400-Mbyte" "disk formatter" "" xpformat(8S)
.xx "" "zdformat: standalone" "disk formatter for dual-channel disk controller" "" zdformat(8S)
.xx "" "xp: Xylogics 450 MULTIBUS" "disk interface" "" xp(4)
.xx "" "diskpart: calculate default" "disk partition sizes" "" diskpart(8)
.xx "" "quotactl: manipulate" "disk quotas" "" quotactl(2)
.xx "" "df: report free" "disk space on file systems" "" df(1)
.xx "" "drtest: standalone" "disk test program" "" drtest(8S)
.xx "" "du: summarize" "disk usage" "" du(1)
.xx "" "quota: display" "disk usage and limits" "" quota(1)
.xx "" "" "diskpart: calculate default disk partition sizes" "" diskpart(8)
.xx "" "reboot/halt the system without checking the" "disks" "fastboot, fasthalt:" fastboot(8)
.xx "" "" "disktab: disk description file" "" disktab(5)
.xx "" "mount, umount: mount and" "dismount filesystems" "" mount(8)
.xx "" "error: analyze and" "disperse compiler error messages" "" error(1)
.xx "" "rain: animated raindrops" "display" "" rain(6)
.xx "" "arp: address resolution" "display and control" "" arp(8C)
.xx "" "gprof:" "display call graph profile data" "" gprof(1)
.xx "" "snake, snscore:" "display chase game" "" snake(6)
.xx "" "quota:" "display disk usage and limits" "" quota(1)
.xx "" "version:" "display DYNIX version number" "" version(8)
.xx "" "vi, view: screen oriented (visual)" "display editor based on ex" "" vi(1)
.xx "" "umask: change or" "display file creation mask." "" csh(1)
.xx "" "domainname: set or" "display name of current domain system" "" domainname(1)
.xx "mapping devices" "pmap:" "display or alter parameters of virtual-to-physical" "" pmap(8)
.xx "" "prof:" "display profile data" "" prof(1)
.xx "" "sysline:" "display system status on status line of a terminal" "" sysline(1)
.xx "" "worms: animate worms on a" "display terminal" "" worms(6)
.xx "" "cat: standalone file" "display utility" "" cat(8S)
.xx "" "uulog:" "display UUCP log files" "" uulog(1C)
.xx "" "bootflags:" "display/change system boot flags" "" bootflags(8)
.xx "" "hypot, cabs: Euclidean" "distance" "" hypot(3M)
.xx "error log" "" "dmesg: collect system diagnostic messages to form" "" dmesg(8)
.xx "" "style: analyze surface characteristics of a" "document" "" style(1)
.xx "" "refer: find and insert literature references in" "documents" "" refer(1)
.xx "" "w: who is on and what they are" "doing" "" w(1)
.xx "" "setdomainname: get/set name of current" "domain" "getdomainname," getdomainname(2)
.xx "" "domainname: set or display name of current" "domain system" "" domainname(1)
.xx "set or display name of current domain system" "" "domainname:" "" domainname(1)
.xx "" "rogue: Exploring The Dungeons of" "Doom" "" rogue(6)
.xx "" "shutdown: shut" "down part of a full-duplex connection" "" shutdown(2)
.xx "" "shutdown: close" "down the system at a given time" "" shutdown(8)
.xx "" "graph:" "draw a graph" "" graph(1G)
.xx "" "arithmetic: provide" "drill in number facts" "" arithmetic(6)
.xx "" "pty: pseudo terminal" "driver" "" pty(4)
.xx "" "smem, smemco: SCED memory" "driver" "" smem(4)
.xx "" "st: Systech MTI-800/1600 terminal multiplexor" "driver" "" st(4)
.xx "" "" "drtest: standalone disk test program" "" drtest(8S)
.xx "" "" "drum: paging device" "" drum(4)
.xx "" "" "du: summarize disk usage" "" du(1)
.xx "" "zd: Sequent" "Dual-Channel Disk Controller" "" zd(4)
.xx "" "zdformat: standalone disk formatter for" "dual-channel disk controller" "" zdformat(8S)
.xx "" "dump: incremental file system" "dump" "" dump(8)
.xx "" "od: octal, decimal, hex, ascii" "dump" "" od(1)
.xx "" "rdump: file system" "dump across the network" "" rdump(8C)
.xx "" "rrestore: restore a file system" "dump across the network" "" rrestore(8C)
.xx "" "" "dump, dumpdates: incremental dump format" "" dump(5)
.xx "" "dumpfs:" "dump file system information" "" dumpfs(8)
.xx "" "dump, dumpdates: incremental" "dump format" "" dump(5)
.xx "" "" "dump: incremental file system dump" "" dump(8)
.xx "" "savecore: save a core" "dump of the operating system" "" savecore(8)
.xx "" "" "dump: standalone memory dumper" "" dump(8S)
.xx "" "dump," "dumpdates: incremental dump format" "" dump(5)
.xx "" "dump: standalone memory" "dumper" "" dump(8S)
.xx "" "" "dumpfs: dump file system information" "" dumpfs(8)
.xx "" "rogue: Exploring The" "Dungeons of Doom" "" rogue(6)
.xx "" "" "dup, dup2: duplicate a descriptor" "" dup(2)
.xx "" "dup," "dup2: duplicate a descriptor" "" dup(2)
.xx "" "shutdown: shut down part of a full-" "duplex connection" "" shutdown(2)
.xx "" "dup, dup2:" "duplicate a descriptor" "" dup(2)
.xx "" "boot: run a standalone program or bring up" "DYNIX" "" boot(8S)
.xx "" "autoconf: diagnostics from the" "DYNIX autoconfiguration code" "" autoconf(4)
.xx "" "reboot:" "DYNIX bootstrapping procedures" "" reboot(8)
.xx "" "version: display" "DYNIX version number" "" version(8)
.xx "" "echo:" "echo arguments." "" csh(1)
.xx "" "echo:" "echo arguments" "" echo(1)
.xx "" "" "echo: echo arguments." "" csh(1)
.xx "" "" "echo: echo arguments" "" echo(1)
.xx "" "ping: send ICMP" "ECHO_REQUEST packets to network hosts" "" ping(8)
.xx "" "" "ecvt, fcvt, gcvt: output conversion" "" ecvt(3)
.xx "" "" "ed: text editor" "" ed(1)
.xx "" "end, etext," "edata: last locations in program" "" end(3)
.xx "" "ex," "edit: text editor" "" ex(1)
.xx "" "vipw:" "edit the password file" "" vipw(8)
.xx "" "edquota:" "edit user quotas" "" edquota(8)
.xx "" "ed: text" "editor" "" ed(1)
.xx "" "ex, edit: text" "editor" "" ex(1)
.xx "" "fed: font" "editor" "" fed(1)
.xx "" "ld: link" "editor" "" ld(1)
.xx "" "sed: stream" "editor" "" sed(1)
.xx "" "vi, view: screen oriented (visual) display" "editor based on ex" "" vi(1)
.xx "" "a.out: assembler and link" "editor output" "" a.out(5)
.xx "" "" "edquota: edit user quotas" "" edquota(8)
.xx "" "whoami: print" "effective current user id" "" whoami(1)
.xx "" "setregid: set real and" "effective group ID" "" setregid(2)
.xx "" "setreuid: set real and" "effective user ID's" "" setreuid(2)
.xx "" "vfork: spawn new process in a virtual memory" "efficient way" "" vfork(2)
.xx "" "grep," "egrep, fgrep: search a file for a pattern" "" grep(1)
.xx "" "insque, remque: insert/remove" "element from a queue" "" insque(3)
.xx "" "soelim:" "eliminate .so's from nroff input" "" soelim(1)
.xx "" "" "else: alternative commands." "" csh(1)
.xx "" "sdformat: standalone" "embedded SCSI disk formatter" "" sdformat(8S)
.xx "" "uuencode: format of an" "encoded uuencode file" "" uuencode(5)
.xx "" "crypt:" "encode/decode" "" crypt(1)
.xx "mail" "uuencode, uudecode:" "encode/decode a binary file for transmission via" "" uuencode(1C)
.xx "" "btoa, atob, tarmail, untarmail:" "encode/decode binary to printable ASCII" "" btoa(1)
.xx "" "crypt, setkey," "encrypt: DES encryption" "" crypt(3)
.xx "" "crypt, setkey, encrypt: DES" "encryption" "" crypt(3)
.xx "" "makekey: generate" "encryption key" "" makekey(8)
.xx "" "" "end, etext, edata: last locations in program" "" end(3)
.xx "" "sccs: front" "end for the SCCS subsystem" "" sccs(1)
.xx "" "logout:" "end session." "" csh(1)
.xx "" "" "end: terminate loop." "" csh(1)
.xx "" "getfsent, getfsspec, getfsfile, getfstype, setfsent," "endfsent: get file system descriptor file entry" "" getfsent(3X)
.xx "" "getgrent, getgrgid, getgrnam, setgrent," "endgrent: get group file entry" "" getgrent(3)
.xx "" "gethostbyaddr, gethostbyname, sethostent," "endhostent: get network host entry" "gethostent," gethostent(3N)
.xx "" "" "endif: terminate conditional." "" csh(1)
.xx "get file system descriptor file entry" "addmntent," "endmntent, getmntent, hasmntopt, setmntent:" "" getmntent(3)
.xx "" "getnetent, getnetbyaddr, getnetbyname, setnetent," "endnetent: get network entry" "" getnetent(3N)
.xx "network group entry" "" "endnetgrent, getnetgrent, innetgr, setnetgrent: get" "" getnetgrent(3N)
.xx "" "socket: create an" "endpoint for communication" "" socket(2)
.xx "" "getprotobynumber, getprotobyname, setprotoent," "endprotoent: get protocol entry" "getprotoent," getprotoent(3N)
.xx "" "getpwent, getpwuid, getpwnam, setpwent," "endpwent: get password file entry" "" getpwent(3)
.xx "setrpcent: get rpc entry" "endrpcent, getrpcbyname," "" "getrpcbynumber, getrpcent," "" getrpcent(3N)
.xx "" "getservbyport, getservbyname, setservent," "endservent: get service entry" "getservent," getservent(3N)
.xx "" "" "endsw: terminate switch." "" csh(1)
.xx "" "number: convert Arabic numerals to" "English" "" number(6)
.xx "" "mailbug: submit a bug report or" "enhancement request" "" mailbug(1)
.xx "" "xsend, xget," "enroll: secret mail" "" xsend(1)
.xx "" "nlist: get" "entries from name list" "" nlist(3)
.xx "" "getdirentries: gets directory" "entries in a filesystem independent format" "" getdirentries(2)
.xx "" "chfn: change finger" "entry" "" chfn(1)
.xx "" "setfsent, endfsent: get file system descriptor file" "entry" "getfsent, getfsspec, getfsfile, getfstype," getfsent(3X)
.xx "" "getgrnam, setgrent, endgrent: get group file" "entry" "getgrent, getgrgid," getgrent(3)
.xx "" "sethostent, endhostent: get network host" "entry" "gethostent, gethostbyaddr, gethostbyname," gethostent(3N)
.xx "" "setmntent: get file system descriptor file" "entry" "addmntent, endmntent, getmntent, hasmntopt," getmntent(3)
.xx "" "getnetbyname, setnetent, endnetent: get network" "entry" "getnetent, getnetbyaddr," getnetent(3N)
.xx "" "getnetgrent, innetgr, setnetgrent: get network group" "entry" "endnetgrent," getnetgrent(3N)
.xx "" "setprotoent, endprotoent: get protocol" "entry" "/getprotobynumber, getprotobyname," getprotoent(3N)
.xx "" "getpwnam, setpwent, endpwent: get password file" "entry" "getpwent, getpwuid," getpwent(3)
.xx "" "getrpcbynumber, getrpcent, setrpcent: get rpc" "entry" "endrpcent, getrpcbyname," getrpcent(3N)
.xx "" "getservbyname, setservent, endservent: get service" "entry" "getservent, getservbyport," getservent(3N)
.xx "" "unlink: remove directory" "entry" "" unlink(2)
.xx "" "execv, execle, execlp, execvp, exec, exece, exect," "environ: execute a file" "execl," execl(3)
.xx "" "" "environ: user environment" "" environ(7)
.xx "" "setenv: set variable in" "environment." "" csh(1)
.xx "" "environ: user" "environment" "" environ(7)
.xx "" "printenv: print out the" "environment" "" printenv(1)
.xx "" "getenv: value for" "environment name" "" getenv(3)
.xx "" "unsetenv: remove" "environment variables." "" csh(1)
.xx "" "eqnchar: special character definitions for" "eqn" "" eqnchar(7)
.xx "" "deroff: remove nroff, troff, tbl and" "eqn constructs" "" deroff(1)
.xx "" "" "eqn, neqn, checkeq: typeset mathematics" "" eqn(1)
.xx "" "" "eqnchar: special character definitions for eqn" "" eqnchar(7)
.xx "linemod, space, closepl: graphics/" "plot: openpl," "erase, label, line, circle, arc, move, cont, point," "" plot(3X)
.xx "" "error: analyze and disperse" "compiler error messages"  "" error(1)
.xx "" "dmesg: collect system diagnostic messages to form" "error log" "" dmesg(8)
.xx "" "mkstr: create an" "error message file by massaging C source" "" mkstr(1)
.xx "" "error: analyze and disperse compiler" "error messages" "" error(1)
.xx "" "perror, sys_errlist, sys_nerr: system" "error messages" "" perror(3)
.xx "" "intro: introduction to system calls and" "error numbers" "" intro(2)
.xx "" "eyacc: modified yacc allowing much improved" "error recovery" "" eyacc(1)
.xx "" "spell, spellin, spellout: find spelling" "errors" "" spell(1)
.xx "" "/" "etc/mtab: mounted file system table" "" mtab(5)
.xx "" "end," "etext, edata: last locations in program" "" end(3)
.xx "ether_ntohost: ethernet address mapping operations" "" "ether_aton, ether_hostton, ether_line, ether_ntoa," "" ethers(3N)
.xx "ether_ntohost: ethernet address mapping/" "ether_aton," "ether_hostton, ether_line, ether_ntoa," "" ethers(3N)
.xx "address mapping/" "ether_aton, ether_hostton," "ether_line, ether_ntoa, ether_ntohost: ethernet" "" ethers(3N)
.xx "" "ether_line, ether_ntoa, ether_ntohost:" "ethernet address mapping operations" "/ether_hostton," ethers(3N)
.xx "" "se: Balance 8000 10 Mb/s" "Ethernet interface" "" se(4)
.xx "" "sestat: print" "Ethernet statistics" "" sestat(8)
.xx "operations" "ether_aton, ether_hostton, ether_line," "ether_ntoa, ether_ntohost: address mapping" "" ethers(3N)
.xx "" "ether_aton, ether_hostton, ether_line, ether_ntoa," "ether_ntohost: ethernet address mapping operations" "" ethers(3N)
.xx "" "hypot, cabs:" "Euclidean distance" "" hypot(3M)
.xx "" "sh, for, case, if, while, :, ., break, continue, cd," "eval, exec, exit, export, login, read, readonly,/" "" sh(1)
.xx "" "" "eval: re-evaluate shell data." "" csh(1)
.xx "" "expr:" "evaluate arguments as an expression" "" expr(1)
.xx "" "eval: re-" "evaluate shell data." "" csh(1)
.xx "" "history: print history" "event list." "" csh(1)
.xx "" "screen oriented (visual) display editor based on" "ex" "vi, view:" vi(1)
.xx "" "" "ex, edit: text editor" "" ex(1)
.xx "" "lpq: spool queue" "examination program" "" lpq(1)
.xx "vm_ctl:" "examine and change virtual memory "tuning parameters" "" vm_ctl(2)
.xx "" "uuq:" "examine or manipulate the uucp queue" "" uuq(1C)
.xx "" "execl, execv, execle, execlp, execvp," "exec, exece, exect, environ: execute a file" "" execl(3)
.xx "" "/case, if, while, :, ., break, continue, cd, eval," "exec, exit, export, login, read, readonly, set,/" "" sh(1)
.xx "" "" "exec: overlay shell with specified command." "" csh(1)
.xx "" "execl, execv, execle, execlp, execvp, exec," "exece, exect, environ: execute a file" "" execl(3)
.xx "exect, environ: execute a file" "" "execl, execv, execle, execlp, execvp, exec, exece," "" execl(3)
.xx "execute a file" "execl, execv," "execle, execlp, execvp, exec, exece, exect, environ:" "" execl(3)
.xx "execute a file" "execl, execv, execle," "execlp, execvp, exec, exece, exect, environ:" "" execl(3)
.xx "" "execl, execv, execle, execlp, execvp, exec, exece," "exect, environ: execute a file" "" execl(3)
.xx "" "sticky:" "executable files with persistent text" "" sticky(8)
.xx "" "execle, execlp, execvp, exec, exece, exect, environ:" "execute a file" "execl, execv," execl(3)
.xx "" "execve:" "execute a file" "" execve(2)
.xx "" "m_fork:" "execute a subprogram in parallel" "" m_fork(3P)
.xx "" "xargs: construct argument list(s) and" "execute command" "" xargs(1)
.xx "" "repeat:" "execute command repeatedly." "" csh(1)
.xx "" "at:" "execute commands at a later time" "" at(1)
.xx "" "lastcomm: show last commands" "executed in reverse order" "" lastcomm(1)
.xx "" "m_rele_procs: suspend and resume child process" "execution" "m_park_procs," m_park_procs(3P)
.xx "" "uux: unix to unix command" "execution" "" uux(1C)
.xx "" "acct:" "execution accounting file" "" acct(5)
.xx "" "uuxqt: UUCP" "execution file interpreter" "" uuxqt(8C)
.xx "" "sleep: suspend" "execution for an interval" "" sleep(1)
.xx "" "sleep: suspend" "execution for interval" "" sleep(3)
.xx "" "monitor, monstartup, moncontrol: prepare" "execution profile" "" monitor(3)
.xx "" "pxp: Pascal" "execution profiler" "" pxp(1)
.xx "" "rexecd: remote" "execution server" "" rexecd(8C)
.xx "" "profil:" "execution time profile" "" profil(2)
.xx "environ: execute a file" "execl," "execv, execle, execlp, execvp, exec, exece, exect," "" execl(3)
.xx "" "" "execve: execute a file" "" execve(2)
.xx "" "execl, execv, execle, execlp," "execvp, exec, exece, exect, environ: execute a file" "" execl(3)
.xx "" "tunefs: tune up an" "existing file system" "" tunefs(8)
.xx "" "/if, while, :, ., break, continue, cd, eval, exec," "exit, export, login, read, readonly, set, shift, [,/" "" sh(1)
.xx "" "breaksw:" "exit from switch." "" csh(1)
.xx "" "" "exit: leave shell." "" csh(1)
.xx "" "" "_exit: terminate a process" "" exit(2)
.xx "output" "" "exit: terminate a process after flushing any pending" "" exit(3)
.xx "" "break:" "exit while/foreach loop." "" csh(1)
.xx "power, square root" "" "exp, log, log10, pow, sqrt: exponential, logarithm," "" exp(3M)
.xx "" "glob: filename" "expand argument list." "" csh(1)
.xx "" "compress, uncompress, zcat: compress and" "expand data" "" compress(1)
.xx "" "expand, unexpand:" "expand tabs to spaces, and vice versa" "" expand(1)
.xx "versa" "" "expand, unexpand: expand tabs to spaces, and vice" "" expand(1)
.xx "for diction" "" "explain, diction: print wordy sentences; thesaurus" "" explain(1)
.xx "diction" "diction," "explain: print wordy sentences; thesaurus for" "" diction(1)
.xx "" "rogue:" "Exploring The Dungeons of Doom" "" rogue(6)
.xx "" "frexp, ldexp, modf: split into mantissa and" "exponent" "" frexp(3)
.xx "" "exp, log, log10, pow, sqrt:" "exponential, logarithm, power, square root" "" exp(3M)
.xx "" "/while, :, ., break, continue, cd, eval, exec, exit," "export, login, read, readonly, set, shift, [, times,/" "" sh(1)
.xx "" "" "expr: evaluate arguments as an expression" "" expr(1)
.xx "" "expr: evaluate arguments as an" "expression" "" expr(1)
.xx "" "re_comp, re_exec: regular" "expression handler" "" regex(3)
.xx "" "addbib: create or" "extend bibliographic database" "" addbib(1)
.xx "" "a.vi: vi with" "extensions for Ada source files" "" a.vi(1)
.xx "" "xdr: library routines for" "external data representation" "" xdr(3N)
.xx "to implement shared strings" "xstr:" "extract strings from C programs" "" xstr(1)
.xx "recovery" "" "eyacc: modified yacc allowing much improved error" "" eyacc(1)
.xx "functions" "" "fabs, floor, ceil: absolute value, floor, ceiling" "" floor(3M)
.xx "" "networking: introduction to networking" "facilities" "" intro(4N)
.xx "" "signal: simplified software signal" "facilities" "" signal(3C)
.xx "" "sigvec: software signal" "facilities" "" sigvec(2)
.xx "" "factor, primes:" "factor a number, generate large primes" "" factor(6)
.xx "primes" "" "factor, primes: factor a number, generate large" "" factor(6)
.xx "" "true," "false: provide truth values" "" true(1)
.xx "" "" "false, true: provide truth values" "" false(1)
.xx "" "appletalk: AppleTalk protocol" "family" "" appletalk(4F)
.xx "" "inet: Internet protocol" "family" "" inet(4F)
.xx "checking the disks" "" "fastboot, fasthalt: reboot/halt the system without" "" fastboot(8)
.xx "the disks" "fastboot," "fasthalt: reboot/halt the system without checking" "" fastboot(8)
.xx "" "abort: generate a" "fault" "" abort(3)
.xx "" "chmod," "fchmod: change mode of file" "" chmod(2)
.xx "" "chown," "fchown: change owner and group of a file" "" chown(2)
.xx "" "" "fclose, fflush: close or flush a stream" "" fclose(3S)
.xx "" "" "fcntl: file control" "" fcntl(2)
.xx "" "ecvt," "fcvt, gcvt: output conversion" "" ecvt(3)
.xx "" "fopen, freopen," "fdopen: open a stream" "" fopen(3S)
.xx "" "" "fed: font editor" "" fed(1)
.xx "" "ferror," "feof, clearerr, fileno: stream status inquiries" "" ferror(3S)
.xx "inquiries" "" "ferror, feof, clearerr, fileno: stream status" "" ferror(3S)
.xx "subroutines" "dbminit," "fetch, store, delete, firstkey, nextkey: data base" "" dbm(3X)
.xx "" "head: give first" "few lines" "" head(1)
.xx "" "fclose," "fflush: close or flush a stream" "" fclose(3S)
.xx "" "bcopy, bcmp, bzero," "ffs: bit and byte string operations" "" bstring(3)
.xx "" "" "fg: bring job into foreground." "" csh(1)
.xx "" "getc, getchar," "fgetc, getw: get character or word from stream" "" getc(3S)
.xx "" "gets," "fgets: get a string from a stream" "" gets(3S)
.xx "" "grep, egrep," "fgrep: search a file for a pattern" "" grep(1)
.xx "" "join: join files on" "fields" "" join(1)
.xx "" "access: determine accessibility of" "file" "" access(2)
.xx "" "acct: execution accounting" "file" "" acct(5)
.xx "" "chmod, fchmod: change mode of" "file" "" chmod(2)
.xx "" "chown, fchown: change owner and group of a" "file" "" chown(2)
.xx "" "colrm: remove columns from a" "file" "" colrm(1)
.xx "" "core: format of memory image" "file" "" core(5)
.xx "" "creat: create a new" "file" "" creat(2)
.xx "" "source: read commands from" "file." "" csh(1)
.xx "" "csymlink: make conditional symbolic link to a" "file" "" csymlink(2)
.xx "" "ctags: create a tags" "file" "" ctags(1)
.xx "" "dd: convert and copy a" "file" "" dd(1)
.xx "" "disktab: disk description" "file" "" disktab(5)
.xx "" "execvp, exec, exece, exect, environ: execute a" "file" "execl, execv, execle, execlp," execl(3)
.xx "" "execve: execute a" "file" "" execve(2)
.xx "" "flock: apply or remove an advisory lock on an open" "file" "" flock(2)
.xx "" "fpr: print Fortran" "file" "" fpr(1)
.xx "" "group: group" "file" "" group(5)
.xx "" "L.aliases: UUCP hostname alias" "file" "" l.aliases(5)
.xx "" "L.cmds: UUCP remote command permissions" "file" "" l.cmds(5)
.xx "" "L-devices: UUCP device description" "file" "" l-devices(5)
.xx "" "L-dialcodes: UUCP phone number index" "file" "" l-dialcodes(5)
.xx "" "link: make a hard link to a" "file" "" link(2)
.xx "" "L.sys: UUCP remote host description" "file" "" l.sys(5)
.xx "" "mkdir: make a directory" "file" "" mkdir(2)
.xx "" "mknod: make a special" "file" "" mknod(2)
.xx "" "mknod: build special" "file" "" mknod(8)
.xx "" "rebuild the data base for the mail aliases" "file" "newaliases:" newaliases(1)
.xx "" "open a file for reading or writing, or create a new" "file" "open:" open(2)
.xx "" "passwd: password" "file" "" passwd(5)
.xx "" "pr: print" "file" "" pr(1)
.xx "" "rcsfile: format of RCS" "file" "" rcsfile(5)
.xx "" "remote: remote host description" "file" "" remote(5)
.xx "" "rename: change the name of a" "file" "" rename(2)
.xx "" "rev: reverse lines of a" "file" "" rev(1)
.xx "" "rmdir: remove a directory" "file" "" rmdir(2)
.xx "" "size: size of an object" "file" "" size(1)
.xx "" "the printable strings in an object (or other binary)" "file" "strings: find" strings(1)
.xx "" "sum: sum and count blocks in a" "file" "" sum(1)
.xx "" "symlink: make symbolic link to a" "file" "" symlink(2)
.xx "" "tail: deliver the last part of a" "file" "" tail(1)
.xx "" "touch: update date last modified of a" "file" "" touch(1)
.xx "" "uniq: report repeated lines in a" "file" "" uniq(1)
.xx "" "USERFILE: UUCP pathname permissions" "file" "" userfile(5)
.xx "" "uuencode: format of an encoded uuencode" "file" "" uuencode(5)
.xx "" "vipw: edit the password" "file" "" vipw(8)
.xx "" "versions of object modules were used to construct a" "file" "what: show what" what(1)
.xx "" "write, writev: write on a" "file" "" write(2)
.xx "" "diff: differential" "file and directory comparator" "" diff(1)
.xx "" "rcs: change RCS" "file attributes" "" rcs(1)
.xx "" "mkstr: create an error message" "file by massaging C source" "" mkstr(1)
.xx "" "diff3: 3-way differential" "file comparison" "" diff3(1)
.xx "" "fcntl:" "file control" "" fcntl(2)
.xx "" "rcp: remote" "file copy" "" rcp(1C)
.xx "" "umask: change or display" "file creation mask." "" csh(1)
.xx "" "umask: set" "file creation mode mask" "" umask(2)
.xx "" "" "file: determine file type" "" file(1)
.xx "" "cat: standalone" "file display utility" "" cat(8S)
.xx "" "setfsent, endfsent: get file system descriptor" "file entry" "/getfsspec, getfsfile, getfstype," getfsent(3X)
.xx "" "getgrgid, getgrnam, setgrent, endgrent: get group" "file entry" "getgrent," getgrent(3)
.xx "" "hasmntopt, setmntent: get file system descriptor" "file entry" "addmntent, endmntent, getmntent," getmntent(3)
.xx "" "getpwuid, getpwnam, setpwent, endpwent: get password" "file entry" "getpwent," getpwent(3)
.xx "" "grep, egrep, fgrep: search a" "file for a pattern" "" grep(1)
.xx "" "a.tags: create a tags" "file for Ada sources" "" a.tags(1)
.xx "" "open: open a" "file for reading or writing, or create a new file" "" open(2)
.xx "" "aliases: aliases" "file for sendmail" "" aliases(5)
.xx "" "uuencode, uudecode: encode/decode a binary" "file for transmission via mail" "" uuencode(1C)
.xx "" "ar: archive (library)" "file format" "" ar(5)
.xx "" "tar: tape archive" "file format" "" tar(5)
.xx "" "id:" "file identification program" "" id(1)
.xx "" "which: locate a program" "file including aliases and paths (csh only)" "" which(1)
.xx "" "uuxqt: UUCP execution" "file interpreter" "" uuxqt(8C)
.xx "" "fsplit: split a multi-routine Fortran" "file into individual files" "" fsplit(1)
.xx "" "split: split a" "file into pieces" "" split(1)
.xx "" "mmap: map an open" "file into the process's address space" "" mmap(2)
.xx "" "merge: three-way" "file merge" "" merge(1)
.xx "" "pmerge: pascal" "file merger" "" pmerge(1)
.xx "" "mktemp: make a unique" "file name" "" mktemp(3)
.xx "" "more, page:" "file perusal filter for crt viewing" "" more(1)
.xx "text" "zmore:" "file perusal filter for crt viewing of compressed" "" zmore(1)
.xx "" "stat, lstat, fstat: get" "file status" "" stat(2)
.xx "" "mkfs: construct a" "file system" "" mkfs(8)
.xx "" "mkproto: construct a prototype" "file system" "" mkproto(8)
.xx "" "mount: mount" "file system" "" mount(2)
.xx "" "newfs: construct a new" "file system" "" newfs(8)
.xx "" "tunefs: tune up an existing" "file system" "" tunefs(8)
.xx "" "unmount: unmount a" "file system" "" unmount(2)
.xx "" "fsck:" "file system consistency check and interactive repair" "" fsck(8)
.xx "" "fsck: standalone" "file system consistency check and interactive repair" "" fsck(8S)
.xx "" "getfsfile, getfstype, setfsent, endfsent: get" "file system descriptor file entry" "/getfsspec," getfsent(3X)
.xx "" "endmntent, getmntent, hasmntopt, setmntent: get" "file system descriptor file entry" "addmntent," getmntent(3)
.xx "" "dcheck:" "file system directory consistency check" "" dcheck(8)
.xx "" "dump: incremental" "file system dump" "" dump(8)
.xx "" "rdump:" "file system dump across the network" "" rdump(8C)
.xx "" "rrestore: restore a" "file system dump across the network" "" rrestore(8C)
.xx "" "hier:" "file system hierarchy" "" hier(7)
.xx "" "dumpfs: dump" "file system information" "" dumpfs(8)
.xx "" "quot: summarize" "file system ownership" "" quot(8)
.xx "" "restore: incremental" "file system restore" "" restore(8)
.xx "" "statfs: get" "file system statistics" "" statfs(2)
.xx "" "icheck:" "file system storage consistency check" "" icheck(8)
.xx "" "/etc/mtab: mounted" "file system table" "" mtab(5)
.xx "" "rmtab: remotely mounted" "file system table" "" rmtab(5)
.xx "" "fs, inode: format of" "file system volume" "" fs(5)
.xx "" "df: report free disk space on" "file systems" "" df(1)
.xx "" "utime: set" "file times" "" utime(3C)
.xx "" "utimes: set" "file times" "" utimes(2)
.xx "" "uusend: send a" "file to a remote host" "" uusend(1C)
.xx "" "truncate, ftruncate: truncate a" "file to a specified length" "" truncate(2)
.xx "" "ftp: ARPANET" "file transfer program" "" ftp(1C)
.xx "" "tftp: trivial" "file transfer program" "" tftp(1C)
.xx "" "ftpd: DARPA Internet" "File Transfer Protocol server" "" ftpd(8C)
.xx "" "tftpd: DARPA Trivial" "File Transfer Protocol server" "" tftpd(8C)
.xx "" "file: determine" "file type" "" file(1)
.xx "" "basename: strip" "filename affixes" "" basename(1)
.xx "" "glob:" "filename expand argument list." "" csh(1)
.xx "" "ferror, feof, clearerr," "fileno: stream status inquiries" "" ferror(3S)
.xx "" "a.vi: vi with extensions for Ada source" "files" "" a.vi(1)
.xx "" "checknr: check nroff/troff" "files" "" checknr(1)
.xx "" "cmp: compare two" "files" "" cmp(1)
.xx "" "comm: select or reject lines common to two sorted" "files" "" comm(1)
.xx "" "compress and uncompress directories of" "files" "compressdir, uncompressdir:" compressdir(1)
.xx "" "config: build system configuration" "files" "" config(8)
.xx "" "disas: disassemble binary" "files" "" disas(1)
.xx "" "find: find" "files" "" find(1)
.xx "" "split a multi-routine Fortran file into individual" "files" "fsplit:" fsplit(1)
.xx "" "ident: identify" "files" "" ident(1)
.xx "" "lockf: record locking on" "files" "" lockf(3C)
.xx "" "makedev: make system special" "files" "" makedev(8)
.xx "" "mv: move or rename" "files" "" mv(1)
.xx "" "print log messages and other information about RCS" "files" "rlog:" rlog(1)
.xx "" "rmdir, rm: remove (unlink) directories or" "files" "" rmdir(1)
.xx "" "sort: sort or merge" "files" "" sort(1)
.xx "" "uulog: display UUCP log" "files" "" uulog(1C)
.xx "" "zcmp, zdiff: compare compressed" "files" "" zcmp(1)
.xx "" "compact, uncompact, ccat: compress and uncompress" "files, and cat them" "" compact(1)
.xx "" "intro: introduction to special" "files and hardware support" "" intro(4)
.xx "" "catman: create the cat" "files for the manual" "" catman(8)
.xx "" "fsync: synchronize a" "file's in-core state with that on disk" "" fsync(2)
.xx "" "join: join" "files on fields" "" join(1)
.xx "" "rm, rmdir: remove (unlink)" "files or directories" "" rm(1)
.xx "" "uucico, uucpd: transfer" "files queued by uucp or uux" "" uucico(8C)
.xx "" "badsect: create" "files to contain bad sectors" "" badsect(8)
.xx "" "sticky: executable" "files with persistent text" "" sticky(8)
.xx "" "host: remote virtual terminal/" "fileserver for standalone program development" "" host(1)
.xx "" "repquota: summarize quotas for a" "filesystem" "" repquota(8)
.xx "" "getdirentries: gets directory entries in a" "filesystem independent format" "" getdirentries(2)
.xx "" "quotacheck:" "filesystem quota consistency checker" "" quotacheck(8)
.xx "" "quotaon, quotaoff: turn" "filesystem quotas on and off" "" quotaon(8)
.xx "" "fstab: static information about" "filesystems" "" fstab(5)
.xx "" "mntent: static information about" "filesystems" "" mntent(5)
.xx "" "mount: keep track of remotely mounted" "filesystems" "" mount(3R)
.xx "" "mount, umount: mount and dismount" "filesystems" "" mount(8)
.xx "" "more, page: file perusal" "filter for crt viewing" "" more(1)
.xx "" "zmore: file perusal" "filter for crt viewing of compressed text" "" zmore(1)
.xx "" "colcrt:" "filter nroff output for CRT previewing" "" colcrt(1)
.xx "" "col:" "filter reverse line feeds" "" col(1)
.xx "" "plot: graphics" "filters" "" plot(1G)
.xx "" "refer:" "find and insert literature references in documents" "" refer(1)
.xx "" "find:" "find files" "" find(1)
.xx "" "" "find: find files" "" find(1)
.xx "" "look:" "find lines in a sorted list" "" look(1)
.xx "manual" "man:" "find manual information by keywords; print out the" "" man(1)
.xx "" "ttyname, isatty, ttyslot:" "find name of a terminal" "" ttyname(3)
.xx "" "lorder:" "find ordering relation for an object library" "" lorder(1)
.xx "" "lookbib: build inverted index for a bibliography," "find references in a bibliography" "indxbib," lookbib(1)
.xx "" "spell, spellin, spellout:" "find spelling errors" "" spell(1)
.xx "binary) file" "strings:" "find the printable strings in an object (or other" "" strings(1)
.xx "" "chfn: change" "finger entry" "" chfn(1)
.xx "" "" "finger: user information lookup program" "" finger(1)
.xx "" "fold: fold long lines for" "finite width output device" "" fold(1)
.xx "" "head: give" "first few lines" "" head(1)
.xx "" "dbminit, fetch, store, delete," "firstkey, nextkey: data base subroutines" "" dbm(3X)
.xx "" "fish: play ``Go" "Fish''" "" fish(6)
.xx "" "" "fish: play ``Go Fish''" "" fish(6)
.xx "" "bootflags: display/change system boot" "flags" "" bootflags(8)
.xx "file" "" "flock: apply or remove an advisory lock on an open" "" flock(2)
.xx "functions" "fabs," "floor, ceil: absolute value, floor, ceiling" "" floor(3M)
.xx "" "fabs, floor, ceil: absolute value," "floor, ceiling functions" "" floor(3M)
.xx "" "fclose, fflush: close or" "flush a stream" "" fclose(3S)
.xx "" "exit: terminate a process after" "flushing any pending output" "" exit(3)
.xx "" "" "fmt: simple text formatter" "" fmt(1)
.xx "" "" "fold: fold long lines for finite width output device" "" fold(1)
.xx "" "fold:" "fold long lines for finite width output device" "" fold(1)
.xx "" "vwidth: make troff width table for a" "font" "" vwidth(1)
.xx "" "fed:" "font editor" "" fed(1)
.xx "" "vfont:" "font formats for the Benson-Varian or Versatec" "" vfont(5)
.xx "" "inspect and print out information about UNIX" "fonts" "vfontinfo:" vfontinfo(1)
.xx "" "" "fopen, freopen, fdopen: open a stream" "" fopen(3S)
.xx "" "break: exit while/" "foreach loop." "" csh(1)
.xx "" "" "foreach: loop over list of names." "" csh(1)
.xx "" "fg: bring job into" "foreground." "" csh(1)
.xx "" "" "fork: create a new process" "" fork(2)
.xx "" "dmesg: collect system diagnostic messages to" "form error log" "" dmesg(8)
.xx "" "ar: archive (library) file" "format" "" ar(5)
.xx "" "arcv: convert archives to new" "format" "" arcv(8)
.xx "" "berkst: read in symbol and string tables in berkeley" "format" "" berkst(3)
.xx "" "dump, dumpdates: incremental dump" "format" "" dump(5)
.xx "" "gets directory entries in a filesystem independent" "format" "getdirentries:" getdirentries(2)
.xx "" "tar: tape archive file" "format" "" tar(5)
.xx "" "indent: indent and" "format C program source" "" indent(1)
.xx "" "htable: convert NIC standard" "format host tables" "" htable(8)
.xx "" "gettable: get NIC" "format host tables from a host" "" gettable(8C)
.xx "" "uuencode:" "format of an encoded uuencode file" "" uuencode(5)
.xx "" "dir:" "format of directories" "" dir(5)
.xx "" "fs, inode:" "format of file system volume" "" fs(5)
.xx "" "core:" "format of memory image file" "" core(5)
.xx "" "rcsfile:" "format of RCS file" "" rcsfile(5)
.xx "" "tbl:" "format tables for nroff or troff" "" tbl(1)
.xx "" "tp: DEC/mag tape" "formats" "" tp(5)
.xx "" "vfont: font" "formats for the Benson-Varian or Versatec" "" vfont(5)
.xx "" "" "formatscsi: standalone SCSI disk formatter" "" formatscsi(8S)
.xx "" "scanf, fscanf, sscanf:" "formatted input conversion" "" scanf(3S)
.xx "" "printf, fprintf, sprintf:" "formatted output conversion" "" printf(3S)
.xx "" "fmt: simple text" "formatter" "" fmt(1)
.xx "" "formatscsi: standalone SCSI disk" "formatter" "" formatscsi(8S)
.xx "" "sdformat: standalone embedded SCSI disk" "formatter" "" sdformat(8S)
.xx "" "xpformat: standalone 400-Mbyte disk" "formatter" "" xpformat(8S)
.xx "" "zdformat: standalone disk" "formatter for dual-channel disk controller" "" zdformat(8S)
.xx "" "nroff: text" "formatting" "" nroff(1)
.xx "" "troff, nroff: text" "formatting and typesetting" "" troff(1)
.xx "" "ms: text" "formatting macros" "" ms(7)
.xx "" "me: macros for" "formatting papers" "" me(7)
.xx "" "fpr: print" "Fortran file" "" fpr(1)
.xx "" "fsplit: split a multi-routine" "Fortran file into individual files" "" fsplit(1)
.xx "" "struct: structure" "Fortran programs" "" struct(1)
.xx "adage" "" "fortune: print a random, hopefully interesting," "" fortune(6)
.xx "" "mklost+found: make a lost+" "found directory for fsck" "" mklost+found(8)
.xx "" "mklost+" "found: make a lost+found directory for fsck" "" mklost+found(8)
.xx "" "" "fpr: print Fortran file" "" fpr(1)
.xx "" "printf," "fprintf, sprintf: formatted output conversion" "" printf(3S)
.xx "" "putc, putchar," "fputc, putw: put character or word on a stream" "" putc(3S)
.xx "" "puts," "fputs: put a string on a stream" "" puts(3S)
.xx "" "" "fread, fwrite: buffered binary input/output" "" fread(3S)
.xx "" "df: report" "free disk space on file systems" "" df(1)
.xx "" "malloc," "free, realloc, calloc, alloca: memory allocator" "" malloc(3)
.xx "" "fopen," "freopen, fdopen: open a stream" "" fopen(3S)
.xx "" "frexp, ldexp" "modf: split into mantissa and exponent" "" frexp(3)
.xx "" "from: who is my mail" "from?" "" from(1)
.xx "" "sccs:" "front end for the SCCS subsystem" "" sccs(1)
.xx "" "" "fs, inode: format of file system volume" "" fs(5)
.xx "" "scanf," "fscanf, sscanf: formatted input conversion" "" scanf(3S)
.xx "" "mklost+found: make a lost+found directory for" "fsck" "" mklost+found(8)
.xx "repair" "" "fsck: file system consistency check and interactive" "" fsck(8)
.xx "interactive repair" "" "fsck: standalone file system consistency check and" "" fsck(8S)
.xx "" "" "fseek, ftell, rewind: reposition a stream" "" fseek(3S)
.xx "" "" "fsirand: install random inode generation numbers" "" fsirand(8)
.xx "individual files" "" "fsplit: split a multi-routine Fortran file into" "" fsplit(1)
.xx "" "" "fstab: static information about filesystems" "" fstab(5)
.xx "" "stat, lstat," "fstat: get file status" "" stat(2)
.xx "on disk" "" "fsync: synchronize a file's in-core state with that" "" fsync(2)
.xx "" "fseek," "ftell, rewind: reposition a stream" "" fseek(3S)
.xx "" "time," "ftime: get date and time" "" time(3C)
.xx "" "" "ftp: ARPANET file transfer program" "" ftp(1C)
.xx "" "DARPA Internet File Transfer Protocol server" "ftpd:" "" ftpd(8C)
.xx "" "truncate," "ftruncate: truncate a file to a specified length" "" truncate(2)
.xx "" "shutdown: shut down part of a" "full-duplex connection" "" shutdown(2)
.xx "" "gamma: log gamma" "function" "" gamma(3M)
.xx "" "fabs, floor, ceil: absolute value, floor, ceiling" "functions" "" floor(3M)
.xx "" "intro: introduction to library" "functions" "" intro(3)
.xx "" "intro: introduction to compatibility library" "functions" "" intro(3C)
.xx "" "intro: introduction to mathematical library" "functions" "" intro(3M)
.xx "" "intro: introduction to network library" "functions" "" intro(3N)
.xx "" "intro: introduction to RPC service library" "functions" "" intro(3R)
.xx "" "intro: introduction to miscellaneous library" "functions" "" intro(3X)
.xx "" "j0, j1, jn, y0, y1, yn: bessel" "functions" "" j0(3M)
.xx "" "cos, tan, asin, acos, atan, atan2: trigonometric" "functions" "sin," sin(3M)
.xx "" "sinh, cosh, tanh: hyperbolic" "functions" "" sinh(3M)
.xx "" "curses: screen" "functions with ``optimal'' cursor motion" "" curses(3X)
.xx "" "fread," "fwrite: buffered binary input/output" "" fread(3S)
.xx "" "backgammon: the" "game" "" backgammon(6)
.xx "" "snake, snscore: display chase" "game" "" snake(6)
.xx "" "trek: trekkie" "game" "" trek(6)
.xx "" "worm: Play the growing worm" "game" "" worm(6)
.xx "" "canfield, cfscores: the solitaire card" "game canfield" "" canfield(6)
.xx "" "cribbage: the card" "game cribbage" "" cribbage(6)
.xx "" "hangman: Computer version of the" "game hangman" "" hangman(6)
.xx "" "boggle: play the" "game of boggle" "" boggle(6)
.xx "" "wump: the" "game of hunt-the-wumpus" "" wump(6)
.xx "" "gamma: log" "gamma function" "" gamma(3M)
.xx "" "" "gamma: log gamma function" "" gamma(3M)
.xx "" "" "gate: SLIC gate usage" "" gate(4)
.xx "" "gate: SLIC" "gate usage" "" gate(4)
.xx "" "" "gcore: get core images of running processes" "" gcore(1)
.xx "" "ecvt, fcvt," "gcvt: output conversion" "" ecvt(3)
.xx "" "abort:" "generate a fault" "" abort(3)
.xx "" "ls:" "generate a standalone directory listing" "" ls(8S)
.xx "" "makekey:" "generate encryption key" "" makekey(8)
.xx "" "factor, primes: factor a number," "generate large primes" "" factor(6)
.xx "" "ncheck:" "generate names from i-numbers" "" ncheck(8)
.xx "" "fsirand: install random inode" "generation numbers" "" fsirand(8)
.xx "" "rand, srand: random number" "generator" "" rand(3C)
.xx "" "lex:" "generator of lexical analysis programs" "" lex(1)
.xx "" "srandom, initstate, setstate: better random number" "generator; routines for changing generators" "random," random(3)
.xx "" "random number generator; routines for changing" "generators" "/srandom, initstate, setstate: better" random(3)
.xx "from stream" "" "getc, getchar, fgetc, getw: get character or word" "" getc(3S)
.xx "stream" "getc," "getchar, fgetc, getw: get character or word from" "" getc(3S)
.xx "filesystem independent format" "" "getdirentries: gets directory entries in a" "" getdirentries(2)
.xx "" "" "getdiskbyname: get disk description by its name" "" getdiskbyname(3X)
.xx "current domain" "" "getdomainname, setdomainname: get/set name of" "" getdomainname(2)
.xx "index" "" "getdtablemax: get maximum in-use descriptor table" "" getdtablemax(2)
.xx "" "" "getdtablesize: get descriptor table size" "" getdtablesize(2)
.xx "" "getgid," "getegid: get group identity" "" getgid(2)
.xx "" "" "getenv: value for environment name" "" getenv(3)
.xx "" "getuid," "geteuid: get user identity" "" getuid(2)
.xx "endfsent: get file system descriptor file entry" "" "getfsent, getfsspec, getfsfile, getfstype, setfsent," "" getfsent(3X)
.xx "system descriptor file entry" "getfsent, getfsspec," "getfsfile, getfstype, setfsent, endfsent: get file" "" getfsent(3X)
.xx "get file system descriptor file entry" "getfsent," "getfsspec, getfsfile, getfstype, setfsent, endfsent:" "" getfsent(3X)
.xx "descriptor file/" "getfsent, getfsspec, getfsfile," "getfstype, setfsent, endfsent: get file system" "" getfsent(3X)
.xx "" "" "getgid, getegid: get group identity" "" getgid(2)
.xx "get group file entry" "" "getgrent, getgrgid, getgrnam, setgrent, endgrent:" "" getgrent(3)
.xx "file entry" "getgrent," "getgrgid, getgrnam, setgrent, endgrent: get group" "" getgrent(3)
.xx "" "getgrent, getgrgid," "getgrnam, setgrent, endgrent: get group file entry" "" getgrent(3)
.xx "" "" "getgroups: get group access list" "" getgroups(2)
.xx "endhostent: get network host entry" "gethostent," "gethostbyaddr, gethostbyname, sethostent," "" gethostent(3N)
.xx "host entry" "gethostent, gethostbyaddr," "gethostbyname, sethostent, endhostent: get network" "" gethostent(3N)
.xx "sethostent, endhostent: get network host entry" "" "gethostent, gethostbyaddr, gethostbyname," "" gethostent(3N)
.xx "current host" "" "gethostid, sethostid: get/set unique identifier of" "" gethostid(2)
.xx "host" "" "gethostname, sethostname: get/set name of current" "" gethostname(2)
.xx "timer" "" "getitimer, setitimer: get/set value of interval" "" getitimer(2)
.xx "" "" "getlogin: get login name" "" getlogin(3)
.xx "descriptor file entry" "addmntent, endmntent," "getmntent, hasmntopt, setmntent: get file system" "" getmntent(3)
.xx "get network entry" "getnetent," "getnetbyaddr, getnetbyname, setnetent, endnetent:" "" getnetent(3N)
.xx "entry" "getnetent, getnetbyaddr," "getnetbyname, setnetent, endnetent: get network" "" getnetent(3N)
.xx "endnetent: get network entry" "" "getnetent, getnetbyaddr, getnetbyname, setnetent," "" getnetent(3N)
.xx "entry" "endnetgrent," "getnetgrent, innetgr, setnetgrent: get network group" "" getnetgrent(3N)
.xx "" "" "getopt: get option letter from argument vector" "" getopt(3X)
.xx "" "" "getpagesize: get system page size" "" getpagesize(2)
.xx "" "" "getpass: read a password" "" getpass(3)
.xx "" "" "getpeername: get name of connected peer" "" getpeername(2)
.xx "" "" "getpgrp: get process group" "" getpgrp(2)
.xx "" "" "getpid, getppid: get process identification" "" getpid(2)
.xx "" "getpid," "getppid: get process identification" "" getpid(2)
.xx "priority" "" "getpriority, setpriority: get/set program scheduling" "" getpriority(2)
.xx "protocol entry" "getprotoent, getprotobynumber," "getprotobyname, setprotoent, endprotoent: get" "" getprotoent(3N)
.xx "endprotoent: get protocol entry" "getprotoent," "getprotobynumber, getprotobyname, setprotoent," "" getprotoent(3N)
.xx "setprotoent, endprotoent: get protocol entry" "" "getprotoent, getprotobynumber, getprotobyname," "" getprotoent(3N)
.xx "terminals" "" "getpseudotty, ispseudotty: get or query pseudo" "" getpseudotty(3)
.xx "" "" "getpw: get name from uid" "" getpw(3C)
.xx "get password file entry" "getpwent, getpwuid, getpwnam" "setpwent, endpwent:" "" getpwent(3)
.xx "entry" "getpwent, getpwuid," "getpwnam, setpwent, endpwent: get password file" "" getpwent(3)
.xx "get password file entry" "getpwent," "getpwuid, getpwnam, setpwent, endpwent:" "" getpwent(3)
.xx "resource consumption" "" "getrlimit, setrlimit: control maximum system" "" getrlimit(2)
.xx "get rpc entry" "endrpcent, getrpcbyname" "getrpcbynumber, getrpcent, setrpcent:" "" getrpcent(3N)
.xx "" "endrpcent, getrpcbyname," "getrpcbynumber, getrpcent, setrpcent: get rpc entry" "" getrpcent(3N)
.xx "" "endrpcent, getrpcbyname, getrpcbynumber," "getrpcent, setrpcent: get rpc entry" "" getrpcent(3N)
.xx "" "" "getrpcport: get RPC port number" "" getrpcport(3R)
.xx "utilization" "" "getrusage: get information about resource" "" getrusage(2)
.xx "format" "getdirentries:" "gets directory entries in a filesystem independent" "" getdirentries(2)
.xx "" "" "gets, fgets: get a string from a stream" "" gets(3S)
.xx "entry" "getservent, getservbyport," "getservbyname, setservent, endservent: get service" "" getservent(3N)
.xx "endservent: get service entry" "getservent," "getservbyport, getservbyname, setservent," "" getservent(3N)
.xx "setservent, endservent: get service entry" "" "getservent, getservbyport, getservbyname," "" getservent(3N)
.xx "" "" "getsockname: get socket name" "" getsockname(2)
.xx "sockets" "" "getsockopt, setsockopt: get and set options on" "" getsockopt(2)
.xx "" "" "gettable: get NIC format host tables from a host" "" gettable(8C)
.xx "" "" "gettimeofday, settimeofday: get/set date and time" "" gettimeofday(2)
.xx "" "" "getty: set terminal mode" "" getty(8)
.xx "" "" "gettytab: terminal configuration data base" "" gettytab(5)
.xx "" "" "getuid, geteuid: get user identity" "" getuid(2)
.xx "" "" "getusclk, usclk_init: get/init microsecond clock" "" getusclk(3)
.xx "" "getc, getchar, fgetc," "getw: get character or word from stream" "" getc(3S)
.xx "" "" "getwd: get current working directory pathname" "" getwd(3)
.xx "" "head:" "give first few lines" "" head(1)
.xx "" "shutdown: close down the system at a" "given time" "" shutdown(8)
.xx "" "" "glob: filename expand argument list." "" csh(1)
.xx "" "m_next: increment" "global counter" "" m_next(3P)
.xx "convert date and time to ASCII" "ctime, localtime," "gmtime, asctime, timezone:" "" ctime(3)
.xx "" "fish: play ``" "Go Fish''" "" fish(6)
.xx "" "setjmp, longjmp, _setjmp, _longjmp: non-local" "goto" "" setjmp(3)
.xx "" "" "goto: command transfer." "" csh(1)
.xx "" "" "gprof: display call graph profile data" "" gprof(1)
.xx "" "graph: draw a" "graph" "" graph(1G)
.xx "" "" "graph: draw a graph" "" graph(1G)
.xx "" "gprof: display call" "graph profile data" "" gprof(1)
.xx "" "plot:" "graphics filters" "" plot(1G)
.xx "" "arc, move, cont, point, linemod, space, closepl:" "graphics interface" "/erase, label, line, circle," plot(3X)
.xx "" "plot:" "graphics interface" "" plot(5)
.xx "" "lib2648: subroutines for the HP 2648" "graphics terminal" "" lib2648(3X)
.xx "" "" "grep, egrep, fgrep: search a file for a pattern" "" grep(1)
.xx "" "vgrind:" "grind nice listings of programs" "" vgrind(1)
.xx "" "chgrp: change" "group" "" chgrp(1)
.xx "" "getpgrp: get process" "group" "" getpgrp(2)
.xx "" "killpg: send signal to a process" "group" "" killpg(2)
.xx "" "setpgrp: set process" "group" "" setpgrp(2)
.xx "" "getgroups: get" "group access list" "" getgroups(2)
.xx "" "initgroups: initialize" "group access list" "" initgroups(3X)
.xx "" "setgroups: set" "group access list" "" setgroups(2)
.xx "" "getnetgrent, innetgr, setnetgrent: get network" "group entry" "endnetgrent," getnetgrent(3N)
.xx "" "group:" "group file" "" group(5)
.xx "" "getgrgid, getgrnam, setgrent, endgrent: get" "group file entry" "getgrent," getgrent(3)
.xx "" "" "group: group file" "" group(5)
.xx "" "setregid: set real and effective" "group ID" "" setregid(2)
.xx "" "setruid, setgid, setegid, setrgid: set user and" "group ID" "setuid, seteuid," setuid(3)
.xx "" "getgid, getegid: get" "group identity" "" getgid(2)
.xx "" "groups: show" "group memberships" "" groups(1)
.xx "" "chown, fchown: change owner and" "group of a file" "" chown(2)
.xx "" "make: maintain program" "groups" "" make(1)
.xx "" "netgroup: list of network" "groups" "" netgroup(5)
.xx "" "" "groups: show group memberships" "" groups(1)
.xx "" "worm: Play the" "growing worm game" "" worm(6)
.xx "" "stty," "gtty: set and get terminal state (defunct)" "" stty(3C)
.xx "" "stop:" "halt a job or process." "" csh(1)
.xx "" "reboot: reboot system or" "halt processor" "" reboot(2)
.xx "" "" "halt: stop the processor" "" halt(8)
.xx "" "fastboot, fasthalt: reboot/" "halt the system without checking the disks" "" fastboot(8)
.xx "" "rmail:" "handle remote mail received via uucp" "" rmail(1)
.xx "" "re_comp, re_exec: regular expression" "handler" "" regex(3)
.xx "" "hangman: Computer version of the game" "hangman" "" hangman(6)
.xx "" "" "hangman: Computer version of the game hangman" "" hangman(6)
.xx "" "vhangup: virtually ``" "hangup'' the current control terminal" "" vhangup(2)
.xx "" "nohup: run command immune to" "hangups." "" csh(1)
.xx "" "link: make a" "hard link to a file" "" link(2)
.xx "" "intro: introduction to special files and" "hardware support" "" intro(4)
.xx "" "rehash: recompute command" "hash table." "" csh(1)
.xx "" "unhash: discard command" "hash table." "" csh(1)
.xx "" "hashstat: print command" "hashing statistics." "" csh(1)
.xx "" "" "hashstat: print command hashing statistics." "" csh(1)
.xx "file entry" "addmntent, endmntent, getmntent," "hasmntopt, setmntent: get file system descriptor" "" getmntent(3)
.xx "" "leave: remind you when you" "have to leave" "" leave(1)
.xx "" "od: octal, decimal," "hex, ascii dump" "" od(1)
.xx "" "" "hier: file system hierarchy" "" hier(7)
.xx "" "hier: file system" "hierarchy" "" hier(7)
.xx "" "history: print" "history event list." "" csh(1)
.xx "" "" "history: print history event list." "" csh(1)
.xx "" "fortune: print a random," "hopefully interesting, adage" "" fortune(6)
.xx "" "sethostid: get/set unique identifier of current" "host" "gethostid," gethostid(2)
.xx "" "gethostname, sethostname: get/set name of current" "host" "" gethostname(2)
.xx "" "gettable: get NIC format host tables from a" "host" "" gettable(8C)
.xx "" "uusend: send a file to a remote" "host" "" uusend(1C)
.xx "" "htonl, htons, ntohl, ntohs: convert values between" "host and network byte order" "" byteorder(3N)
.xx "" "L.sys: UUCP remote" "host description file" "" l.sys(5)
.xx "" "remote: remote" "host description file" "" remote(5)
.xx "" "gethostbyname, sethostent, endhostent: get network" "host entry" "gethostent, gethostbyaddr," gethostent(3N)
.xx "" "hosts:" "host name data base" "" hosts(5)
.xx "" "phones: remote" "host phone number data base" "" phones(5)
.xx "standalone program development" "" "host: remote virtual terminal/fileserver for" "" host(1)
.xx "" "ruptime: show" "host status of local machines" "" ruptime(1C)
.xx "" "rup: show" "host status of local machines (RPC version)" "" rup(1C)
.xx "" "hostid: set or print identifier of current" "host system" "" hostid(1)
.xx "" "hostname: set or print name of current" "host system" "" hostname(1)
.xx "" "htable: convert NIC standard format" "host tables" "" htable(8)
.xx "" "gettable: get NIC format" "host tables from a host" "" gettable(8C)
.xx "system" "" "hostid: set or print identifier of current host" "" hostid(1)
.xx "" "L.aliases: UUCP" "hostname alias file" "" l.aliases(5)
.xx "" "" "hostname: set or print name of current host system" "" hostname(1)
.xx "" "hosts.equiv: list of trusted" "hosts" "" hosts.equiv(5)
.xx "" "ping: send ICMP ECHO_REQUEST packets to network" "hosts" "" ping(8)
.xx "" "uuname: list names of UUCP" "hosts" "" uuname(1C)
.xx "" "" "hosts: host name data base" "" hosts(5)
.xx "" "" "hosts.equiv: list of trusted hosts" "" hosts.equiv(5)
.xx "" "uptime: show" "how long system has been up" "" uptime(1)
.xx "" "lib2648: subroutines for the" "HP 2648 graphics terminal" "" lib2648(3X)
.xx "" "" "htable: convert NIC standard format host tables" "" htable(8)
.xx "host and network byte order" "" "htonl, htons, ntohl, ntohs: convert values between" "" byteorder(3N)
.xx "convert host and network byte-order values" "htonl," "htons, ntohl, ntohs:" "" byteorder(3N)
.xx "" "wump: the game of" "hunt-the-wumpus" "" wump(6)
.xx "" "sinh, cosh, tanh:" "hyperbolic functions" "" sinh(3M)
.xx "" "" "hypot, cabs: Euclidean distance" "" hypot(3M)
.xx "type truth value" "machid: ns32000," "i386, pdp11, u3b, u3b2, u3b5, vax: get processor" "" machid(1)
.xx "" "" "icheck: file system storage consistency check" "" icheck(8)
.xx "" "ping: send" "ICMP ECHO_REQUEST packets to network hosts" "" ping(8)
.xx "" "" "icmp: Internet Control Message Protocol" "" icmp(4P)
.xx "" "setregid: set real and effective group" "ID" "" setregid(2)
.xx "" "setgid, setegid, setrgid: set user and group" "ID" "setuid, seteuid, setruid," setuid(3)
.xx "" "whoami: print effective current user" "id" "" whoami(1)
.xx "" "" "id: file identification program" "" id(1)
.xx "" "su: substitute user" "id temporarily" "" su(1)
.xx "" "" "ident: identify files" "" ident(1)
.xx "" "getpid, getppid: get process" "identification" "" getpid(2)
.xx "" "m_get_myid: return process" "identification" "" m_get_myid(3P)
.xx "" "id: file" "identification program" "" id(1)
.xx "" "gethostid, sethostid: get/set unique" "identifier of current host" "" gethostid(2)
.xx "" "hostid: set or print" "identifier of current host system" "" hostid(1)
.xx "" "ident:" "identify files" "" ident(1)
.xx "" "getgid, getegid: get group" "identity" "" getgid(2)
.xx "" "getuid, geteuid: get user" "identity" "" getuid(2)
.xx "" "setreuid: set real and effective user" "ID's" "" setreuid(2)
.xx "" "" "if: conditional statement." "" csh(1)
.xx "" "" "if: general properties of network interfaces" "" if(4N)
.xx "" "biff: be notified" "if mail arrives and who it is from" "" biff(1)
.xx "exit, export, login, read, readonly,/" "sh, for, case," "if, while, :, ., break, continue, cd, eval, exec," "" sh(1)
.xx "" "" "ifconfig: configure network interface parameters" "" ifconfig(8C)
.xx "" "unifdef: remove" "ifdef'ed lines" "" unifdef(1)
.xx "" "core: format of memory" "image file" "" core(5)
.xx "" "gcore: get core" "images of running processes" "" gcore(1)
.xx "" "notify: request" "immediate notification." "" csh(1)
.xx "" "nohup: run command" "immune to hangups." "" csh(1)
.xx "" "xstr: extract strings from C programs to" "implement shared strings" "" xstr(1)
.xx "" "eyacc: modified yacc allowing much" "improved error recovery" "" eyacc(1)
.xx "" "which: locate a program file" "including aliases and paths (csh only)" "" which(1)
.xx "" "m_next:" "increment global counter" "" m_next(3P)
.xx "" "dump, dumpdates:" "incremental dump format" "" dump(5)
.xx "" "dump:" "incremental file system dump" "" dump(8)
.xx "" "restore:" "incremental file system restore" "" restore(8)
.xx "" "indent:" "indent and format C program source" "" indent(1)
.xx "" "" "indent: indent and format C program source" "" indent(1)
.xx "" "gets directory entries in a filesystem" "independent format" "getdirentries:" getdirentries(2)
.xx "" "tgetnum, tgetflag, tgetstr, tgoto, tputs: terminal" "independent operation routines" "tgetent," termcap(3X)
.xx "" "getdtablemax: get maximum in-use descriptor table" "index" "" getdtablemax(2)
.xx "" "ptx: permuted" "index" "" ptx(1)
.xx "" "L-dialcodes: UUCP phone number" "index file" "" l-dialcodes(5)
.xx "bibliography" "indxbib, lookbib: build inverted" "index for a bibliography, find references in a" "" lookbib(1)
.xx "" "strncat, strcmp, strncmp, strcpy, strncpy, strlen," "index, rindex: string operations" "strcat," string(3)
.xx "" "last:" "indicate last logins of users and teletypes" "" last(1)
.xx "" "syscall:" "indirect system call" "" syscall(2)
.xx "" "fsplit: split a multi-routine Fortran file into" "individual files" "" fsplit(1)
.xx "bibliography, find references in a bibliography" "" "indxbib, lookbib: build inverted index for a" "" lookbib(1)
.xx "" "" "inet: Internet protocol family" "" inet(4F)
.xx "" "servers:" "inet server data base" "" servers(5)
.xx "inet_lnaof, inet_netof: Internet address/" "" "inet_addr, inet_network, inet_ntoa, inet_makeaddr," "" inet(3N)
.xx "" "" "inetd: internet services daemon" "" inetd(8C)
.xx "" "inet_addr, inet_network, inet_ntoa, inet_makeaddr," "inet_lnaof, inet_netof: Internet address/" "" inet(3N)
.xx "address/" "inet_addr, inet_network, inet_ntoa," "inet_makeaddr, inet_lnaof, inet_netof: Internet" "" inet(3N)
.xx "" "/inet_network, inet_ntoa, inet_makeaddr, inet_lnaof," "inet_netof: Internet address manipulation routines" "" inet(3N)
.xx "inet_netof: Internet address" "inet_addr, inet_network" "inet_ntoa, inet_makeaddr, inet_lnaof," "" inet(3N)
.xx "Internet address/" "inet_addr, inet_network," "inet_ntoa, inet_makeaddr, inet_lnaof, inet_netof:" "" inet(3N)
.xx "" "addbad: modify dec standard 144 bad sector" "information" "" addbad(8)
.xx "" "bad144: read/write dec standard 144 bad sector" "information" "" bad144(8)
.xx "" "dumpfs: dump file system" "information" "" dumpfs(8)
.xx "" "pac: printer/ploter accounting" "information" "" pac(8)
.xx "" "rpcinfo: report RPC" "information" "" rpcinfo(8)
.xx "" "fstab: static" "information about filesystems" "" fstab(5)
.xx "" "mntent: static" "information about filesystems" "" mntent(5)
.xx "" "rlog: print log messages and other" "information about RCS files" "" rlog(1)
.xx "" "getrusage: get" "information about resource utilization" "" getrusage(2)
.xx "" "vtimes: get" "information about resource utilization" "" vtimes(3C)
.xx "" "vfontinfo: inspect and print out" "information about UNIX fonts" "" vfontinfo(1)
.xx "" "rnusers, rusers: return" "information about users on remote machines" "" rnusers(3R)
.xx "" "man: find manual" "information by keywords; print out the manual" "" man(1)
.xx "" "finger: user" "information lookup program" "" finger(1)
.xx "" "miscellaneous: miscellaneous useful" "information pages" "" intro(7)
.xx "" "getusclk, usclk_init: get/" "init microsecond clock" "" getusclk(3)
.xx "" "" "init: process control initialization" "" init(8)
.xx "" "" "initgroups: initialize group access list" "" initgroups(3X)
.xx "" "init: process control" "initialization" "" init(8)
.xx "" "tset: terminal dependent" "initialization" "" tset(1)
.xx "" "ttys: terminal" "initialization data" "" ttys(5)
.xx "" "s_init_barrier, s_wait_barrier:" "initialize barrier, wait at barrier" "" s_wait_barrier(3P)
.xx "" "initgroups:" "initialize group access list" "" initgroups(3X)
.xx "" "s_init_lock, s_lock, s_clock, s_unlock:" "initialize, lock, unlock locks" "" s_lock(3P)
.xx "" "connect:" "initiate a connection on a socket" "" connect(2)
.xx "" "popen, pclose:" "initiate I/O to/from a process" "" popen(3)
.xx "routines for changing generators" "random, srandom," "initstate, setstate: better random number generator;" "" random(3)
.xx "" "endnetgrent, getnetgrent," "innetgr, setnetgrent: get network group entry" "" getnetgrent(3N)
.xx "" "clri: clear" "i-node" "" clri(8)
.xx "" "fs," "inode: format of file system volume" "" fs(5)
.xx "" "fsirand: install random" "inode generation numbers" "" fsirand(8)
.xx "" "read, readv: read" "input" "" read(2)
.xx "" "soelim: eliminate .so's from nroff" "input" "" soelim(1)
.xx "" "scanf, fscanf, sscanf: formatted" "input conversion" "" scanf(3S)
.xx "" "ungetc: push character back into" "input stream" "" ungetc(3S)
.xx "" "fread, fwrite: buffered binary" "input/output" "" fread(3S)
.xx "" "stdio: standard buffered" "input/output package" "" intro(3S)
.xx "" "ferror, feof, clearerr, fileno: stream status" "inquiries" "" ferror(3S)
.xx "" "refer: find and" "insert literature references in documents" "" refer(1)
.xx "" "insque, remque:" "insert/remove element from a queue" "" insque(3)
.xx "" "vfontinfo:" "inspect and print out information about UNIX fonts" "" vfontinfo(1)
.xx "" "insque, remque:" "insert/remove element from a queue" "" insque(3)
.xx "" "install:" "install binaries" "" install(1)
.xx "" "" "install: install binaries" "" install(1)
.xx "" "fsirand:" "install random inode generation numbers" "" fsirand(8)
.xx "" "learn: computer aided" "instruction about UNIX" "" learn(1)
.xx "" "dis: disassemble Series 32000 or Series 386" "instructions" "" dis(3X)
.xx "" "fsck: file system consistency check and" "interactive repair" "" fsck(8)
.xx "" "fsck: standalone file system consistency check and" "interactive repair" "" fsck(8S)
.xx "" "ddt:" "interactive symbolic debugger (Balance only)" "" ddt(1)
.xx "" "fortune: print a random, hopefully" "interesting, adage" "" fortune(6)
.xx "" "cons: Sequent console" "interface" "" cons(4)
.xx "" "lo: software loopback network" "interface" "" lo(4)
.xx "" "lp: Systech parallel line printer" "interface" "" lp(4)
.xx "" "mtio: UNIX magtape" "interface" "" mtio(4)
.xx "" "move, cont, point, linemod, space, closepl: graphics" "interface" "/openpl, erase, label, line, circle, arc," plot(3X)
.xx "" "plot: graphics" "interface" "" plot(5)
.xx "" "se: Balance 8000 10 Mb/s Ethernet" "interface" "" se(4)
.xx "" "tty: general terminal" "interface" "" tty(4)
.xx "" "xp: Xylogics 450 MULTIBUS disk" "interface" "" xp(4)
.xx "" "xt: Xylogics 472 MULTIBUS magtape" "interface" "" xt(4)
.xx "" "yperr_string ypprot_err: yellow pages client" "interface" "/yp_next yp_all yp_order yp_master" ypclnt(3N)
.xx "" "ifconfig: configure network" "interface parameters" "" ifconfig(8C)
.xx "" "telnet: user" "interface to the TELNET protocol" "" telnet(1C)
.xx "" "if: general properties of network" "interfaces" "" if(4N)
.xx "" "swapon: add a swap device for" "interleaved paging/swapping" "" swapon(2)
.xx "" "sendmail: send mail over the" "internet" "" sendmail(8)
.xx "" "/inet_ntoa, inet_makeaddr, inet_lnaof, inet_netof:" "Internet address manipulation routines" "" inet(3N)
.xx "" "icmp:" "Internet Control Message Protocol" "" icmp(4P)
.xx "" "ftpd: DARPA" "Internet File Transfer Protocol server" "" ftpd(8C)
.xx "" "ip:" "Internet Protocol" "" ip(4P)
.xx "" "inet:" "Internet protocol family" "" inet(4F)
.xx "" "inetd:" "internet services daemon" "" inetd(8C)
.xx "" "tcp:" "Internet Transmission Control Protocol" "" tcp(4P)
.xx "" "udp:" "Internet User Datagram Protocol" "" udp(4P)
.xx "" "spline:" "interpolate smooth curve" "" spline(1G)
.xx "" "lisp: lisp" "interpreter" "" lisp(1)
.xx "" "pti: phototypesetter" "interpreter" "" pti(1)
.xx "" "uuxqt: UUCP execution file" "interpreter" "" uuxqt(8C)
.xx "" "csh: a shell (command" "interpreter) with C-like syntax" "" csh(1)
.xx "" "pipe: create an" "interprocess communication channel" "" pipe(2)
.xx "" "atomically release blocked signals and wait for" "interrupt" "sigpause:" sigpause(2)
.xx "" "onintr: process" "interrupts in command scripts." "" csh(1)
.xx "" "intro:" "introduction to commands" "" intro(1)
.xx "" "intro:" "introduction to compatibility library functions" "" intro(3C)
.xx "" "intro:" "introduction to library functions" "" intro(3)
.xx "" "intro:" "introduction to mathematical library functions" "" intro(3M)
.xx "" "intro:" "introduction to miscellaneous library functions" "" intro(3X)
.xx "" "intro:" "introduction to network library functions" "" intro(3N)
.xx "" "networking:" "introduction to networking facilities" "" intro(4N)
.xx "" "intro:" "introduction to Parallel Programming Library" "" intro(3P)
.xx "" "rcsintro:" "introduction to RCS commands" "" rcsintro(1)
.xx "" "intro:" "introduction to RPC service library functions" "" intro(3R)
.xx "" "intro:" "introduction to special files and hardware support" "" intro(4)
.xx "" "intro:" "introduction to system calls and error numbers" "" intro(2)
.xx "commands" "intro:" "introduction to system maintenance and operation" "" intro(8)
.xx "" "ncheck: generate names from" "i-numbers" "" ncheck(8)
.xx "in a bibliography" "indxbib, lookbib: build" "inverted index for a bibliography, find references" "" lookbib(1)
.xx "" "select: synchronous" "i/o multiplexing" "" select(2)
.xx "" "iostat: report" "I/O statistics" "" iostat(1)
.xx "" "popen, pclose: initiate" "I/O to/from a process" "" popen(3)
.xx "" "" "ioctl: control device" "" ioctl(2)
.xx "" "" "iostat: report I/O statistics" "" iostat(1)
.xx "" "" "ip: Internet Protocol" "" ip(4P)
.xx "" "sail: multi-user wooden ships and" "iron men" "" sail(6)
.xx "islower, isprint, ispunct, isspace, isupper,/" "" "isalnum, isalpha, isascii, iscntrl, isdigit," "" ctype(3)
.xx "isprint, ispunct, isspace, isupper,/" "isalnum," "isalpha, isascii, iscntrl, isdigit, islower," "" ctype(3)
.xx "ispunct, isspace, isupper,/" "isalnum, isalpha," "isascii, iscntrl, isdigit, islower, isprint," "" ctype(3)
.xx "" "ttyname," "isatty, ttyslot: find name of a terminal" "" ttyname(3)
.xx "isspace, isupper,/" "isalnum, isalpha, isascii," "iscntrl, isdigit, islower, isprint, ispunct," "" ctype(3)
.xx "isupper,/" "isalnum, isalpha, isascii, iscntrl," "isdigit, islower, isprint, ispunct, isspace," "" ctype(3)
.xx "" "isalnum, isalpha, isascii, iscntrl, isdigit," "islower, isprint, ispunct, isspace, isupper,/" "" ctype(3)
.xx "" "/isalpha, isascii, iscntrl, isdigit, islower," "isprint, ispunct, isspace, isupper, toascii,/" "" ctype(3)
.xx "" "getpseudotty," "ispseudotty: get or query pseudo terminals" "" getpseudotty(3)
.xx "" "/isascii, iscntrl, isdigit, islower, isprint," "ispunct, isspace, isupper, toascii, tolower,/" "" ctype(3)
.xx "" "/iscntrl, isdigit, islower, isprint, ispunct," "isspace, isupper, toascii, tolower, toupper:/" "" ctype(3)
.xx "" "system:" "issue a shell command" "" system(3)
.xx "" "/isdigit, islower, isprint, ispunct, isspace," "isupper, toascii, tolower, toupper: character/" "" ctype(3)
.xx "" "" "j0, j1, jn, y0, y1, yn: bessel functions" "" j0(3M)
.xx "" "j0," "j1, jn, y0, y1, yn: bessel functions" "" j0(3M)
.xx "" "j0, j1," "jn, y0, y1, yn: bessel functions" "" j0(3M)
.xx "" "bg: place" "job in background." "" csh(1)
.xx "" "fg: bring" "job into foreground." "" csh(1)
.xx "" "jobs: print current" "job list." "" csh(1)
.xx "" "stop: halt a" "job or process." "" csh(1)
.xx "" "kill: kill" "jobs and processes." "" csh(1)
.xx "" "lprm: remove" "jobs from the line printer spooling queue" "" lprm(1)
.xx "" "" "jobs: print current job list." "" csh(1)
.xx "" "join:" "join files on fields" "" join(1)
.xx "" "" "join: join files on fields" "" join(1)
.xx "" "msgs: system messages and" "junk mail program" "" msgs(1)
.xx "" "mount:" "keep track of remotely mounted filesystems" "" mount(3R)
.xx "" "rstatd:" "kernel statistics server" "" rstatd(8C)
.xx "" "makekey: generate encryption" "key" "" makekey(8)
.xx "" "apropos: locate commands by" "keyword lookup" "" apropos(1)
.xx "" "man: find manual information by" "keywords; print out the manual" "" man(1)
.xx "" "m_kill_procs:" "kill child processes" "" m_kill_procs(3P)
.xx "" "kill:" "kill jobs and processes." "" csh(1)
.xx "" "" "kill: kill jobs and processes." "" csh(1)
.xx "" "" "kill: send signal to a process" "" kill(2)
.xx "" "" "kill: terminate a process with extreme prejudice" "" kill(1)
.xx "" "" "killpg: send signal to a process group" "" killpg(2)
.xx "" "mem, kmem," "kMBmem, kMWmem: main memory" "" mem(4)
.xx "" "mem," "kmem, kMBmem, kMWmem: main memory" "" mem(4)
.xx "" "mem, kmem, kMBmem," "kMWmem: main memory" "" mem(4)
.xx "linemod, space, closepl:/" "plot: openpl, erase," "label, line, circle, arc, move, cont, point," "" plot(3X)
.xx "" "" "L.aliases: UUCP hostname alias file" "" l.aliases(5)
.xx "" "awk: pattern scanning and processing" "language" "" awk(1)
.xx "" "bc: arbitrary-precision arithmetic" "language" "" bc(1)
.xx "" "set, shift, [, times, trap, umask, wait: command" "language" "/exec, exit, export, login, read, readonly," sh(1)
.xx "" "vgrindefs: vgrind's" "language definition data base" "" vgrindefs(5)
.xx "" "cpp: the C" "language preprocessor" "" cpp(1)
.xx "order" "" "lastcomm: show last commands executed in reverse" "" lastcomm(1)
.xx "" "" "L.cmds: UUCP remote command permissions file" "" l.cmds(5)
.xx "" "" "ld: link editor" "" ld(1)
.xx "" "" "L-devices: UUCP device description file" "" l-devices(5)
.xx "" "frexp," "ldexp, modf: split into mantissa and exponent" "" frexp(3)
.xx "" "" "L-dialcodes: UUCP phone number index file" "" l-dialcodes(5)
.xx "" "" "learn: computer aided instruction about UNIX" "" learn(1)
.xx "" "leave: remind you when you have to" "leave" "" leave(1)
.xx "" "" "leave: remind you when you have to leave" "" leave(1)
.xx "" "exit:" "leave shell." "" csh(1)
.xx "" "truncate, ftruncate: truncate a file to a specified" "length" "" truncate(2)
.xx "" "getopt: get option" "letter from argument vector" "" getopt(3X)
.xx "" "" "lex: generator of lexical analysis programs" "" lex(1)
.xx "" "lex: generator of" "lexical analysis programs" "" lex(1)
.xx "terminal" "" "lib2648: subroutines for the HP 2648 graphics" "" lib2648(3X)
.xx "" "libsanity:" "libc routines with runtime sanity checking" "" libsanity(3X)
.xx "" "ranlib: convert archives to random" "libraries" "" ranlib(1)
.xx "" "intro: introduction to Parallel Programming" "Library" "" intro(3P)
.xx "" "lorder: find ordering relation for an object" "library" "" lorder(1)
.xx "" "ar: archive (" "library) file format" "" ar(5)
.xx "" "intro: introduction to" "library functions" "" intro(3)
.xx "" "intro: introduction to compatibility" "library functions" "" intro(3C)
.xx "" "intro: introduction to mathematical" "library functions" "" intro(3M)
.xx "" "intro: introduction to network" "library functions" "" intro(3N)
.xx "" "intro: introduction to RPC service" "library functions" "" intro(3R)
.xx "" "intro: introduction to miscellaneous" "library functions" "" intro(3X)
.xx "" "ar: archive and" "library maintainer" "" ar(1)
.xx "" "xdr:" "library routines for external data representation" "" xdr(3N)
.xx "" "rpc:" "library routines for remote procedure calls" "" rpc(3N)
.xx "checking" "" "libsanity: libc routines with runtime sanity" "" libsanity(3X)
.xx "" "csh: a shell (command interpreter) with C-" "like syntax" "" csh(1)
.xx "" "" "limit: alter per-process resource limitations." "" csh(1)
.xx "" "limit: alter per-process resource" "limitations." "" csh(1)
.xx "" "unlimit: remove resource" "limitiations." "" csh(1)
.xx "" "quota: display disk usage and" "limits" "" quota(1)
.xx "" "cpus_online: returns the number of CPUs on-" "line" "" cpus_online(3P)
.xx "" "offline_all: take all but one active processor off" "line" "" offline_all(3)
.xx "space, closepl:/" "plot: openpl, erase, label," "line, circle, arc, move, cont, point, linemod," "" plot(3X)
.xx "" "col: filter reverse" "line feeds" "" col(1)
.xx "" "sysline: display system status on status" "line of a terminal" "" sysline(1)
.xx "" "lpr: off" "line print" "" lpr(1)
.xx "" "print: pr to the" "line printer" "" print(1)
.xx "" "lpc:" "line printer control program" "" lpc(8)
.xx "" "lpd:" "line printer daemon" "" lpd(8)
.xx "" "lp: Systech parallel" "line printer interface" "" lp(4)
.xx "" "lprm: remove jobs from the" "line printer spooling queue" "" lprm(1)
.xx "" "erase, label, line, circle, arc, move, cont, point," "linemod, space, closepl: graphics interface" "/openpl," plot(3X)
.xx "" "head: give first few" "lines" "" head(1)
.xx "" "ttyconfig: configure Systech tty" "lines" "" ttyconfig(8)
.xx "" "unifdef: remove ifdef'ed" "lines" "" unifdef(1)
.xx "" "comm: select or reject" "lines common to two sorted files" "" comm(1)
.xx "" "fold: fold long" "lines for finite width output device" "" fold(1)
.xx "" "uniq: report repeated" "lines in a file" "" uniq(1)
.xx "" "look: find" "lines in a sorted list" "" look(1)
.xx "" "rev: reverse" "lines of a file" "" rev(1)
.xx "" "readclink: read value of a conditional symbolic" "link" "" readclink(2)
.xx "" "readlink: read value of a symbolic" "link" "" readlink(2)
.xx "" "ld:" "link editor" "" ld(1)
.xx "" "a.out: assembler and" "link editor output" "" a.out(5)
.xx "" "" "link: make a hard link to a file" "" link(2)
.xx "" "csymlink: make conditional symbolic" "link to a file" "" csymlink(2)
.xx "" "link: make a hard" "link to a file" "" link(2)
.xx "" "symlink: make symbolic" "link to a file" "" symlink(2)
.xx "" "ln: make" "links" "" ln(1)
.xx "" "" "lint: a C program verifier" "" lint(1)
.xx "" "lisp:" "lisp interpreter" "" lisp(1)
.xx "" "" "lisp: lisp interpreter" "" lisp(1)
.xx "" "glob: filename expand argument" "list." "" csh(1)
.xx "" "history: print history event" "list." "" csh(1)
.xx "" "jobs: print current job" "list." "" csh(1)
.xx "" "shift: manipulate argument" "list." "" csh(1)
.xx "" "getgroups: get group access" "list" "" getgroups(2)
.xx "" "initgroups: initialize group access" "list" "" initgroups(3X)
.xx "" "look: find lines in a sorted" "list" "" look(1)
.xx "" "nlist: get entries from name" "list" "" nlist(3)
.xx "" "nm: print name" "list" "" nm(1)
.xx "" "setgroups: set group access" "list" "" setgroups(2)
.xx "" "symorder: rearrange name" "list" "" symorder(1)
.xx "" "varargs: variable argument" "list" "" varargs(3)
.xx "" "ls:" "list contents of directory" "" ls(1)
.xx "" "uuname:" "list names of UUCP hosts" "" uuname(1C)
.xx "" "foreach: loop over" "list of names." "" csh(1)
.xx "" "netgroup:" "list of network groups" "" netgroup(5)
.xx "" "hosts.equiv:" "list of trusted hosts" "" hosts.equiv(5)
.xx "" "users: compact" "list of users who are on the system" "" users(1)
.xx "" "listen:" "listen for connections on a socket" "" listen(2)
.xx "" "" "listen: listen for connections on a socket" "" listen(2)
.xx "" "ls: generate a standalone directory" "listing" "" ls(8S)
.xx "" "vgrind: grind nice" "listings of programs" "" vgrind(1)
.xx "" "xargs: construct argument" "list(s) and execute command" "" xargs(1)
.xx "" "refer: find and insert" "literature references in documents" "" refer(1)
.xx "" "" "ln: make links" "" ln(1)
.xx "" "" "lo: software loopback network interface" "" lo(4)
.xx "and time to ASCII" "ctime," "localtime, gmtime, asctime, timezone: convert date" "" ctime(3)
.xx "(csh only)" "which:" "locate a program file including aliases and paths" "" which(1)
.xx "" "apropos:" "locate commands by keyword lookup" "" apropos(1)
.xx "" "whereis:" "locate source, binary, and or manual for program" "" whereis(1)
.xx "" "end, etext, edata: last" "locations in program" "" end(3)
.xx "" "flock: apply or remove an advisory" "lock on an open file" "" flock(2)
.xx "" "" "lock: reserve a terminal" "" lock(1)
.xx "" "m_lock, m_unlock:" "lock, unlock locks" "" m_lock(3P)
.xx "" "s_init_lock, s_lock, s_clock, s_unlock: initialize," "lock, unlock locks" "" s_lock(3P)
.xx "" "" "lockf: record locking on files" "" lockf(3C)
.xx "" "lockf: record" "locking on files" "" lockf(3C)
.xx "" "m_lock, m_unlock: lock, unlock" "locks" "" m_lock(3P)
.xx "" "s_lock, s_clock, s_unlock: initialize, lock, unlock" "locks" "s_init_lock," s_lock(3P)
.xx "" "collect system diagnostic messages to form error" "log" "dmesg:" dmesg(8)
.xx "" "syslog, openlog, closelog: control system" "log" "" syslog(3)
.xx "" "uulog: display UUCP" "log files" "" uulog(1C)
.xx "" "gamma:" "log gamma function" "" gamma(3M)
.xx "power, square root" "exp," "log, log10, pow, sqrt: exponential, logarithm," "" exp(3M)
.xx "" "rlog: print" "log messages and other information about RCS files" "" rlog(1)
.xx "" "syslog:" "log systems messages" "" syslog(8)
.xx "square root" "exp, log," "log10, pow, sqrt: exponential, logarithm, power," "" exp(3M)
.xx "" "exp, log, log10, pow, sqrt: exponential," "logarithm, power, square root" "" exp(3M)
.xx "" "rwho: who's" "logged in on local machines" "" rwho(1C)
.xx "" "rusers: who's" "logged in on local machines (RPC version)" "" rusers(1C)
.xx "" "rlogin: remote" "login" "" rlogin(1C)
.xx "" "ac:" "login accounting" "" ac(8)
.xx "" "" "login: login new user." "" csh(1)
.xx "" "getlogin: get" "login name" "" getlogin(3)
.xx "" "login:" "login new user." "" csh(1)
.xx "" "passwd: change" "login password" "" passwd(1)
.xx "" "/:, ., break, continue, cd, eval, exec, exit, export," "login, read, readonly, set, shift, [, times, trap,/" "" sh(1)
.xx "" "utmp, wtmp:" "login records" "" utmp(5)
.xx "" "rlogind: remote" "login server" "" rlogind(8C)
.xx "" "chsh: change default" "login shell" "" chsh(1)
.xx "" "" "login: sign on" "" login(1)
.xx "" "last: indicate last" "logins of users and teletypes" "" last(1)
.xx "" "" "logout: end session." "" csh(1)
.xx "" "setjmp, longjmp, _setjmp," "_longjmp: non-local goto" "" setjmp(3)
.xx "" "setjmp," "longjmp, _setjmp, _longjmp: non-local goto" "" setjmp(3)
.xx "" "" "look: find lines in a sorted list" "" look(1)
.xx "find references in a bibliography" "indxbib," "lookbib: build inverted index for a bibliography," "" lookbib(1)
.xx "" "apropos: locate commands by keyword" "lookup" "" apropos(1)
.xx "" "finger: user information" "lookup program" "" finger(1)
.xx "" "break: exit while/foreach" "loop." "" csh(1)
.xx "" "continue: cycle in" "loop." "" csh(1)
.xx "" "end: terminate" "loop." "" csh(1)
.xx "" "foreach:" "loop over list of names." "" csh(1)
.xx "" "lo: software" "loopback network interface" "" lo(4)
.xx "" "" "lorder: find ordering relation for an object library" "" lorder(1)
.xx "" "mklost+found: make a" "lost+found directory for fsck" "" mklost+found(8)
.xx "" "" "lp: Systech parallel line printer interface" "" lp(4)
.xx "" "" "lpc: line printer control program" "" lpc(8)
.xx "" "" "lpd: line printer daemon" "" lpd(8)
.xx "" "" "lpq: spool queue examination program" "" lpq(1)
.xx "" "" "lpr: off line print" "" lpr(1)
.xx "queue" "" "lprm: remove jobs from the line printer spooling" "" lprm(1)
.xx "" "" "ls: generate a standalone directory listing" "" ls(8S)
.xx "" "" "ls: list contents of directory" "" ls(1)
.xx "" "" "lseek: move read/write pointer" "" lseek(2)
.xx "" "stat," "lstat, fstat: get file status" "" stat(2)
.xx "" "" "L.sys: UUCP remote host description file" "" l.sys(5)
.xx "" "" "m4: macro processor" "" m4(1)
.xx "get processor type truth value" "machid: ns32000, i386" "pdp11, u3b, u3b2, u3b5, vax:" "" machid(1)
.xx "" "showcfg: show the configuration of the" "machine" "" showcfg(8)
.xx "" "rusers: return information about users on remote" "machines" "rnusers," rnusers(3R)
.xx "" "ruptime: show host status of local" "machines" "" ruptime(1C)
.xx "" "rwall: write to specified remote" "machines" "" rwall(3R)
.xx "" "rwho: who's logged in on local" "machines" "" rwho(1C)
.xx "" "rup: show host status of local" "machines (RPC version)" "" rup(1C)
.xx "" "rusers: who's logged in on local" "machines (RPC version)" "" rusers(1C)
.xx "" "m4:" "macro processor" "" m4(1)
.xx "" "alias: shell" "macros." "" csh(1)
.xx "" "toupper: character classification and conversion" "macros" "/ispunct, isspace, isupper, toascii, tolower," ctype(3)
.xx "" "ms: text formatting" "macros" "" ms(7)
.xx "" "translate version 6 manual macros to version 7" "macros" "trman:" trman(1)
.xx "" "me:" "macros for formatting papers" "" me(7)
.xx "" "man:" "macros to typeset manual" "" man(7)
.xx "" "trman: translate version 6 manual" "macros to version 7 macros" "" trman(1)
.xx "" "tp: DEC/" "mag tape formats" "" tp(5)
.xx "" "mt:" "magnetic tape manipulating program" "" mt(1)
.xx "" "mtio: UNIX" "magtape interface" "" mtio(4)
.xx "" "xt: Xylogics 472 MULTIBUS" "magtape interface" "" xt(4)
.xx "" "rmt: remote" "magtape protocol module" "" rmt(8C)
.xx "" "mail: send and receive" "mail" "" mail(1)
.xx "" "encode/decode a binary file for transmission via" "mail" "uuencode, uudecode:" uuencode(1C)
.xx "" "xsend, xget, enroll: secret" "mail" "" xsend(1)
.xx "" "mailaddr:" "mail addressing description" "" mailaddr(7)
.xx "" "newaliases: rebuild the data base for the" "mail aliases file" "" newaliases(1)
.xx "" "binmail: send or receive" "mail among users" "" binmail(1)
.xx "" "biff: be notified if" "mail arrives and who it is from" "" biff(1)
.xx "" "from: who is my" "mail from?" "" from(1)
.xx "" "prmail: print out" "mail in the post office" "" prmail(1)
.xx "" "sendmail: send" "mail over the internet" "" sendmail(8)
.xx "" "msgs: system messages and junk" "mail program" "" msgs(1)
.xx "" "rmail: handle remote" "mail received via uucp" "" rmail(1)
.xx "" "" "mail: send and receive mail" "" mail(1)
.xx "" "" "mailaddr: mail addressing description" "" mailaddr(7)
.xx "" "mailbug: submit a" "bug report or enhancement request" "" mailbug(1)
.xx "" "mem, kmem, kMBmem, kMWmem:" "main memory" "" mem(4)
.xx "" "make:" "maintain program groups" "" make(1)
.xx "" "ar: archive and library" "maintainer" "" ar(1)
.xx "" "intro: introduction to system" "maintenance and operation commands" "" intro(8)
.xx "" "mkdir:" "make a directory" "" mkdir(1)
.xx "" "mkdir:" "make a directory file" "" mkdir(2)
.xx "" "link:" "make a hard link to a file" "" link(2)
.xx "" "mklost+found:" "make a lost+found directory for fsck" "" mklost+found(8)
.xx "" "mknod:" "make a special file" "" mknod(2)
.xx "" "mktemp:" "make a unique file name" "" mktemp(3)
.xx "" "csymlink:" "make conditional symbolic link to a file" "" csymlink(2)
.xx "" "ln:" "make links" "" ln(1)
.xx "" "" "make: maintain program groups" "" make(1)
.xx "" "symlink:" "make symbolic link to a file" "" symlink(2)
.xx "" "makedev:" "make system special files" "" makedev(8)
.xx "" "vwidth:" "make troff width table for a font" "" vwidth(1)
.xx "" "script:" "make typescript of terminal session" "" script(1)
.xx "" "" "makedev: make system special files" "" makedev(8)
.xx "" "" "makekey: generate encryption key" "" makekey(8)
.xx "allocator" "" "malloc, free, realloc, calloc, alloca: memory" "" malloc(3)
.xx "print out the manual" "man: find manual" "information by keywords;" "" man(1)
.xx "" "" "man: macros to typeset manual" "" man(7)
.xx "" "shift:" "manipulate argument list." "" csh(1)
.xx "" "quotactl:" "manipulate disk quotas" "" quotactl(2)
.xx "" "tp:" "manipulate tape archive" "" tp(1)
.xx "" "route: manually" "manipulate the routing tables" "" route(8C)
.xx "" "uuq: examine or" "manipulate the uucp queue" "" uuq(1C)
.xx "" "mt: magnetic tape" "manipulating program" "" mt(1)
.xx "" "inet_lnaof, inet_netof: Internet address" "manipulation routines" "/inet_ntoa, inet_makeaddr," inet(3N)
.xx "" "universe, att, ucb: universe" "manipulations" "" universe(1)
.xx "" "frexp, ldexp, modf: split into" "mantissa and exponent" "" frexp(3)
.xx "" "catman: create the cat files for the" "manual" "" catman(8)
.xx "" "find manual information by keywords; print out the" "manual" "man:" man(1)
.xx "" "man: macros to typeset" "manual" "" man(7)
.xx "" "whereis: locate source, binary, and or" "manual for program" "" whereis(1)
.xx "" "man: find manual information by keywords;" "print out the manual" "" man(1)
.xx "" "trman: translate version 6" "manual macros to version 7 macros" "" trman(1)
.xx "" "route:" "manually manipulate the routing tables" "" route(8C)
.xx "" "portmap: DARPA port to RPC program number" "mapper" "" portmap(8C)
.xx "" "display or alter parameters of virtual-to-physical" "mapping devices" "pmap:" pmap(8)
.xx "" "ether_ntoa, ether_ntohost: ethernet address" "mapping operations" "/ether_hostton, ether_line," ethers(3N)
.xx "" "m_single, m_multi:" "mark single-process code section" "" m_single(3P)
.xx "" "umask: change or display file creation" "mask." "" csh(1)
.xx "" "sigsetmask: set current signal" "mask" "" sigsetmask(2)
.xx "" "umask: set file creation mode" "mask" "" umask(2)
.xx "" "mkstr: create an error message file by" "massaging C source" "" mkstr(1)
.xx "" "intro: introduction to" "mathematical library functions" "" intro(3M)
.xx "" "eqn, neqn, checkeq: typeset" "mathematics" "" eqn(1)
.xx "" "getdtablemax: get" "maximum in-use descriptor table index" "" getdtablemax(2)
.xx "" "getrlimit, setrlimit: control" "maximum system resource consumption" "" getrlimit(2)
.xx "" "vlimit: control" "maximum system resource consumption" "" vlimit(3C)
.xx "" "se: Balance 8000 10" "Mb/s Ethernet interface" "" se(4)
.xx "" "xpformat: standalone 400-" "Mbyte disk formatter" "" xpformat(8S)
.xx "" "" "me: macros for formatting papers" "" me(7)
.xx "" "bcd: convert to antique" "media" "" bcd(6)
.xx "" "" "mem, kmem, kMBmem, kMWmem: main memory" "" mem(4)
.xx "" "groups: show group" "memberships" "" groups(1)
.xx "" "mem, kmem, kMBmem, kMWmem: main" "memory" "" mem(4)
.xx "" "malloc, free, realloc, calloc, alloca:" "memory allocator" "" malloc(3)
.xx "" "shmalloc, shrealloc, shfree: shared" "memory allocator" "" shmalloc(3P)
.xx "" "valloc: aligned" "memory allocator" "" valloc(3)
.xx "" "smem, smemco: SCED" "memory driver" "" smem(4)
.xx "" "dump: standalone" "memory dumper" "" dump(8S)
.xx "" "vfork: spawn new process in a virtual" "memory efficient way" "" vfork(2)
.xx "" "core: format of" "memory image file" "" core(5)
.xx "" "vmtune: tune system-wide virtual-" "memory parameters" "" vmtune(8)
.xx "" "vmstat: report virtual" "memory statistics" "" vmstat(1)
.xx "" "vm_ctl: examine and change virtual" "memory tuning parameters" "" vm_ctl(2)
.xx "" "sail: multi-user wooden ships and iron" "men" "" sail(6)
.xx "" "merge: three-way file" "merge" "" merge(1)
.xx "" "sort: sort or" "merge files" "" sort(1)
.xx "" "rcsmerge:" "merge RCS revisions" "" rcsmerge(1)
.xx "" "" "merge: three-way file merge" "" merge(1)
.xx "" "pmerge: pascal file" "merger" "" pmerge(1)
.xx "" "" "mesg: permit or deny messages" "" mesg(1)
.xx "" "msgctl:" "message control operations" "" msgctl(2)
.xx "" "mkstr: create an error" "message file by massaging C source" "" mkstr(1)
.xx "" "recv, recvfrom, recvmsg: receive a" "message from a socket" "" recv(2)
.xx "" "send, sendto, sendmsg: send a" "message from a socket" "" send(2)
.xx "" "msgop, msgsnd, msgrcv:" "message operations" "" msgop(2)
.xx "" "icmp: Internet Control" "Message Protocol" "" icmp(4P)
.xx "" "msgget: get" "message queue" "" msgget(2)
.xx "" "error: analyze and disperse compiler error" "messages" "" error(1)
.xx "" "mesg: permit or deny" "messages" "" mesg(1)
.xx "" "perror, sys_errlist, sys_nerr: system error" "messages" "" perror(3)
.xx "" "psignal, sys_siglist: system signal" "messages" "" psignal(3)
.xx "" "syslog: log systems" "messages" "" syslog(8)
.xx "" "msgs: system" "messages and junk mail program" "" msgs(1)
.xx "" "rlog: print log" "messages and other information about RCS files" "" rlog(1)
.xx "" "dmesg: collect system diagnostic" "messages to form error log" "" dmesg(8)
.xx "" "" "m_fork: execute a subprogram in parallel" "" m_fork(3P)
.xx "" "" "m_get_myid: return process identification" "" m_get_myid(3P)
.xx "" "m_get_numprocs:" "return number of child processes" "" m_get_numprocs(3P)
.xx "" "getusclk, usclk_init: get/init" "microsecond clock" "" getusclk(3)
.xx "" "usclk_conf:" "microsecond clock confidence test" "" usclk_conf(8)
.xx "" "usclk: 32-bit" "microsecond counter" "" usclk(4)
.xx "" "with priority aging, PFF, swapping, or processor" "migration disabled" "/nopff, noswap, on: run a command" noage(8)
.xx "" "intro: introduction to" "miscellaneous library functions" "" intro(3X)
.xx "pages" "" "miscellaneous: miscellaneous useful information" "" intro(7)
.xx "" "miscellaneous:" "miscellaneous useful information pages" "" intro(7)
.xx "" "" "mkdir: make a directory" "" mkdir(1)
.xx "" "" "mkdir: make a directory file" "" mkdir(2)
.xx "" "" "mkfs: construct a file system" "" mkfs(8)
.xx "" "" "m_kill_procs: kill child processes" "" m_kill_procs(3P)
.xx "" "" "mklost+found: make a lost+found directory for fsck" "" mklost+found(8)
.xx "" "" "mknod: build special file" "" mknod(8)
.xx "" "" "mknod: make a special file" "" mknod(2)
.xx "" "" "mkproto: construct a prototype file system" "" mkproto(8)
.xx "source" "" "mkstr: create an error message file by massaging C" "" mkstr(1)
.xx "" "" "mktemp: make a unique file name" "" mktemp(3)
.xx "" "" "m_lock, m_unlock: lock, unlock locks" "" m_lock(3P)
.xx "space" "" "mmap: map an open file into the process's address" "" mmap(2)
.xx "" "m_single," "m_multi: mark single-process code section" "" m_single(3P)
.xx "" "" "m_next: increment global counter" "" m_next(3P)
.xx "" "" "mntent: static information about filesystems" "" mntent(5)
.xx "" "chmod: change" "mode" "" chmod(1)
.xx "" "getty: set terminal" "mode" "" getty(8)
.xx "" "umask: set file creation" "mode mask" "" umask(2)
.xx "" "chmod, fchmod: change" "mode of file" "" chmod(2)
.xx "" "frexp, ldexp," "modf: split into mantissa and exponent" "" frexp(3)
.xx "" "touch: update date last" "modified of a file" "" touch(1)
.xx "" "eyacc: modified yacc allowing much" "improved error recovery" "" eyacc(1)
.xx "" "addbad:" "modify dec standard 144 bad sector information" "" addbad(8)
.xx "" "rmt: remote magtape protocol" "module" "" rmt(8C)
.xx "" "what: show what versions of object" "modules were used to construct a file" "" what(1)
.xx "" "monitor, monstartup," "moncontrol: prepare execution profile" "" monitor(3)
.xx "" "" "monitor: monitor system activity" "" monitor(8)
.xx "prepare execution profile" "" "monitor, monstartup, moncontrol:" "" monitor(3)
.xx "" "monitor:" "monitor system activity" "" monitor(8)
.xx "" "monitor," "monstartup, moncontrol: prepare execution profile" "" monitor(3)
.xx "" "" "more, page: file perusal filter for crt viewing" "" more(1)
.xx "" "curses: screen functions with ``optimal'' cursor" "motion" "" curses(3X)
.xx "" "mount, umount:" "mount and dismount filesystems" "" mount(8)
.xx "" "mount:" "mount file system" "" mount(2)
.xx "" "" "mount: keep track of remotely mounted filesystems" "" mount(3R)
.xx "" "" "mount: mount file system" "" mount(2)
.xx "" "" "mount, umount: mount and dismount filesystems" "" mount(8)
.xx "" "/etc/mtab:" "mounted file system table" "" mtab(5)
.xx "" "rmtab: remotely" "mounted file system table" "" rmtab(5)
.xx "" "mount: keep track of remotely" "mounted filesystems" "" mount(3R)
.xx "" "graphics\&/plot: openpl, erase, label, line, circle, arc," "move, cont, point, linemod, space, closepl:" "" plot(3X)
.xx "" "mv:" "move or rename files" "" mv(1)
.xx "" "lseek:" "move read/write pointer" "" lseek(2)
.xx "suspend and resume child process execution" "" "m_park_procs, m_rele_procs:" "" m_park_procs(3P)
.xx "execution" "m_park_procs," "m_rele_procs: suspend and resume child process" "" m_park_procs(3P)
.xx "" "" "ms: text formatting macros" "" ms(7)
.xx "" "" "m_set_procs: set number of child processes" "" m_set_procs(3P)
.xx "" "" "msgctl: message control operations" "" msgctl(2)
.xx "" "" "msgget: get message queue" "" msgget(2)
.xx "" "" "msgop, msgsnd, msgrcv: message operations" "" msgop(2)
.xx "" "msgop, msgsnd," "msgrcv: message operations" "" msgop(2)
.xx "" "" "msgs: system messages and junk mail program" "" msgs(1)
.xx "" "msgop," "msgsnd, msgrcv: message operations" "" msgop(2)
.xx "" "mark single-process code section" "m_single, m_multi:" "" m_single(3P)
.xx "" "" "m_sync: check in at barrier" "" m_sync(3P)
.xx "" "" "mt: magnetic tape manipulating program" "" mt(1)
.xx "" "/etc/" "mtab: mounted file system table" "" mtab(5)
.xx "" "st: Systech" "MTI-800/1600 terminal multiplexor driver" "" st(4)
.xx "" "" "mtio: UNIX magtape interface" "" mtio(4)
.xx "" "eyacc: modified yacc allowing" "much improved error recovery" "" eyacc(1)
.xx "" "xp: Xylogics 450" "MULTIBUS disk interface" "" xp(4)
.xx "" "xt: Xylogics 472" "MULTIBUS magtape interface" "" xt(4)
.xx "" "select: synchronous i/o" "multiplexing" "" select(2)
.xx "" "st: Systech MTI-800/1600 terminal" "multiplexor driver" "" st(4)
.xx "" "tmp_ctl:" "multi-processor control" "" tmp_ctl(2)
.xx "" "fsplit: split a" "multi-routine Fortran file into individual files" "" fsplit(1)
.xx "" "sail:" "multi-user wooden ships and iron men" "" sail(6)
.xx "" "switch:" "multi-way command branch." "" csh(1)
.xx "" "m_lock," "m_unlock: lock, unlock locks" "" m_lock(3P)
.xx "" "munmap:" "unmap part of the process's address space" "" munmap(2)
.xx "" "" "mv: move or rename files" "" mv(1)
.xx "" "from: who is" "my mail from?" "" from(1)
.xx "" "getdiskbyname: get disk description by its" "name" "" getdiskbyname(3X)
.xx "" "getenv: value for environment" "name" "" getenv(3)
.xx "" "getlogin: get login" "name" "" getlogin(3)
.xx "" "getsockname: get socket" "name" "" getsockname(2)
.xx "" "mktemp: make a unique file" "name" "" mktemp(3)
.xx "" "pwd: working directory" "name" "" pwd(1)
.xx "" "tty: get terminal" "name" "" tty(1)
.xx "" "hosts: host" "name data base" "" hosts(5)
.xx "" "networks: network" "name data base" "" networks(5)
.xx "" "protocols: protocol" "name data base" "" protocols(5)
.xx "" "services: service" "name data base" "" services(5)
.xx "" "getpw: get" "name from uid" "" getpw(3C)
.xx "" "nlist: get entries from" "name list" "" nlist(3)
.xx "" "nm: print" "name list" "" nm(1)
.xx "" "symorder: rearrange" "name list" "" symorder(1)
.xx "" "rename: change the" "name of a file" "" rename(2)
.xx "" "ttyname, isatty, ttyslot: find" "name of a terminal" "" ttyname(3)
.xx "" "getpeername: get" "name of connected peer" "" getpeername(2)
.xx "" "getdomainname, setdomainname: get/set" "name of current domain" "" getdomainname(2)
.xx "" "domainname: set or display" "name of current domain system" "" domainname(1)
.xx "" "gethostname, sethostname: get/set" "name of current host" "" gethostname(2)
.xx "" "hostname: set or print" "name of current host system" "" hostname(1)
.xx "" "bind: bind a" "name to a socket" "" bind(2)
.xx "" "foreach: loop over list of" "names." "" csh(1)
.xx "" "term: conventional" "names for terminals" "" term(7)
.xx "" "ncheck: generate" "names from i-numbers" "" ncheck(8)
.xx "" "uuname: list" "names of UUCP hosts" "" uuname(1C)
.xx "" "" "nargs: get argument count" "" nargs(3C)
.xx "" "" "ncheck: generate names from i-numbers" "" ncheck(8)
.xx "" "eqn," "neqn, checkeq: typeset mathematics" "" eqn(1)
.xx "" "" "netgroup: list of network groups" "" netgroup(5)
.xx "" "" "netstat: show network status" "" netstat(1)
.xx "" "rdump: file system dump across the" "network" "" rdump(8C)
.xx "" "rrestore: restore a file system dump across the" "network" "" rrestore(8C)
.xx "" "rwall: write to all users over a" "network" "" rwall(1)
.xx "" "htons, ntohl, ntohs: convert values between host and" "network byte order" "htonl," byteorder(3N)
.xx "" "getnetbyname, setnetent, endnetent: get" "network entry" "getnetent, getnetbyaddr," getnetent(3N)
.xx "" "endnetgrent, getnetgrent, innetgr, setnetgrent: get" "network group entry" "" getnetgrent(3N)
.xx "" "netgroup: list of" "network groups" "" netgroup(5)
.xx "" "gethostbyname, sethostent, endhostent: get" "network host entry" "gethostent, gethostbyaddr," gethostent(3N)
.xx "" "ping: send ICMP ECHO_REQUEST packets to" "network hosts" "" ping(8)
.xx "" "lo: software loopback" "network interface" "" lo(4)
.xx "" "ifconfig: configure" "network interface parameters" "" ifconfig(8C)
.xx "" "if: general properties of" "network interfaces" "" if(4N)
.xx "" "intro: introduction to" "network library functions" "" intro(3N)
.xx "" "networks:" "network name data base" "" networks(5)
.xx "" "routed:" "network routing daemon" "" routed(8C)
.xx "" "rwalld:" "network rwall server" "" rwalld(8C)
.xx "" "netstat: show" "network status" "" netstat(1)
.xx "" "rusersd:" "network username server" "" rusersd(8C)
.xx "" "networking: introduction to" "networking facilities" "" intro(4N)
.xx "" "" "networking: introduction to networking facilities" "" intro(4N)
.xx "" "" "networks: network name data base" "" networks(5)
.xx "" "creat: create a" "new file" "" creat(2)
.xx "" "open a file for reading or writing, or create a" "new file" "open:" open(2)
.xx "" "newfs: construct a" "new file system" "" newfs(8)
.xx "" "arcv: convert archives to" "new format" "" arcv(8)
.xx "" "fork: create a" "new process" "" fork(2)
.xx "" "vfork: spawn" "new process in a virtual memory efficient way" "" vfork(2)
.xx "" "login: login" "new user." "" csh(1)
.xx "" "adduser: procedure for adding" "new users" "" adduser(8)
.xx "aliases file" "" "newaliases: rebuild the data base for the mail" "" newaliases(1)
.xx "" "" "newfs: construct a new file system" "" newfs(8)
.xx "" "dbminit, fetch, store, delete, firstkey," "nextkey: data base subroutines" "" dbm(3X)
.xx "" "gettable: get" "NIC format host tables from a host" "" gettable(8C)
.xx "" "htable: convert" "NIC standard format host tables" "" htable(8)
.xx "" "vgrind: grind" "nice listings of programs" "" vgrind(1)
.xx "" "nice, nohup:" "run a command at low priority (sh only)" "" nice(1)
.xx "" "" "nice: run low priority process." "" csh(1)
.xx "" "" "nice: set program priority" "" nice(3C)
.xx "" "" "nlist: get entries from name list" "" nlist(3)
.xx "" "" "nm: print name list" "" nm(1)
.xx "priority aging, PFF, swapping, or processor/" "" "noage, nopff, noswap, on: run a command with" "" noage(8)
.xx "" "clri: clear i-" "node" "" clri(8)
.xx "" "nice," "nohup: run a command at low priority (sh only)" "" nice(1)
.xx "" "" "nohup: run command immune to hangups." "" csh(1)
.xx "" "setjmp, longjmp, _setjmp, _longjmp:" "non-local goto" "" setjmp(3)
.xx "aging, PFF, swapping, or processor migration" "noage" "nopff, noswap, on: run a command with priority" "" noage(8)
.xx "" "notify: request immediate" "notification." "" csh(1)
.xx "" "biff: be" "notified if mail arrives and who it is from" "" biff(1)
.xx "" "" "notify: request immediate notification." "" csh(1)
.xx "" "soelim: eliminate .so's from" "nroff input" "" soelim(1)
.xx "" "tbl: format tables for" "nroff or troff" "" tbl(1)
.xx "" "colcrt: filter" "nroff output for CRT previewing" "" colcrt(1)
.xx "" "" "nroff: text formatting" "" nroff(1)
.xx "" "troff," "nroff: text formatting and typesetting" "" troff(1)
.xx "" "deroff: remove" "nroff, troff, tbl and eqn constructs" "" deroff(1)
.xx "" "checknr: check" "nroff/troff files" "" checknr(1)
.xx "processor type truth value" "machid:" "ns32000, i386, pdp11, u3b, u3b2, u3b5, vax: get" "" machid(1)
.xx "network byte order" "htonl, htons," "ntohl, ntohs: convert values between host and" "" byteorder(3N)
.xx "host and network byte-order values" "htonl, htons, ntohl," "ntohs: convert" "" byteorder(3N)
.xx "" "" "null: data sink" "" null(4)
.xx "" "getrpcport: get RPC port" "number" "" getrpcport(3R)
.xx "" "version: display DYNIX version" "number" "" version(8)
.xx "" "" "number: convert Arabic numerals to English" "" number(6)
.xx "" "phones: remote host phone" "number data base" "" phones(5)
.xx "" "rpc: rpc program" "number data base" "" rpc(5)
.xx "" "arithmetic: provide drill in" "number facts" "" arithmetic(6)
.xx "" "factor, primes: factor a" "number, generate large primes" "" factor(6)
.xx "" "rand, srand: random" "number generator" "" rand(3C)
.xx "" "random, srandom, initstate, setstate: better random" "number generator; routines for changing generators" "" random(3)
.xx "" "L-dialcodes: UUCP phone" "number index file" "" l-dialcodes(5)
.xx "" "portmap: DARPA port to RPC program" "number mapper" "" portmap(8C)
.xx "" "m_get_numprocs: return" "number of child processes" "" m_get_numprocs(3P)
.xx "" "m_set_procs: set" "number of child processes" "" m_set_procs(3P)
.xx "" "cpus_online: returns the" "number of CPUs on-line" "" cpus_online(3P)
.xx "" "atof, atoi, atol: convert ASCII to" "numbers" "" atof(3)
.xx "" "fsirand: install random inode generation" "numbers" "" fsirand(8)
.xx "" "intro: introduction to system calls and error" "numbers" "" intro(2)
.xx "" "ncheck: generate names from i-" "numbers" "" ncheck(8)
.xx "" "number: convert Arabic" "numerals to English" "" number(6)
.xx "" "size: size of an" "object file" "" size(1)
.xx "" "lorder: find ordering relation for an" "object library" "" lorder(1)
.xx "" "what: show what versions of" "object modules were used to construct a file" "" what(1)
.xx "" "strings: find the printable strings in an" "object (or other binary) file" "" strings(1)
.xx "" "od:" "octal, decimal, hex, ascii dump" "" od(1)
.xx "" "" "od: octal, decimal, hex, ascii dump" "" od(1)
.xx "" "prmail: print out mail in the post" "office" "" prmail(1)
.xx "" "online, offline: bring processors online and" "offline" "" online(8)
.xx "" "online," "offline: bring processors online and offline" "" online(8)
.xx "line" "" "offline_all: take all but one active processor off" "" offline_all(3)
.xx "" "offline_all: take all but" "one active processor off line" "" offline_all(3)
.xx "" "" "onintr: process interrupts in command scripts." "" csh(1)
.xx "" "online, offline: bring processors" "online and offline" "" online(8)
.xx "" "" "online, offline: bring processors online and offline" "" online(8)
.xx "file" "open:" "open a file for reading or writing, or create a new" "" open(2)
.xx "" "fopen, freopen, fdopen:" "open a stream" "" fopen(3S)
.xx "" "flock: apply or remove an advisory lock on an" "open file" "" flock(2)
.xx "" "mmap: map an" "open file into the process's address space" "" mmap(2)
.xx "a new file" "" "open: open a file for reading or writing, or create" "" open(2)
.xx "closedir: directory operations" "" "opendir, readdir, telldir, seekdir, rewinddir," "" directory(3)
.xx "" "syslog," "openlog, closelog: control system log" "" syslog(3)
.xx "point, linemod, space, closepl: graphics/" "plot:" "openpl, erase, label, line, circle, arc, move, cont," "" plot(3X)
.xx "" "savecore: save a core dump of the" "operating system" "" savecore(8)
.xx "" "intro: introduction to system maintenance and" "operation commands" "" intro(8)
.xx "" "tgetstr, tgoto, tputs: terminal independent" "operation routines" "tgetent, tgetnum, tgetflag," termcap(3X)
.xx "" "bcopy, bcmp, bzero, ffs: bit and byte string" "operations" "" bstring(3)
.xx "" "telldir, seekdir, rewinddir, closedir: directory" "operations" "opendir, readdir," directory(3)
.xx "" "ether_ntoa, ether_ntohost: ethernet address mapping" "operations" "ether_aton, ether_hostton, ether_line," ethers(3N)
.xx "" "msgctl: message control" "operations" "" msgctl(2)
.xx "" "msgop, msgsnd, msgrcv: message" "operations" "" msgop(2)
.xx "" "semctl: semaphore control" "operations" "" semctl(2)
.xx "" "semop: semaphore" "operations" "" semop(2)
.xx "" "strcpy, strncpy, strlen, index, rindex: string" "operations" "strcat, strncat, strcmp, strncmp," string(3)
.xx "" "curses: screen functions with ``" "optimal'' cursor motion" "" curses(3X)
.xx "" "getopt: get" "option letter from argument vector" "" getopt(3X)
.xx "" "stty: set terminal" "options" "" stty(1)
.xx "" "getsockopt, setsockopt: get and set" "options on sockets" "" getsockopt(2)
.xx "" "ntohs: convert values between host and network byte" "order" "htonl, htons, ntohl," byteorder(3N)
.xx "" "lastcomm: show last commands executed in reverse" "order" "" lastcomm(1)
.xx "" "lorder: find" "ordering relation for an object library" "" lorder(1)
.xx "" "vi, view: screen" "oriented (visual) display editor based on ex" "" vi(1)
.xx "" "a.out: assembler and link editor" "output" "" a.out(5)
.xx "" "exit: terminate a process after flushing any pending" "output" "" exit(3)
.xx "" "fread, fwrite: buffered binary input/" "output" "" fread(3S)
.xx "" "ecvt, fcvt, gcvt:" "output conversion" "" ecvt(3)
.xx "" "printf, fprintf, sprintf: formatted" "output conversion" "" printf(3S)
.xx "" "fold: fold long lines for finite width" "output device" "" fold(1)
.xx "" "colcrt: filter nroff" "output for CRT previewing" "" colcrt(1)
.xx "" "stdio: standard buffered input/" "output package" "" intro(3S)
.xx "" "rwall: write to all users" "over a network" "" rwall(1)
.xx "" "foreach: loop" "over list of names." "" csh(1)
.xx "" "sendmail: send mail" "over the internet" "" sendmail(8)
.xx "" "proc_ctl: control" "over various process attributes" "" proc_ctl(2)
.xx "" "exec:" "overlay shell with specified command." "" csh(1)
.xx "" "chown: change" "owner" "" chown(8)
.xx "" "chown, fchown: change" "owner and group of a file" "" chown(2)
.xx "" "quot: summarize file system" "ownership" "" quot(8)
.xx "" "" "pac: printer/ploter accounting information" "" pac(8)
.xx "" "spray: spray" "packets" "" spray(8)
.xx "" "ping: send ICMP ECHO_REQUEST" "packets to network hosts" "" ping(8)
.xx "" "more," "page: file perusal filter for crt viewing" "" more(1)
.xx "" "getpagesize: get system" "page size" "" getpagesize(2)
.xx "" "pagesize: print system" "page size" "" pagesize(1)
.xx "" "miscellaneous: miscellaneous useful information" "pages" "" intro(7)
.xx "" "yppasswd: update user password in yellow" "pages" "" yppasswd(3R)
.xx "" "yp_order yp_master yperr_string ypprot_err: yellow" "pages client interface" "/yp_first yp_next yp_all" ypclnt(3N)
.xx "" "" "pagesize: print system page size" "" pagesize(1)
.xx "" "tk:" "paginator for the Tektronix 4014" "" tk(1)
.xx "" "swapon: specify additional device for" "paging and swapping" "" swapon(8)
.xx "" "drum:" "paging device" "" drum(4)
.xx "" "swapon: add a swap device for interleaved" "paging/swapping" "" swapon(2)
.xx "" "socketpair: create a" "pair of connected sockets" "" socketpair(2)
.xx "" "me: macros for formatting" "papers" "" me(7)
.xx "" "m_fork: execute a subprogram in" "parallel" "" m_fork(3P)
.xx "" "pdbx, dbx:" "parallel debugger" "" pdbx(1)
.xx "" "lp: Systech" "parallel line printer interface" "" lp(4)
.xx "" "intro: introduction to" "Parallel Programming Library" "" intro(3P)
.xx "" "ifconfig: configure network interface" "parameters" "" ifconfig(8C)
.xx "" "vm_ctl: examine and change virtual memory tuning" "parameters" "" vm_ctl(2)
.xx "" "vmtune: tune system-wide virtual-memory" "parameters" "" vmtune(8)
.xx "" "pmap: display or alter" "parameters of virtual-to-physical mapping devices" "" pmap(8)
.xx "" "diskpart: calculate default disk" "partition sizes" "" diskpart(8)
.xx "" "pc:" "Pascal compiler" "" pc(1)
.xx "" "pxp:" "Pascal execution profiler" "" pxp(1)
.xx "" "pmerge:" "pascal file merger" "" pmerge(1)
.xx "" "" "passwd: change login password" "" passwd(1)
.xx "" "" "passwd: password file" "" passwd(5)
.xx "" "getpass: read a" "password" "" getpass(3)
.xx "" "passwd: change login" "password" "" passwd(1)
.xx "" "passwd:" "password file" "" passwd(5)
.xx "" "vipw: edit the" "password file" "" vipw(8)
.xx "" "getpwuid, getpwnam, setpwent, endpwent: get" "password file entry" "getpwent," getpwent(3)
.xx "" "yppasswd: update user" "password in yellow pages" "" yppasswd(3R)
.xx "" "bp: binary" "patcher" "" bp(8)
.xx "" "getwd: get current working directory" "pathname" "" getwd(3)
.xx "" "USERFILE: UUCP" "pathname permissions file" "" userfile(5)
.xx "" "which: locate a program file including aliases and" "paths (csh only)" "" which(1)
.xx "" "grep, egrep, fgrep: search a file for a" "pattern" "" grep(1)
.xx "" "awk:" "pattern scanning and processing language" "" awk(1)
.xx "" "" "pause: stop until signal" "" pause(3C)
.xx "" "" "pc: Pascal compiler" "" pc(1)
.xx "" "popen," "pclose: initiate I/O to/from a process" "" popen(3)
.xx "" "" "pdbx, dbx: parallel debugger" "" pdbx(1)
.xx "truth value" "machid: ns32000, i386," "pdp11, u3b, u3b2, u3b5, vax: get processor type" "" machid(1)
.xx "" "getpeername: get name of connected" "peer" "" getpeername(2)
.xx "" "exit: terminate a process after flushing any" "pending output" "" exit(3)
.xx "" "copy2:" "perform a standalone data transfer" "" copy2(8S)
.xx "" "copy:" "perform a standalone simple data transfer" "" copy(8S)
.xx "" "ret:" "perform a standalone streamer tape retension" "" ret(8S)
.xx "" "L.cmds: UUCP remote command" "permissions file" "" l.cmds(5)
.xx "" "USERFILE: UUCP pathname" "permissions file" "" userfile(5)
.xx "" "mesg:" "permit or deny messages" "" mesg(1)
.xx "" "ptx:" "permuted index" "" ptx(1)
.xx "" "limit: alter" "per-process resource limitations." "" csh(1)
.xx "" "" "perror, sys_errlist, sys_nerr: system error messages" "" perror(3)
.xx "" "sticky: executable files with" "persistent text" "" sticky(8)
.xx "" "more, page: file" "perusal filter for crt viewing" "" more(1)
.xx "" "zmore: file" "perusal filter for crt viewing of compressed text" "" zmore(1)
.xx "" "/noswap, on: run a command with priority aging," "PFF, swapping, or processor migration disabled" "" noage(8)
.xx "" "phones: remote host" "phone number data base" "" phones(5)
.xx "" "L-dialcodes: UUCP" "phone number index file" "" l-dialcodes(5)
.xx "" "" "phones: remote host phone number data base" "" phones(5)
.xx "" "pti:" "phototypesetter interpreter" "" pti(1)
.xx "" "tc:" "photoypesetter simulator" "" tc(1)
.xx "space" "pmap: map" "physical addresses into process's virtual address" "" pmap(4)
.xx "" "pmap: display or alter parameters of virtual-to-" "physical mapping devices" "" pmap(8)
.xx "packets to network hosts" "" "ping: send ICMP ECHO_REQUEST" "" ping(8)
.xx "" "pipe: create an interprocess" "communication channel" "" pipe(2)
.xx "" "tee:" "pipe fitting" "" tee(1)
.xx "" "bg:" "place job in background." "" csh(1)
.xx "" "fish:" "play ``Go Fish''" "" fish(6)
.xx "" "boggle:" "play the game of boggle" "" boggle(6)
.xx "" "worm:" "Play the growing worm game" "" worm(6)
.xx "" "" "plot: graphics filters" "" plot(1G)
.xx "" "" "plot: graphics interface" "" plot(5)
.xx "cont, point, linemod, space, closepl: graphics/" "" "plot: openpl, erase, label, line, circle, arc, move," "" plot(3X)
.xx "" "pac: printer/" "ploter accounting information" "" pac(8)
.xx "" "vtroff: troff to a raster" "plotter" "" vtroff(1)
.xx "" "vpr, vprm, vpq, vprint: raster printer/" "plotter spooler" "" vpr(1)
.xx "virtual-to-physical mapping devices" "" "pmap: display or alter parameters of" "" pmap(8)
.xx "address space" "" "pmap: map physical addresses into process's virtual" "" pmap(4)
.xx "" "" "pmerge: pascal file merger" "" pmerge(1)
.xx "" "/openpl, erase, label, line, circle, arc, move, cont," "point, linemod, space, closepl: graphics interface" "" plot(3X)
.xx "" "lseek: move read/write" "pointer" "" lseek(2)
.xx "" "uupoll:" "poll a remote UUCP site" "" uupoll(8C)
.xx "" "popd:" "pop shell directory stack." "" csh(1)
.xx "" "" "popd: pop shell directory stack." "" csh(1)
.xx "" "" "popen, pclose: initiate I/O to/from a process" "" popen(3)
.xx "" "ttytype: data base of terminal types by" "port" "" ttytype(5)
.xx "" "getrpcport: get RPC" "port number" "" getrpcport(3R)
.xx "" "portmap: DARPA" "port to RPC program number mapper" "" portmap(8C)
.xx "" "prmail: print out mail in the" "post office" "" prmail(1)
.xx "root" "exp, log, log10," "pow, sqrt: exponential, logarithm, power, square" "" exp(3M)
.xx "" "exp, log, log10, pow, sqrt: exponential, logarithm," "power, square root" "" exp(3M)
.xx "" "" "pr: print file" "" pr(1)
.xx "" "print:" "pr to the line printer" "" print(1)
.xx "" "bc: arbitrary-" "precision arithmetic language" "" bc(1)
.xx "" "monitor, monstartup, moncontrol:" "prepare execution profile" "" monitor(3)
.xx "" "cpp: the C language" "preprocessor" "" cpp(1)
.xx "" "colcrt: filter nroff output for CRT" "previewing" "" colcrt(1)
.xx "" "factor, primes: factor a number, generate large" "primes" "" factor(6)
.xx "" "factor," "primes: factor a number, generate large primes" "" factor(6)
.xx "" "types:" "primitive system data types" "" types(5)
.xx "" "cat: catenate and" "print" "" cat(1)
.xx "" "lpr: off line" "print" "" lpr(1)
.xx "" "fortune:" "print a random, hopefully interesting, adage" "" fortune(6)
.xx "" "date:" "print and set the date" "" date(1)
.xx "" "cal:" "print calendar" "" cal(1)
.xx "" "hashstat:" "print command hashing statistics." "" csh(1)
.xx "" "jobs:" "print current job list." "" csh(1)
.xx "" "whoami:" "print effective current user id" "" whoami(1)
.xx "" "sestat:" "print Ethernet statistics" "" sestat(8)
.xx "" "pr:" "print file" "" pr(1)
.xx "" "fpr:" "print Fortran file" "" fpr(1)
.xx "" "history:" "print history event list." "" csh(1)
.xx "" "hostid: set or" "print identifier of current host system" "" hostid(1)
.xx "" "banner:" "print large banner on printer" "" banner(6)
.xx "information about RCS files" "rlog:" "print log messages and other" "" rlog(1)
.xx "" "nm:" "print name list" "" nm(1)
.xx "" "hostname: set or" "print name of current host system" "" hostname(1)
.xx "" "vfontinfo: inspect and" "print out information about UNIX fonts" "" vfontinfo(1)
.xx "" "prmail:" "print out mail in the post office" "" prmail(1)
.xx "" "printenv:" "print out the environment" "" printenv(1)
.xx "" "man: find manual information by keywords;" "print out the manual" "" man(1)
.xx "" "" "print: pr to the line printer" "" print(1)
.xx "" "pstat:" "print system facts" "" pstat(8)
.xx "" "pagesize:" "print system page size" "" pagesize(1)
.xx "" "diction, explain:" "print wordy sentences; thesaurus for diction" "" diction(1)
.xx "" "explain, diction:" "print wordy sentences; thesaurus for diction" "" explain(1)
.xx "" "atob, tarmail, untarmail: encode/decode binary to" "printable ASCII" "btoa," btoa(1)
.xx "file" "strings: find the" "printable strings in an object (or other binary)" "" strings(1)
.xx "" "" "printcap: printer capability data base" "" printcap(5)
.xx "" "" "printenv: print out the environment" "" printenv(1)
.xx "" "banner: print large banner on" "printer" "" banner(6)
.xx "" "print: pr to the line" "printer" "" print(1)
.xx "" "printcap:" "printer capability data base" "" printcap(5)
.xx "" "lpc: line" "printer control program" "" lpc(8)
.xx "" "lpd: line" "printer daemon" "" lpd(8)
.xx "" "lp: Systech parallel line" "printer interface" "" lp(4)
.xx "" "lprm: remove jobs from the line" "printer spooling queue" "" lprm(1)
.xx "" "pac:" "printer/ploter accounting information" "" pac(8)
.xx "" "vpr, vprm, vpq, vprint: raster" "printer/plotter spooler" "" vpr(1)
.xx "conversion" "" "printf, fprintf, sprintf: formatted output" "" printf(3S)
.xx "" "getpriority, setpriority: get/set program scheduling" "priority" "" getpriority(2)
.xx "" "nice: set program" "priority" "" nice(3C)
.xx "" "noage, nopff, noswap, on: run a command with" "priority aging, PFF, swapping, or processor/" "" noage(8)
.xx "" "renice: alter" "priority of running processes" "" renice(8)
.xx "" "nice: run low" "priority process." "" csh(1)
.xx "" "nice, nohup: run a command at low" "priority (sh only)" "" nice(1)
.xx "" "brk, sbrk: change" "private data segment size" "" brk(3P)
.xx "" "" "prmail: print out mail in the post office" "" prmail(1)
.xx "" "" "proc_ctl: control over various process attributes" "" proc_ctl(2)
.xx "" "rpc: library routines for remote" "procedure calls" "" rpc(3N)
.xx "" "adduser:" "procedure for adding new users" "" adduser(8)
.xx "" "reboot: DYNIX bootstrapping" "procedures" "" reboot(8)
.xx "" "nice: run low priority" "process." "" csh(1)
.xx "" "stop: halt a job or" "process." "" csh(1)
.xx "" "_exit: terminate a" "process" "" exit(2)
.xx "" "fork: create a new" "process" "" fork(2)
.xx "" "kill: send signal to a" "process" "" kill(2)
.xx "" "popen, pclose: initiate I/O to/from a" "process" "" popen(3)
.xx "" "universe: change the universe for a" "process" "" universe(2)
.xx "" "wait: await completion of" "process" "" wait(1)
.xx "" "exit: terminate a" "process after flushing any pending output" "" exit(3)
.xx "" "proc_ctl: control over various" "process attributes" "" proc_ctl(2)
.xx "" "m_single, m_multi: mark single-" "process code section" "" m_single(3P)
.xx "" "init:" "process control initialization" "" init(8)
.xx "" "m_park_procs, m_rele_procs: suspend and resume child" "process execution" "" m_park_procs(3P)
.xx "" "getpgrp: get" "process group" "" getpgrp(2)
.xx "" "killpg: send signal to a" "process group" "" killpg(2)
.xx "" "setpgrp: set" "process group" "" setpgrp(2)
.xx "" "getpid, getppid: get" "process identification" "" getpid(2)
.xx "" "m_get_myid: return" "process identification" "" m_get_myid(3P)
.xx "" "vfork: spawn new" "process in a virtual memory efficient way" "" vfork(2)
.xx "" "onintr:" "process interrupts in command scripts." "" csh(1)
.xx "" "limit: alter per-" "process resource limitations." "" csh(1)
.xx "" "ps:" "process status" "" ps(1)
.xx "" "times: get" "process times" "" times(3C)
.xx "" "tmp_affinity: bind a" "process to a processor" "" tmp_affinity(2)
.xx "" "wait, wait3: wait for" "process to terminate" "" wait(2)
.xx "" "ptrace:" "process trace" "" ptrace(2)
.xx "" "kill: terminate a" "process with extreme prejudice" "" kill(1)
.xx "" "kill: kill jobs and" "processes." "" csh(1)
.xx "" "gcore: get core images of running" "processes" "" gcore(1)
.xx "" "m_get_numprocs: return number of child" "processes" "" m_get_numprocs(3P)
.xx "" "m_kill_procs: kill child" "processes" "" m_kill_procs(3P)
.xx "" "m_set_procs: set number of child" "processes" "" m_set_procs(3P)
.xx "" "renice: alter priority of running" "processes" "" renice(8)
.xx "" "wait: wait for background" "processes to complete." "" csh(1)
.xx "" "awk: pattern scanning and" "processing language" "" awk(1)
.xx "" "halt: stop the" "processor" "" halt(8)
.xx "" "m4: macro" "processor" "" m4(1)
.xx "" "reboot: reboot system or halt" "processor" "" reboot(2)
.xx "" "tmp_affinity: bind a process to a" "processor" "" tmp_affinity(2)
.xx "" "tmp_ctl: multi-" "processor control" "" tmp_ctl(2)
.xx "" "run a command with priority aging, PFF, swapping, or" "processor migration disabled" "/nopff, noswap, on:" noage(8)
.xx "" "offline_all: take all but one active" "processor off line" "" offline_all(3)
.xx "" "ns32000, i386, pdp11, u3b, u3b2, u3b5, vax: get" "processor type truth value" "machid:" machid(1)
.xx "" "online, offline: bring" "processors online and offline" "" online(8)
.xx "" "mmap: map an open file into the" "process's address space" "" mmap(2)
.xx "" "munmap: unmap part of the" "process's address space" "" munmap(2)
.xx "" "pmap: map physical addresses into" "process's virtual address space" "" pmap(4)
.xx "" "" "prof: display profile data" "" prof(1)
.xx "" "" "profil: execution time profile" "" profil(2)
.xx "" "monitor, monstartup, moncontrol: prepare execution" "profile" "" monitor(3)
.xx "" "profil: execution time" "profile" "" profil(2)
.xx "" "gprof: display call graph" "profile data" "" gprof(1)
.xx "" "prof: display" "profile data" "" prof(1)
.xx "" "pxp: Pascal execution" "profiler" "" pxp(1)
.xx "" "drtest: standalone disk test" "program" "" drtest(8S)
.xx "" "end, etext, edata: last locations in" "program" "" end(3)
.xx "" "finger: user information lookup" "program" "" finger(1)
.xx "" "ftp: ARPANET file transfer" "program" "" ftp(1C)
.xx "" "id: file identification" "program" "" id(1)
.xx "" "lpc: line printer control" "program" "" lpc(8)
.xx "" "lpq: spool queue examination" "program" "" lpq(1)
.xx "" "msgs: system messages and junk mail" "program" "" msgs(1)
.xx "" "mt: magnetic tape manipulating" "program" "" mt(1)
.xx "" "tftp: trivial file transfer" "program" "" tftp(1C)
.xx "" "units: conversion" "program" "" units(1)
.xx "" "whereis: locate source, binary, and or manual for" "program" "" whereis(1)
.xx "" "cb: C" "program beautifier" "" cb(1)
.xx "" "remote virtual terminal/fileserver for standalone" "program development" "host:" host(1)
.xx "" "which: locate a" "program file including aliases and paths (csh only)" "" which(1)
.xx "" "make: maintain" "program groups" "" make(1)
.xx "" "rpc: rpc" "program number data base" "" rpc(5)
.xx "" "portmap: DARPA port to RPC" "program number mapper" "" portmap(8C)
.xx "" "boot: run a standalone" "program or bring up DYNIX" "" boot(8S)
.xx "" "nice: set" "program priority" "" nice(3C)
.xx "" "getpriority, setpriority: get/set" "program scheduling priority" "" getpriority(2)
.xx "" "indent: indent and format C" "program source" "" indent(1)
.xx "" "assert:" "program verification" "" assert(3X)
.xx "" "lint: a C" "program verifier" "" lint(1)
.xx "" "intro: introduction to Parallel" "Programming Library" "" intro(3P)
.xx "" "lex: generator of lexical analysis" "programs" "" lex(1)
.xx "" "struct: structure Fortran" "programs" "" struct(1)
.xx "" "vgrind: grind nice listings of" "programs" "" vgrind(1)
.xx "" "xstr: extract strings from C" "programs to implement shared strings" "" xstr(1)
.xx "" "if: general" "properties of network interfaces" "" if(4N)
.xx "" "arp: Address Resolution" "Protocol" "" arp(4P)
.xx "" "ddp: AppleTalk Datagram Delivery" "Protocol" "" ddp(4P)
.xx "" "icmp: Internet Control Message" "Protocol" "" icmp(4P)
.xx "" "ip: Internet" "Protocol" "" ip(4P)
.xx "" "tcp: Internet Transmission Control" "Protocol" "" tcp(4P)
.xx "" "telnet: user interface to the TELNET" "protocol" "" telnet(1C)
.xx "" "udp: Internet User Datagram" "Protocol" "" udp(4P)
.xx "" "getprotobyname, setprotoent, endprotoent: get" "protocol entry" "getprotoent, getprotobynumber," getprotoent(3N)
.xx "" "appletalk: AppleTalk" "protocol family" "" appletalk(4F)
.xx "" "inet: Internet" "protocol family" "" inet(4F)
.xx "" "rmt: remote magtape" "protocol module" "" rmt(8C)
.xx "" "protocols:" "protocol name data base" "" protocols(5)
.xx "" "ftpd: DARPA Internet File Transfer" "Protocol server" "" ftpd(8C)
.xx "" "telnetd: DARPA TELNET" "protocol server" "" telnetd(8C)
.xx "" "tftpd: DARPA Trivial File Transfer" "Protocol server" "" tftpd(8C)
.xx "" "trpt: transliterate" "protocol trace" "" trpt(8C)
.xx "" "" "protocols: protocol name data base" "" protocols(5)
.xx "" "mkproto: construct a" "prototype file system" "" mkproto(8)
.xx "" "arithmetic:" "provide drill in number facts" "" arithmetic(6)
.xx "" "false, true:" "provide truth values" "" false(1)
.xx "" "true, false:" "provide truth values" "" true(1)
.xx "" "" "ps: process status" "" ps(1)
.xx "" "pty:" "pseudo terminal driver" "" pty(4)
.xx "" "getpseudotty, ispseudotty: get or query" "pseudo terminals" "" getpseudotty(3)
.xx "" "" "psignal, sys_siglist: system signal messages" "" psignal(3)
.xx "" "" "pstat: print system facts" "" pstat(8)
.xx "" "" "pti: phototypesetter interpreter" "" pti(1)
.xx "" "time," "ptime: time a command" "" time(1)
.xx "" "" "ptrace: process trace" "" ptrace(2)
.xx "" "" "ptx: permuted index" "" ptx(1)
.xx "" "" "pty: pseudo terminal driver" "" pty(4)
.xx "" "ungetc:" "push character back into input stream" "" ungetc(3S)
.xx "" "pushd:" "push shell directory stack." "" csh(1)
.xx "" "" "pushd: push shell directory stack." "" csh(1)
.xx "" "puts, fputs:" "put a string on a stream" "" puts(3S)
.xx "" "putc, putchar, fputc, putw:" "put character or word on a stream" "" putc(3S)
.xx "stream" "putc," "putchar, fputc, putw: put character or word on a" "" putc(3S)
.xx "" "" "puts, fputs: put a string on a stream" "" puts(3S)
.xx "" "putc, putchar, fputc," "putw: put character or word on a stream" "" putc(3S)
.xx "" "" "pwd: working directory name" "" pwd(1)
.xx "" "" "pxp: Pascal execution profiler" "" pxp(1)
.xx "" "" "qsort: quicker sort" "" qsort(3)
.xx "" "getpseudotty, ispseudotty: get or" "query pseudo terminals" "" getpseudotty(3)
.xx "" "insque, remque: insert/remove element from a" "queue" "" insque(3)
.xx "" "lprm: remove jobs from the line printer spooling" "queue" "" lprm(1)
.xx "" "msgget: get message" "queue" "" msgget(2)
.xx "" "uuq: examine or manipulate the uucp" "queue" "" uuq(1C)
.xx "" "lpq: spool" "queue examination program" "" lpq(1)
.xx "" "uucico, uucpd: transfer files" "queued by uucp or uux" "" uucico(8C)
.xx "" "qsort:" "quicker sort" "" qsort(3)
.xx "" "" "quiz: test your knowledge" "" quiz(6)
.xx "" "" "quot: summarize file system ownership" "" quot(8)
.xx "" "quotacheck: filesystem" "quota consistency checker" "" quotacheck(8)
.xx "" "" "quota: display disk usage and limits" "" quota(1)
.xx "" "rquotad: remote" "quota server" "" rquotad(8C)
.xx "" "" "quotacheck: filesystem quota consistency checker" "" quotacheck(8)
.xx "" "" "quotactl: manipulate disk quotas" "" quotactl(2)
.xx "" "quotaon," "quotaoff: turn filesystem quotas on and off" "" quotaon(8)
.xx "" "edquota: edit user" "quotas" "" edquota(8)
.xx "" "quotactl: manipulate disk" "quotas" "" quotactl(2)
.xx "" "repquota: summarize" "quotas for a filesystem" "" repquota(8)
.xx "" "quotaon, quotaoff: turn filesystem" "quotas on and off" "" quotaon(8)
.xx "" "" "rain: animated raindrops display" "" rain(6)
.xx "" "rain: animated" "raindrops display" "" rain(6)
.xx "" "" "rand, srand: random number generator" "" rand(3C)
.xx "" "fortune: print a" "random, hopefully interesting, adage" "" fortune(6)
.xx "" "fsirand: install" "random inode generation numbers" "" fsirand(8)
.xx "" "ranlib: convert archives to" "random libraries" "" ranlib(1)
.xx "" "rand, srand:" "random number generator" "" rand(3C)
.xx "" "random, srandom, initstate, setstate: better" "random number generator; routines for changing/" "" random(3)
.xx "number generator; routines for changing generators" "" "random, srandom, initstate, setstate: better random" "" random(3)
.xx "" "" "ranlib: convert archives to random libraries" "" ranlib(1)
.xx "" "vtroff: troff to a" "raster plotter" "" vtroff(1)
.xx "" "vpr, vprm, vpq, vprint:" "raster printer/plotter spooler" "" vpr(1)
.xx "" "" "rc: command script for auto-reboot and daemons" "" rc(8)
.xx "stream to a remote command" "" "rcmd, rresvport, ruserok: routines for returning a" "" rcmd(3X)
.xx "" "" "rcp: remote file copy" "" rcp(1C)
.xx "" "" "rcs: change RCS file attributes" "" rcs(1)
.xx "" "rcsintro: introduction to" "RCS commands" "" rcsintro(1)
.xx "" "rcsfile: format of" "RCS file" "" rcsfile(5)
.xx "" "rcs: change" "RCS file attributes" "" rcs(1)
.xx "" "rlog: print log messages and other information about" "RCS files" "" rlog(1)
.xx "" "ci: check in" "RCS revisions" "" ci(1)
.xx "" "co: check out" "RCS revisions" "" co(1)
.xx "" "rcsdiff: compare" "RCS revisions" "" rcsdiff(1)
.xx "" "rcsmerge: merge" "RCS revisions" "" rcsmerge(1)
.xx "" "" "rcsdiff: compare RCS revisions" "" rcsdiff(1)
.xx "" "" "rcsfile: format of RCS file" "" rcsfile(5)
.xx "" "" "rcsintro: introduction to RCS commands" "" rcsintro(1)
.xx "" "" "rcsmerge: merge RCS revisions" "" rcsmerge(1)
.xx "" "" "rdump: file system dump across the network" "" rdump(8C)
.xx "" "getpass:" "read a password" "" getpass(3)
.xx "" "source:" "read commands from file." "" csh(1)
.xx "" "berkst:" "read in symbol and string tables in berkeley format" "" berkst(3)
.xx "" "read, readv:" "read input" "" read(2)
.xx "" "/continue, cd, eval, exec, exit, export, login," "read, readonly, set, shift, [, times, trap, umask,/" "" sh(1)
.xx "" "" "read, readv: read input" "" read(2)
.xx "" "readclink:" "read value of a conditional symbolic link" "" readclink(2)
.xx "" "readlink:" "read value of a symbolic link" "" readlink(2)
.xx "" "" "readclink: read value of a conditional symbolic link" "" readclink(2)
.xx "directory operations" "opendir," "readdir, telldir, seekdir, rewinddir, closedir:" "" directory(3)
.xx "" "open: open a file for" "reading or writing, or create a new file" "" open(2)
.xx "" "" "readlink: read value of a symbolic link" "" readlink(2)
.xx "" "/continue, cd, eval, exec, exit, export, login, read," "readonly, set, shift, [, times, trap, umask, wait:/" "" sh(1)
.xx "" "read," "readv: read input" "" read(2)
.xx "" "bad144:" "read/write dec standard 144 bad sector information" "" bad144(8)
.xx "" "lseek: move" "read/write pointer" "" lseek(2)
.xx "" "setregid: set" "real and effective group ID" "" setregid(2)
.xx "" "setreuid: set" "real and effective user ID's" "" setreuid(2)
.xx "" "malloc, free," "realloc, calloc, alloca: memory allocator" "" malloc(3)
.xx "" "symorder:" "rearrange name list" "" symorder(1)
.xx "" "rc: command script for auto-" "reboot and daemons" "" rc(8)
.xx "" "" "reboot: DYNIX bootstrapping procedures" "" reboot(8)
.xx "" "" "reboot: reboot system or halt processor" "" reboot(2)
.xx "" "reboot:" "reboot system or halt processor" "" reboot(2)
.xx "" "fastboot, fasthalt:" "reboot/halt the system without checking the disks" "" fastboot(8)
.xx "" "newaliases:" "rebuild the data base for the mail aliases file" "" newaliases(1)
.xx "" "recv, recvfrom, recvmsg:" "receive a message from a socket" "" recv(2)
.xx "" "mail: send and" "receive mail" "" mail(1)
.xx "" "binmail: send or" "receive mail among users" "" binmail(1)
.xx "" "rmail: handle remote mail" "received via uucp" "" rmail(1)
.xx "" "" "re_comp, re_exec: regular expression handler" "" regex(3)
.xx "" "rehash:" "recompute command hash table." "" csh(1)
.xx "" "lockf:" "record locking on files" "" lockf(3C)
.xx "" "utmp, wtmp: login" "records" "" utmp(5)
.xx "" "eyacc: modified yacc allowing much improved error" "recovery" "" eyacc(1)
.xx "socket" "" "recv, recvfrom, recvmsg: receive a message from a" "" recv(2)
.xx "" "recv, recvfrom," "recvmsg: receive a message from a socket" "" recv(2)
.xx "" "eval:" "re-evaluate shell data." "" csh(1)
.xx "" "re_comp," "re_exec: regular expression handler" "" regex(3)
.xx "documents" "" "refer: find and insert literature references in" "" refer(1)
.xx "" "build inverted index for a bibliography, find" "references in a bibliography" "indxbib, lookbib:" lookbib(1)
.xx "" "refer: find and insert literature" "references in documents" "" refer(1)
.xx "" "re_comp, re_exec:" "regular expression handler" "" regex(3)
.xx "" "" "rehash: recompute command hash table." "" csh(1)
.xx "" "comm: select or" "reject lines common to two sorted files" "" comm(1)
.xx "" "lorder: find ordering" "relation for an object library" "" lorder(1)
.xx "" "sigpause: atomically" "release blocked signals and wait for interrupt" "" sigpause(2)
.xx "" "strip: remove symbols and" "relocation bits" "" strip(1)
.xx "" "leave:" "remind you when you have to leave" "" leave(1)
.xx "" "calendar:" "reminder service" "" calendar(1)
.xx "" "ruserok: routines for returning a stream to a" "remote command" "rcmd, rresvport," rcmd(3X)
.xx "" "rexec: return stream to a" "remote command" "" rexec(3X)
.xx "" "L.cmds: UUCP" "remote command permissions file" "" l.cmds(5)
.xx "" "rexecd:" "remote execution server" "" rexecd(8C)
.xx "" "rcp:" "remote file copy" "" rcp(1C)
.xx "" "uusend: send a file to a" "remote host" "" uusend(1C)
.xx "" "L.sys: UUCP" "remote host description file" "" l.sys(5)
.xx "" "remote:" "remote host description file" "" remote(5)
.xx "" "phones:" "remote host phone number data base" "" phones(5)
.xx "" "rlogin:" "remote login" "" rlogin(1C)
.xx "" "rlogind:" "remote login server" "" rlogind(8C)
.xx "" "rnusers, rusers: return information about users on" "remote machines" "" rnusers(3R)
.xx "" "rwall: write to specified" "remote machines" "" rwall(3R)
.xx "" "rmt:" "remote magtape protocol module" "" rmt(8C)
.xx "" "rmail: handle" "remote mail received via uucp" "" rmail(1)
.xx "" "rpc: library routines for" "remote procedure calls" "" rpc(3N)
.xx "" "rquotad:" "remote quota server" "" rquotad(8C)
.xx "" "" "remote: remote host description file" "" remote(5)
.xx "" "rsh:" "remote shell" "" rsh(1C)
.xx "" "rshd:" "remote shell server" "" rshd(8C)
.xx "" "tip, cu: connect to a" "remote system" "" tip(1C)
.xx "" "uupoll: poll a" "remote UUCP site" "" uupoll(8C)
.xx "program development" "host:" "remote virtual terminal/fileserver for standalone" "" host(1)
.xx "" "rmtab:" "remotely mounted file system table" "" rmtab(5)
.xx "" "mount: keep track of" "remotely mounted filesystems" "" mount(3R)
.xx "" "rmdir:" "remove a directory file" "" rmdir(2)
.xx "" "unalias:" "remove aliases." "" csh(1)
.xx "" "flock: apply or" "remove an advisory lock on an open file" "" flock(2)
.xx "" "colrm:" "remove columns from a file" "" colrm(1)
.xx "" "unlink:" "remove directory entry" "" unlink(2)
.xx "" "insque, remque: insert/" "remove element from a queue" "" insque(3)
.xx "" "unsetenv:" "remove environment variables." "" csh(1)
.xx "" "unifdef:" "remove ifdef'ed lines" "" unifdef(1)
.xx "" "lprm:" "remove jobs from the line printer spooling queue" "" lprm(1)
.xx "" "deroff:" "remove nroff, troff, tbl and eqn constructs" "" deroff(1)
.xx "" "unlimit:" "remove resource limitiations." "" csh(1)
.xx "" "strip:" "remove symbols and relocation bits" "" strip(1)
.xx "" "rmdir, rm:" "remove (unlink) directories or files" "" rmdir(1)
.xx "" "rm, rmdir:" "remove (unlink) files or directories" "" rm(1)
.xx "" "insque," "remque: insert/remove element from a queue" "" insque(3)
.xx "" "" "rename: change the name of a file" "" rename(2)
.xx "" "mv: move or" "rename files" "" mv(1)
.xx "" "" "renice: alter priority of running processes" "" renice(8)
.xx "" "fsck: file system consistency check and interactive" "repair" "" fsck(8)
.xx "" "file system consistency check and interactive" "repair" "fsck: standalone" fsck(8S)
.xx "" "while:" "repeat commands conditionally." "" csh(1)
.xx "" "" "repeat: execute command repeatedly." "" csh(1)
.xx "" "uniq: report" "repeated lines in a file" "" uniq(1)
.xx "" "repeat: execute command" "repeatedly." "" csh(1)
.xx "" "yes: be" "repetitively affirmative" "" yes(1)
.xx "" "df:" "report free disk space on file systems" "" df(1)
.xx "" "iostat:" "report I/O statistics" "" iostat(1)
.xx "" "mailbug: submit a bug" "report or enhancement request" "" mailbug(1)
.xx "" "uniq:" "report repeated lines in a file" "" uniq(1)
.xx "" "rpcinfo:" "report RPC information" "" rpcinfo(8)
.xx "" "vmstat:" "report virtual memory statistics" "" vmstat(1)
.xx "" "fseek, ftell, rewind:" "reposition a stream" "" fseek(3S)
.xx "" "" "repquota: summarize quotas for a filesystem" "" repquota(8)
.xx "" "xdr: library routines for external data" "representation" "" xdr(3N)
.xx "" "mailbug: submit a bug report or enhancement" "request" "" mailbug(1)
.xx "" "notify:" "request immediate notification." "" csh(1)
.xx "" "lock:" "reserve a terminal" "" lock(1)
.xx "" "" "reset: reset the teletype bits to a sensible state" "" reset(1)
.xx "" "reset:" "reset the teletype bits to a sensible state" "" reset(1)
.xx "" "arp: address" "resolution display and control" "" arp(8C)
.xx "" "arp: Address" "Resolution Protocol" "" arp(4P)
.xx "" "getrlimit, setrlimit: control maximum system" "resource consumption" "" getrlimit(2)
.xx "" "vlimit: control maximum system" "resource consumption" "" vlimit(3C)
.xx "" "limit: alter per-process" "resource limitations." "" csh(1)
.xx "" "unlimit: remove" "resource limitiations." "" csh(1)
.xx "" "getrusage: get information about" "resource utilization" "" getrusage(2)
.xx "" "vtimes: get information about" "resource utilization" "" vtimes(3C)
.xx "" "restore: incremental file system" "restore" "" restore(8)
.xx "" "rrestore:" "restore a file system dump across the network" "" rrestore(8C)
.xx "" "" "restore: incremental file system restore" "" restore(8)
.xx "" "m_park_procs, m_rele_procs: suspend and" "resume child process execution" "" m_park_procs(3P)
.xx "" "suspend: suspend a shell," "resuming its superior." "" csh(1)
.xx "" "" "ret: perform a standalone streamer tape retension" "" ret(8S)
.xx "" "ret: perform a standalone streamer tape" "retension" "" ret(8S)
.xx "" "rnusers, rusers:" "return information about users on remote machines" "" rnusers(3R)
.xx "" "m_get_numprocs:" "return number of child processes" "" m_get_numprocs(3P)
.xx "" "m_get_myid:" "return process identification" "" m_get_myid(3P)
.xx "" "rexec:" "return stream to a remote command" "" rexec(3X)
.xx "" "rcmd, rresvport, ruserok: routines for" "returning a stream to a remote command" "" rcmd(3X)
.xx "" "cpus_online:" "returns the number of CPUs on-line" "" cpus_online(3P)
.xx "" "" "rev: reverse lines of a file" "" rev(1)
.xx "" "col: filter" "reverse line feeds" "" col(1)
.xx "" "rev:" "reverse lines of a file" "" rev(1)
.xx "" "lastcomm: show last commands executed in" "reverse order" "" lastcomm(1)
.xx "" "ci: check in RCS" "revisions" "" ci(1)
.xx "" "co: check out RCS" "revisions" "" co(1)
.xx "" "rcsdiff: compare RCS" "revisions" "" rcsdiff(1)
.xx "" "rcsmerge: merge RCS" "revisions" "" rcsmerge(1)
.xx "" "fseek, ftell," "rewind: reposition a stream" "" fseek(3S)
.xx "" "opendir, readdir, telldir, seekdir," "rewinddir, closedir: directory operations" "" directory(3)
.xx "" "" "rexec: return stream to a remote command" "" rexec(3X)
.xx "" "" "rexecd: remote execution server" "" rexecd(8C)
.xx "" "strcmp, strncmp, strcpy, strncpy, strlen, index," "rindex: string operations" "strcat, strncat," string(3)
.xx "information about RCS files" "" "rlog: print log messages and other" "" rlog(1)
.xx "" "" "rlogin: remote login" "" rlogin(1C)
.xx "" "" "rlogind: remote login server" "" rlogind(8C)
.xx "" "rmdir," "rm: remove (unlink) directories or files" "" rmdir(1)
.xx "" "" "rm, rmdir: remove (unlink) files or directories" "" rm(1)
.xx "" "" "rmail: handle remote mail received via uucp" "" rmail(1)
.xx "" "" "rmdir: remove a directory file" "" rmdir(2)
.xx "" "rm," "rmdir: remove (unlink) files or directories" "" rm(1)
.xx "" "" "rmdir, rm: remove (unlink) directories or files" "" rmdir(1)
.xx "" "" "rmt: remote magtape protocol module" "" rmt(8C)
.xx "" "" "rmtab: remotely mounted file system table" "" rmtab(5)
.xx "remote machines" "" "rnusers, rusers: return information about users on" "" rnusers(3R)
.xx "" "" "roffbib: run off bibliographic database" "" roffbib(1)
.xx "" "" "rogue: Exploring The Dungeons of Doom" "" rogue(6)
.xx "" "pow, sqrt: exponential, logarithm, power, square" "root" "exp, log, log10," exp(3M)
.xx "" "chroot: change" "root directory" "" chroot(2)
.xx "" "" "route: manually manipulate the routing tables" "" route(8C)
.xx "" "" "routed: network routing daemon" "" routed(8C)
.xx "" "fsplit: split a multi-" "routine Fortran file into individual files" "" fsplit(1)
.xx "" "inet_netof: Internet address manipulation" "routines" "/inet_ntoa, inet_makeaddr, inet_lnaof," inet(3N)
.xx "" "tgoto, tputs: terminal independent operation" "routines" "tgetent, tgetnum, tgetflag, tgetstr," termcap(3X)
.xx "" "initstate, setstate: better random number generator;" "routines for changing generators" "random, srandom," random(3)
.xx "" "xdr: library" "routines for external data representation" "" xdr(3N)
.xx "" "rpc: library" "routines for remote procedure calls" "" rpc(3N)
.xx "" "rcmd, rresvport, ruserok: routines for returning" "a stream to a remote command" "" rcmd(3X)
.xx "" "libsanity: libc" "routines with runtime sanity checking" "" libsanity(3X)
.xx "" "routed: network" "routing daemon" "" routed(8C)
.xx "" "route: manually manipulate the" "routing tables" "" route(8C)
.xx "" "getrpcbynumber, getrpcent, setrpcent: get" "rpc entry" "endrpcent, getrpcbyname," getrpcent(3N)
.xx "" "rpcinfo: report" "RPC information" "" rpcinfo(8)
.xx "" "" "rpc: library routines for remote procedure calls" "" rpc(3N)
.xx "" "getrpcport: get" "RPC port number" "" getrpcport(3R)
.xx "" "rpc:" "rpc program number data base" "" rpc(5)
.xx "" "portmap: DARPA port to" "RPC program number mapper" "" portmap(8C)
.xx "" "" "rpc: rpc program number data base" "" rpc(5)
.xx "" "intro: introduction to" "RPC service library functions" "" intro(3R)
.xx "" "rup: show host status of local machines (" "RPC version)" "" rup(1C)
.xx "" "rusers: who's logged in on local machines (" "RPC version)" "" rusers(1C)
.xx "" "" "rpcinfo: report RPC information" "" rpcinfo(8)
.xx "" "" "rquotad: remote quota server" "" rquotad(8C)
.xx "network" "" "rrestore: restore a file system dump across the" "" rrestore(8C)
.xx "to a remote command" "rcmd," "rresvport, ruserok: routines for returning a stream" "" rcmd(3X)
.xx "" "" "rsh: remote shell" "" rsh(1C)
.xx "" "" "rshd: remote shell server" "" rshd(8C)
.xx "" "" "rstatd: kernel statistics server" "" rstatd(8C)
.xx "" "nice, nohup:" "run a command at low priority (sh only)" "" nice(1)
.xx "PFF, swapping, processor migration" "noage, nopff, noswap, on:" "run a command with priority aging," "" noage(8)
.xx "" "boot:" "run a standalone program or bring up DYNIX" "" boot(8S)
.xx "" "nohup:" "run command immune to hangups." "" csh(1)
.xx "" "nice:" "run low priority process." "" csh(1)
.xx "" "roffbib:" "run off bibliographic database" "" roffbib(1)
.xx "" "gcore: get core images of" "running processes" "" gcore(1)
.xx "" "renice: alter priority of" "running processes" "" renice(8)
.xx "" "libsanity: libc routines with" "runtime sanity checking" "" libsanity(3X)
.xx "version)" "" "rup: show host status of local machines (RPC" "" rup(1C)
.xx "" "" "ruptime: show host status of local machines" "" ruptime(1C)
.xx "command" "rcmd, rresvport," "ruserok: routines for returning a stream to a remote" "" rcmd(3X)
.xx "machines" "rnusers," "rusers: return information about users on remote" "" rnusers(3R)
.xx "version)" "" "rusers: who's logged in on local machines (RPC" "" rusers(1C)
.xx "" "" "rusersd: network username server" "" rusersd(8C)
.xx "" "rwalld: network" "rwall server" "" rwalld(8C)
.xx "" "" "rwall: write to all users over a network" "" rwall(1)
.xx "" "" "rwall: write to specified remote machines" "" rwall(3R)
.xx "" "" "rwalld: network rwall server" "" rwalld(8C)
.xx "" "" "rwho: who's logged in on local machines" "" rwho(1C)
.xx "" "" "rwhod: system status server" "" rwhod(8C)
.xx "" "" "sa, accton: system accounting" "" sa(8)
.xx "" "" "sail: multi-user wooden ships and iron men" "" sail(6)
.xx "" "libsanity: libc routines with runtime" "sanity checking" "" libsanity(3X)
.xx "" "savecore:" "save a core dump of the operating system" "" savecore(8)
.xx "" "" "savecore: save a core dump of the operating system" "" savecore(8)
.xx "" "brk," "sbrk: change data segment size" "" brk(2)
.xx "" "brk," "sbrk: change private data segment size" "" brk(3P)
.xx "" "scandir, alphasort:" "scan a directory" "" scandir(3)
.xx "" "" "scandir, alphasort: scan a directory" "" scandir(3)
.xx "" "" "scanf, fscanf, sscanf: formatted input conversion" "" scanf(3S)
.xx "" "awk: pattern" "scanning and processing language" "" awk(1)
.xx "" "" "sccs: front end for the SCCS subsystem" "" sccs(1)
.xx "" "sccs: front end for the" "SCCS subsystem" "" sccs(1)
.xx "" "smem, smemco:" "SCED memory driver" "" smem(4)
.xx "" "alarm:" "schedule signal after specified time" "" alarm(3C)
.xx "" "getpriority, setpriority: get/set program" "scheduling priority" "" getpriority(2)
.xx "" "s_init_lock, s_lock," "s_clock, s_unlock: initialize, lock, unlock locks" "" s_lock(3P)
.xx "" "clear: clear terminal" "screen" "" clear(1)
.xx "" "curses:" "screen functions with ``optimal'' cursor motion" "" curses(3X)
.xx "" "vi, view:" "screen oriented (visual) display editor based on ex" "" vi(1)
.xx "" "rc: command" "script for auto-reboot and daemons" "" rc(8)
.xx "" "" "script: make typescript of terminal session" "" script(1)
.xx "" "onintr: process interrupts in command" "scripts." "" csh(1)
.xx "" "sd:" "SCSI disk controller" "" sd(4)
.xx "" "formatscsi: standalone" "SCSI disk formatter" "" formatscsi(8S)
.xx "" "sdformat: standalone embedded" "SCSI disk formatter" "" sdformat(8S)
.xx "" "ts:" "SCSI tape controller" "" ts(4)
.xx "" "" "sd: SCSI disk controller" "" sd(4)
.xx "" "" "sdb: symbol table types" "" sdb(5)
.xx "" "sdformat: standalone embedded" "SCSI disk formatter" "" sdformat(8S)
.xx "" "" "se: Balance 8000 10 Mb/s Ethernet interface" "" se(4)
.xx "" "grep, egrep, fgrep:" "search a file for a pattern" "" grep(1)
.xx "" "xsend, xget, enroll:" "secret mail" "" xsend(1)
.xx "" "m_single, m_multi: mark single-process code" "section" "" m_single(3P)
.xx "" "addbad: modify dec standard 144 bad" "sector information" "" addbad(8)
.xx "" "bad144: read/write dec standard 144 bad" "sector information" "" bad144(8)
.xx "" "badsect: create files to contain bad" "sectors" "" badsect(8)
.xx "" "" "sed: stream editor" "" sed(1)
.xx "" "opendir, readdir, telldir," "seekdir, rewinddir, closedir: directory operations" "" directory(3)
.xx "" "brk, sbrk: change data" "segment size" "" brk(2)
.xx "" "brk, sbrk: change private data" "segment size" "" brk(3P)
.xx "" "shbrk, shsbrk: change shared data" "segment size" "" shbrk(3P)
.xx "" "comm:" "select or reject lines common to two sorted files" "" comm(1)
.xx "" "" "select: synchronous i/o multiplexing" "" select(2)
.xx "" "case:" "selector in switch." "" csh(1)
.xx "" "semctl:" "semaphore control operations" "" semctl(2)
.xx "" "semop:" "semaphore operations" "" semop(2)
.xx "" "semget: get set of" "semaphores" "" semget(2)
.xx "" "" "semctl: semaphore control operations" "" semctl(2)
.xx "" "" "semget: get set of semaphores" "" semget(2)
.xx "" "" "semop: semaphore operations" "" semop(2)
.xx "" "uusend:" "send a file to a remote host" "" uusend(1C)
.xx "" "send, sendto, sendmsg:" "send a message from a socket" "" send(2)
.xx "" "mail:" "send and receive mail" "" mail(1)
.xx "" "ping: send ICMP ECHO_REQUEST" "packets to network hosts" "" ping(8)
.xx "" "sendmail:" "send mail over the internet" "" sendmail(8)
.xx "" "binmail:" "send or receive mail among users" "" binmail(1)
.xx "" "send, sendto, sendmsg:" "send a message from a socket" "" send(2)
.xx "" "kill:" "send signal to a process" "" kill(2)
.xx "" "killpg:" "send signal to a process group" "" killpg(2)
.xx "" "aliases: aliases file for" "sendmail" "" aliases(5)
.xx "" "" "sendmail: send mail over the internet" "" sendmail(8)
.xx "" "send, sendto," "sendmsg: send a message from a socket" "" send(2)
.xx "" "send," "sendto, sendmsg: send a message from a socket" "" send(2)
.xx "" "reset: reset the teletype bits to a" "sensible state" "" reset(1)
.xx "" "diction, explain: print wordy" "sentences; thesaurus for diction" "" diction(1)
.xx "" "explain, diction: print wordy" "sentences; thesaurus for diction" "" explain(1)
.xx "" "as:" "Sequent assembler" "" as(1)
.xx "" "cons:" "Sequent console interface" "" cons(4)
.xx "" "zd:" "Sequent Dual-Channel Disk Controller" "" zd(4)
.xx "" "dis: disassemble" "Series 32000 or Series 386 instructions" "" dis(3X)
.xx "" "dis: disassemble Series 32000 or" "Series 386 instructions" "" dis(3X)
.xx "" "comsat: biff" "server" "" comsat(8C)
.xx "" "ftpd: DARPA Internet File Transfer Protocol" "server" "" ftpd(8C)
.xx "" "rexecd: remote execution" "server" "" rexecd(8C)
.xx "" "rlogind: remote login" "server" "" rlogind(8C)
.xx "" "rquotad: remote quota" "server" "" rquotad(8C)
.xx "" "rshd: remote shell" "server" "" rshd(8C)
.xx "" "rstatd: kernel statistics" "server" "" rstatd(8C)
.xx "" "rusersd: network username" "server" "" rusersd(8C)
.xx "" "rwalld: network rwall" "server" "" rwalld(8C)
.xx "" "rwhod: system status" "server" "" rwhod(8C)
.xx "" "sprayd: spray" "server" "" sprayd(8C)
.xx "" "telnetd: DARPA TELNET protocol" "server" "" telnetd(8C)
.xx "" "tftpd: DARPA Trivial File Transfer Protocol" "server" "" tftpd(8C)
.xx "" "servers: inet" "server data base" "" servers(5)
.xx "" "" "servers: inet server data base" "" servers(5)
.xx "" "inetd: internet" "services daemon" "" inetd(8C)
.xx "" "" "services: service name data base" "" services(5)
.xx "" "logout: end" "session." "" csh(1)
.xx "" "script: make typescript of terminal" "session" "" script(1)
.xx "" "" "sestat: print Ethernet statistics" "" sestat(8)
.xx "" "ascii: map of ASCII character" "set" "" ascii(7)
.xx "" "stty, gtty:" "set and get terminal state (defunct)" "" stty(3C)
.xx "" "sigstack:" "set and/or get signal stack context" "" sigstack(2)
.xx "" "" "set: change value of shell variable." "" csh(1)
.xx "" "sigsetmask:" "set current signal mask" "" sigsetmask(2)
.xx "" "gettimeofday, settimeofday: get/" "set date and time" "" gettimeofday(2)
.xx "" "setdtablesize:" "set descriptor table size" "" setdtablesize(2)
.xx "" "umask:" "set file creation mode mask" "" umask(2)
.xx "" "utime:" "set file times" "" utime(3C)
.xx "" "utimes:" "set file times" "" utimes(2)
.xx "" "setgroups:" "set group access list" "" setgroups(2)
.xx "" "getdomainname, setdomainname: get/" "set name of current domain" "" getdomainname(2)
.xx "" "gethostname, sethostname: get/" "set name of current host" "" gethostname(2)
.xx "" "m_set_procs:" "set number of child processes" "" m_set_procs(3P)
.xx "" "apply: apply a command to a" "set of arguments" "" apply(1)
.xx "" "semget: get" "set of semaphores" "" semget(2)
.xx "" "getsockopt, setsockopt: get and" "set options on sockets" "" getsockopt(2)
.xx "" "domainname:" "set or display name of current domain system" "" domainname(1)
.xx "" "hostid:" "set or print identifier of current host system" "" hostid(1)
.xx "" "hostname:" "set or print name of current host system" "" hostname(1)
.xx "" "setpgrp:" "set process group" "" setpgrp(2)
.xx "" "nice:" "set program priority" "" nice(3C)
.xx "" "getpriority, setpriority: get/" "set program scheduling priority" "" getpriority(2)
.xx "" "setregid:" "set real and effective group ID" "" setregid(2)
.xx "" "setreuid:" "set real and effective user ID's" "" setreuid(2)
.xx "" "/cd, eval, exec, exit, export, login, read, readonly," "set, shift, [, times, trap, umask, wait: command/" "" sh(1)
.xx "" "getty:" "set terminal mode" "" getty(8)
.xx "" "stty:" "set terminal options" "" stty(1)
.xx "" "tabs:" "set terminal tabs" "" tabs(1)
.xx "" "date: print and" "set the date" "" date(1)
.xx "" "gethostid, sethostid: get/" "set unique identifier of current host" "" gethostid(2)
.xx "" "setuid, seteuid, setruid, setgid, setegid, setrgid:" "set user and group ID" "" setuid(3)
.xx "" "getitimer, setitimer: get/" "set value of interval timer" "" getitimer(2)
.xx "" "setenv:" "set variable in environment." "" csh(1)
.xx "stream" "" "setbuf, setbuffer, setlinebuf: assign buffering to a" "" setbuf(3S)
.xx "" "setbuf," "setbuffer, setlinebuf: assign buffering to a stream" "" setbuf(3S)
.xx "" "getdomainname," "setdomainname: get/set name of current domain" "" getdomainname(2)
.xx "" "" "setdtablesize: set descriptor table size" "" setdtablesize(2)
.xx "" "setuid, seteuid, setruid, setgid," "setegid, setrgid: set user and group ID" "" setuid(3)
.xx "" "" "setenv: set variable in environment." "" csh(1)
.xx "and group ID" "setuid," "seteuid, setruid, setgid, setegid, setrgid: set user" "" setuid(3)
.xx "entry" "getfsent, getfsspec, getfsfile, getfstype," "setfsent, endfsent: get file system descriptor file" "" getfsent(3X)
.xx "" "setuid, seteuid, setruid," "setgid, setegid, setrgid: set user and group ID" "" setuid(3)
.xx "" "getgrent, getgrgid, getgrnam," "setgrent, endgrent: get group file entry" "" getgrent(3)
.xx "" "" "setgroups: set group access list" "" setgroups(2)
.xx "" "gethostent, gethostbyaddr, gethostbyname," "sethostent, endhostent: get network host entry" "" gethostent(3N)
.xx "" "gethostid," "sethostid: get/set unique identifier of current host" "" gethostid(2)
.xx "" "gethostname," "sethostname: get/set name of current host" "" gethostname(2)
.xx "" "getitimer," "setitimer: get/set value of interval timer" "" getitimer(2)
.xx "" "setjmp, longjmp," "_setjmp, _longjmp: non-local goto" "" setjmp(3)
.xx "" "" "setjmp, longjmp, _setjmp, _longjmp: non-local goto" "" setjmp(3)
.xx "" "crypt," "setkey, encrypt: DES encryption" "" crypt(3)
.xx "" "setbuf, setbuffer," "setlinebuf: assign buffering to a stream" "" setbuf(3S)
.xx "" "addmntent, endmntent, getmntent, hasmntopt," "setmntent: get file system descriptor file entry" "" getmntent(3)
.xx "" "getnetent, getnetbyaddr, getnetbyname," "setnetent, endnetent: get network entry" "" getnetent(3N)
.xx "" "endnetgrent, getnetgrent, innetgr," "setnetgrent: get network group entry" "" getnetgrent(3N)
.xx "" "" "setpgrp: set process group" "" setpgrp(2)
.xx "" "getpriority," "setpriority: get/set program scheduling priority" "" getpriority(2)
.xx "" "getprotoent, getprotobynumber, getprotobyname," "setprotoent, endprotoent: get protocol entry" "" getprotoent(3N)
.xx "" "getpwent, getpwuid, getpwnam," "setpwent, endpwent: get password file entry" "" getpwent(3)
.xx "" "" "setregid: set real and effective group ID" "" setregid(2)
.xx "" "" "setreuid: set real and effective user ID's" "" setreuid(2)
.xx "" "setuid, seteuid, setruid, setgid, setegid," "setrgid: set user and group ID" "" setuid(3)
.xx "consumption" "getrlimit," "setrlimit: control maximum system resource" "" getrlimit(2)
.xx "" "endrpcent, getrpcbyname, getrpcbynumber, getrpcent," "setrpcent: get rpc entry" "" getrpcent(3N)
.xx "group ID" "setuid, seteuid," "setruid, setgid, setegid, setrgid: set user and" "" setuid(3)
.xx "" "getservent, getservbyport, getservbyname," "setservent, endservent: get service entry" "" getservent(3N)
.xx "" "getsockopt," "setsockopt: get and set options on sockets" "" getsockopt(2)
.xx "for changing generators" "random, srandom, initstate," "setstate: better random number generator; routines" "" random(3)
.xx "" "gettimeofday," "settimeofday: get/set date and time" "" gettimeofday(2)
.xx "set user and group ID" "" "setuid, seteuid, setruid, setgid, setegid, setrgid:" "" setuid(3)
.xx "eval, exec, exit, export, login, read, readonly,/" "" "sh, for, case, if, while, :, ., break, continue, cd," "" sh(1)
.xx "" "nice, nohup: run a command at low priority (" "sh only)" "" nice(1)
.xx "" "shbrk, shsbrk: change" "shared data segment size" "" shbrk(3P)
.xx "" "shmalloc, shrealloc, shfree:" "shared memory allocator" "" shmalloc(3P)
.xx "" "xstr: extract strings from C programs to implement" "shared strings" "" xstr(1)
.xx "" "" "shbrk, shsbrk: change shared data segment size" "" shbrk(3P)
.xx "" "chsh: change default login" "shell" "" chsh(1)
.xx "" "exit: leave" "shell." "" csh(1)
.xx "" "rsh: remote" "shell" "" rsh(1C)
.xx "" "system: issue a" "shell command" "" system(3)
.xx "" "csh: a" "shell (command interpreter) with C-like syntax" "" csh(1)
.xx "" "eval: re-evaluate" "shell data." "" csh(1)
.xx "" "popd: pop" "shell directory stack." "" csh(1)
.xx "" "pushd: push" "shell directory stack." "" csh(1)
.xx "" "alias:" "shell macros." "" csh(1)
.xx "" "suspend: suspend a" "shell, resuming its superior." "" csh(1)
.xx "" "rshd: remote" "shell server" "" rshd(8C)
.xx "" "set: change value of" "shell variable." "" csh(1)
.xx "" "@: arithmetic on" "shell variables." "" csh(1)
.xx "" "unset: discard" "shell variables." "" csh(1)
.xx "" "exec: overlay" "shell with specified command." "" csh(1)
.xx "" "shmalloc, shrealloc," "shfree: shared memory allocator" "" shmalloc(3P)
.xx "" "/exec, exit, export, login, read, readonly, set, shift," "[, times, trap, umask, wait: command language" "" sh(1)
.xx "" "" "shift: manipulate argument list." "" csh(1)
.xx "" "sail: multi-user wooden" "ships and iron men" "" sail(6)
.xx "" "shmalloc, shrealloc, shfree:" "shared memory allocator" "" shmalloc(3P)
.xx "" "groups:" "show group memberships" "" groups(1)
.xx "" "ruptime:" "show host status of local machines" "" ruptime(1C)
.xx "" "rup:" "show host status of local machines (RPC version)" "" rup(1C)
.xx "" "uptime:" "show how long system has been up" "" uptime(1)
.xx "" "lastcomm:" "show last commands executed in reverse order" "" lastcomm(1)
.xx "" "netstat:" "show network status" "" netstat(1)
.xx "" "uusnap:" "show snapshot of the UUCP system" "" uusnap(8C)
.xx "" "showcfg:" "show the configuration of the machine" "" showcfg(8)
.xx "construct a file" "what:" "show what versions of object modules were used to" "" what(1)
.xx "" "" "showcfg: show the configuration of the machine" "" showcfg(8)
.xx "" "shmalloc," "shrealloc, shfree: shared memory allocator" "" shmalloc(3P)
.xx "" "shbrk," "shsbrk: change shared data segment size" "" shbrk(3P)
.xx "" "shutdown:" "shut down part of a full-duplex connection" "" shutdown(2)
.xx "" "" "shutdown: close down the system at a given time" "" shutdown(8)
.xx "" "shutdown: shut down" "part of a full-duplex connection" "" shutdown(2)
.xx "" "" "sigblock: block signals" "" sigblock(2)
.xx "" "login:" "sign on" "" login(1)
.xx "" "pause: stop until" "signal" "" pause(3C)
.xx "" "alarm: schedule" "signal after specified time" "" alarm(3C)
.xx "" "signal: simplified software" "signal facilities" "" signal(3C)
.xx "" "sigvec: software" "signal facilities" "" sigvec(2)
.xx "" "sigsetmask: set current" "signal mask" "" sigsetmask(2)
.xx "" "psignal, sys_siglist: system" "signal messages" "" psignal(3)
.xx "" "" "signal: simplified software signal facilities" "" signal(3C)
.xx "" "sigstack: set and/or get" "signal stack context" "" sigstack(2)
.xx "" "kill: send" "signal to a process" "" kill(2)
.xx "" "killpg: send" "signal to a process group" "" killpg(2)
.xx "" "sigblock: block" "signals" "" sigblock(2)
.xx "" "sigpause: atomically release blocked" "signals and wait for interrupt" "" sigpause(2)
.xx "wait for interrupt" "" "sigpause: atomically release blocked signals and" "" sigpause(2)
.xx "" "" "sigsetmask: set current signal mask" "" sigsetmask(2)
.xx "" "" "sigstack: set and/or get signal stack context" "" sigstack(2)
.xx "" "" "sigvec: software signal facilities" "" sigvec(2)
.xx "" "signal:" "simplified software signal facilities" "" signal(3C)
.xx "" "tc: photoypesetter" "simulator" "" tc(1)
.xx "trigonometric functions" "" "sin, cos, tan, asin, acos, atan, atan2:" "" sin(3M)
.xx "" "m_single, m_multi: mark" "single-process code section" "" m_single(3P)
.xx "" "" "sinh, cosh, tanh: hyperbolic functions" "" sinh(3M)
.xx "wait at barrier" "" "s_init_barrier, s_wait_barrier: initialize barrier," "" s_wait_barrier(3P)
.xx "lock, unlock locks" "" "s_init_lock, s_lock, s_clock, s_unlock: initialize," "" s_lock(3P)
.xx "" "null: data" "sink" "" null(4)
.xx "" "uupoll: poll a remote UUCP" "site" "" uupoll(8C)
.xx "" "brk, sbrk: change data segment" "size" "" brk(2)
.xx "" "brk, sbrk: change private data segment" "size" "" brk(3P)
.xx "" "getdtablesize: get descriptor table" "size" "" getdtablesize(2)
.xx "" "getpagesize: get system page" "size" "" getpagesize(2)
.xx "" "pagesize: print system page" "size" "" pagesize(1)
.xx "" "setdtablesize: set descriptor table" "size" "" setdtablesize(2)
.xx "" "shbrk, shsbrk: change shared data segment" "size" "" shbrk(3P)
.xx "" "size:" "size of an object file" "" size(1)
.xx "" "" "size: size of an object file" "" size(1)
.xx "" "diskpart: calculate default disk partition" "sizes" "" diskpart(8)
.xx "" "" "sleep: suspend execution for an interval" "" sleep(1)
.xx "" "" "sleep: suspend execution for interval" "" sleep(3)
.xx "" "gate:" "SLIC gate usage" "" gate(4)
.xx "locks" "s_init_lock," "s_lock, s_clock, s_unlock: initialize, lock, unlock" "" s_lock(3P)
.xx "" "" "smem, smemco: SCED memory driver" "" smem(4)
.xx "" "smem," "smemco: SCED memory driver" "" smem(4)
.xx "" "spline: interpolate" "smooth curve" "" spline(1G)
.xx "" "" "snake, snscore: display chase game" "" snake(6)
.xx "" "uusnap: show" "snapshot of the UUCP system" "" uusnap(8C)
.xx "" "snake," "snscore: display chase game" "" snake(6)
.xx "" "accept: accept a connection on a" "socket" "" accept(2)
.xx "" "bind: bind a name to a" "socket" "" bind(2)
.xx "" "connect: initiate a connection on a" "socket" "" connect(2)
.xx "" "listen: listen for connections on a" "socket" "" listen(2)
.xx "" "recv, recvfrom, recvmsg: receive a message from a" "socket" "" recv(2)
.xx "" "send, sendto, sendmsg: send a message from a" "socket" "" send(2)
.xx "" "" "socket: create an endpoint for communication" "" socket(2)
.xx "" "getsockname: get" "socket name" "" getsockname(2)
.xx "" "" "socketpair: create a pair of connected sockets" "" socketpair(2)
.xx "" "getsockopt, setsockopt: get and set options on" "sockets" "" getsockopt(2)
.xx "" "socketpair: create a pair of connected" "sockets" "" socketpair(2)
.xx "" "" "soelim: eliminate .so's from nroff input" "" soelim(1)
.xx "" "lo:" "software loopback network interface" "" lo(4)
.xx "" "signal: simplified" "software signal facilities" "" signal(3C)
.xx "" "sigvec:" "software signal facilities" "" sigvec(2)
.xx "" "canfield, cfscores: the" "solitaire card game canfield" "" canfield(6)
.xx "" "qsort: quicker" "sort" "" qsort(3)
.xx "" "tsort: topological" "sort" "" tsort(1)
.xx "" "sortbib:" "sort bibliographic database" "" sortbib(1)
.xx "" "sort:" "sort or merge files" "" sort(1)
.xx "" "" "sort: sort or merge files" "" sort(1)
.xx "" "" "sortbib: sort bibliographic database" "" sortbib(1)
.xx "" "comm: select or reject lines common to two" "sorted files" "" comm(1)
.xx "" "look: find lines in a" "sorted list" "" look(1)
.xx "" "soelim: eliminate" ".so's from nroff input" "" soelim(1)
.xx "" "indent: indent and format C program" "source" "" indent(1)
.xx "" "mkstr: create an error message file by massaging C" "source" "" mkstr(1)
.xx "" "whereis: locate" "source, binary, and or manual for program" "" whereis(1)
.xx "" "a.vi: vi with extensions for Ada" "source files" "" a.vi(1)
.xx "" "" "source: read commands from file." "" csh(1)
.xx "" "a.tags: create a tags file for Ada" "sources" "" a.tags(1)
.xx "" "mmap: map an open file into the process's address" "space" "" mmap(2)
.xx "" "munmap: unmap part of the process's address" "space" "" munmap(2)
.xx "" "physical addresses into process's virtual address" "space" "pmap: map" pmap(4)
.xx "" "line, circle, arc, move, cont, point, linemod," "space, closepl: graphics interface" "/erase, label," plot(3X)
.xx "" "df: report free disk" "space on file systems" "" df(1)
.xx "" "expand, unexpand: expand tabs to" "spaces, and vice versa" "" expand(1)
.xx "" "vfork: spawn new process" "in a virtual memory efficient way" "" vfork(2)
.xx "" "exec: overlay shell with" "specified command." "" csh(1)
.xx "" "truncate, ftruncate: truncate a file to a" "specified length" "" truncate(2)
.xx "" "rwall: write to" "specified remote machines" "" rwall(3R)
.xx "" "alarm: schedule signal after" "specified time" "" alarm(3C)
.xx "" "swapon:" "specify additional device for paging and swapping" "" swapon(8)
.xx "" "" "spell, spellin, spellout: find spelling errors" "" spell(1)
.xx "" "spell," "spellin, spellout: find spelling errors" "" spell(1)
.xx "" "spell, spellin, spellout: find" "spelling errors" "" spell(1)
.xx "" "spell, spellin," "spellout: find spelling errors" "" spell(1)
.xx "" "" "spline: interpolate smooth curve" "" spline(1G)
.xx "" "split:" "split a file into pieces" "" split(1)
.xx "files" "fsplit:" "split a multi-routine Fortran file into individual" "" fsplit(1)
.xx "" "frexp, ldexp, modf:" "split into mantissa and exponent" "" frexp(3)
.xx "" "" "split: split a file into pieces" "" split(1)
.xx "" "uuclean: uucp" "spool directory clean-up" "" uuclean(8C)
.xx "" "lpq:" "spool queue examination program" "" lpq(1)
.xx "" "vpr, vprm, vpq, vprint: raster printer/plotter" "spooler" "" vpr(1)
.xx "" "lprm: remove jobs from the line printer" "spooling queue" "" lprm(1)
.xx "" "spray:" "spray packets" "" spray(8)
.xx "" "sprayd:" "spray server" "" sprayd(8C)
.xx "" "" "spray: spray packets" "" spray(8)
.xx "" "" "sprayd: spray server" "" sprayd(8C)
.xx "" "printf, fprintf," "sprintf: formatted output conversion" "" printf(3S)
.xx "" "exp, log, log10, pow," "sqrt: exponential, logarithm, power, square root" "" exp(3M)
.xx "" "log10, pow, sqrt: exponential, logarithm, power," "square root" "exp, log," exp(3M)
.xx "" "rand," "srand: random number generator" "" rand(3C)
.xx "generator; routines for changing generators" "random," "srandom, initstate, setstate: better random number" "" random(3)
.xx "" "scanf, fscanf," "sscanf: formatted input conversion" "" scanf(3S)
.xx "" "st: Systech MTI-800/1600" "terminal multiplexor driver" "" st(4)
.xx "" "" "stab: symbol table types" "" stab(5)
.xx "" "popd: pop shell directory" "stack." "" csh(1)
.xx "" "pushd: push shell directory" "stack." "" csh(1)
.xx "" "sigstack: set and/or get signal" "stack context" "" sigstack(2)
.xx "" "xpformat:" "standalone 400-Mbyte disk formatter" "" xpformat(8S)
.xx "" "copy2: perform a" "standalone data transfer" "" copy2(8S)
.xx "" "ls: generate a" "standalone directory listing" "" ls(8S)
.xx "controller" "zdformat:" "standalone disk formatter for dual-channel disk" "" zdformat(8S)
.xx "" "drtest:" "standalone disk test program" "" drtest(8S)
.xx "" "sdformat:" "standalone embedded SCSI disk formatter" "" sdformat(8S)
.xx "" "cat:" "standalone file display utility" "" cat(8S)
.xx "interactive repair" "fsck:" "standalone file system consistency check and" "" fsck(8S)
.xx "" "dump:" "standalone memory dumper" "" dump(8S)
.xx "" "host: remote virtual terminal/fileserver for" "standalone program development" "" host(1)
.xx "" "boot: run a" "standalone program or bring up DYNIX" "" boot(8S)
.xx "" "formatscsi:" "standalone SCSI disk formatter" "" formatscsi(8S)
.xx "" "copy: perform a" "standalone simple data transfer" "" copy(8S)
.xx "" "ret: perform a" "standalone streamer tape retension" "" ret(8S)
.xx "" "addbad: modify dec" "standard 144 bad sector information" "" addbad(8)
.xx "" "bad144: read/write dec" "standard 144 bad sector information" "" bad144(8)
.xx "" "stdio:" "standard buffered input/output package" "" intro(3S)
.xx "" "htable: convert NIC" "standard format host tables" "" htable(8)
.xx "" "" "stat, lstat, fstat: get file status" "" stat(2)
.xx "" "reset: reset the teletype bits to a sensible" "state" "" reset(1)
.xx "" "stty, gtty: set and get terminal" "state (defunct)" "" stty(3C)
.xx "" "fsync: synchronize a file's in-core" "state with that on disk" "" fsync(2)
.xx "" "if: conditional" "statement." "" csh(1)
.xx "" "" "statfs: get file system statistics" "" statfs(2)
.xx "" "fstab:" "static information about filesystems" "" fstab(5)
.xx "" "mntent:" "static information about filesystems" "" mntent(5)
.xx "" "hashstat: print command hashing" "statistics." "" csh(1)
.xx "" "iostat: report I/O" "statistics" "" iostat(1)
.xx "" "sestat: print Ethernet" "statistics" "" sestat(8)
.xx "" "statfs: get file system" "statistics" "" statfs(2)
.xx "" "vmstat: report virtual memory" "statistics" "" vmstat(1)
.xx "" "rstatd: kernel" "statistics server" "" rstatd(8C)
.xx "" "netstat: show network" "status" "" netstat(1)
.xx "" "ps: process" "status" "" ps(1)
.xx "" "stat, lstat, fstat: get file" "status" "" stat(2)
.xx "" "ferror, feof, clearerr, fileno: stream" "status inquiries" "" ferror(3S)
.xx "" "sysline: display system status on" "status line of a terminal" "" sysline(1)
.xx "" "ruptime: show host" "status of local machines" "" ruptime(1C)
.xx "" "rup: show host" "status of local machines (RPC version)" "" rup(1C)
.xx "" "sysline: display system" "status on status line of a terminal" "" sysline(1)
.xx "" "rwhod: system" "status server" "" rwhod(8C)
.xx "" "" "stdio: standard buffered input/output package" "" intro(3S)
.xx "" "" "sticky: executable files with persistent text" "" sticky(8)
.xx "" "" "stop: halt a job or process." "" csh(1)
.xx "" "halt:" "stop the processor" "" halt(8)
.xx "" "pause:" "stop until signal" "" pause(3C)
.xx "" "icheck: file system" "storage consistency check" "" icheck(8)
.xx "subroutines" "dbminit, fetch," "store, delete, firstkey, nextkey: data base" "" dbm(3X)
.xx "strlen, index, rindex: string operations" "" "strcat, strncat, strcmp, strncmp, strcpy, strncpy," "" string(3)
.xx "rindex: string operations" "strcat, strncat," "strcmp, strncmp, strcpy, strncpy, strlen, index," "" string(3)
.xx "operations" "strcat, strncat, strcmp, strncmp," "strcpy, strncpy, strlen, index, rindex: string" "" string(3)
.xx "" "fclose, fflush: close or flush a" "stream" "" fclose(3S)
.xx "" "fopen, freopen, fdopen: open a" "stream" "" fopen(3S)
.xx "" "fseek, ftell, rewind: reposition a" "stream" "" fseek(3S)
.xx "" "getchar, fgetc, getw: get character or word from" "stream" "getc," getc(3S)
.xx "" "gets, fgets: get a string from a" "stream" "" gets(3S)
.xx "" "putchar, fputc, putw: put character or word on a" "stream" "putc," putc(3S)
.xx "" "puts, fputs: put a string on a" "stream" "" puts(3S)
.xx "" "setbuf, setbuffer, setlinebuf: assign buffering to a" "stream" "" setbuf(3S)
.xx "" "ungetc: push character back into input" "stream" "" ungetc(3S)
.xx "" "sed:" "stream editor" "" sed(1)
.xx "" "ferror, feof, clearerr, fileno:" "stream status inquiries" "" ferror(3S)
.xx "" "rcmd, rresvport, ruserok: routines for returning a" "stream to a remote command" "" rcmd(3X)
.xx "" "rexec: return" "stream to a remote command" "" rexec(3X)
.xx "" "ret: perform a standalone" "streamer tape retension" "" ret(8S)
.xx "" "gets, fgets: get a" "string from a stream" "" gets(3S)
.xx "" "puts, fputs: put a" "string on a stream" "" puts(3S)
.xx "" "bcopy, bcmp, bzero, ffs: bit and byte" "string operations" "" bstring(3)
.xx "" "strncmp, strcpy, strncpy, strlen, index, rindex:" "string operations" "strcat, strncat, strcmp," string(3)
.xx "" "berkst: read in symbol and" "string tables in berkeley format" "" berkst(3)
.xx "" "extract strings from C programs to implement shared" "strings" "xstr:" xstr(1)
.xx "other binary) file" "" "strings: find the printable strings in an object (or" "" strings(1)
.xx "" "xstr: extract strings from C programs" "to implement shared strings" "" xstr(1)
.xx "" "strings: find the printable" "strings in an object (or other binary) file" "" strings(1)
.xx "" "basename:" "strip filename affixes" "" basename(1)
.xx "" "" "strip: remove symbols and relocation bits" "" strip(1)
.xx "" "strcat, strncat, strcmp, strncmp, strcpy, strncpy," "strlen, index, rindex: string operations" "" string(3)
.xx "index, rindex: string operations" "strcat," "strncat, strcmp, strncmp, strcpy, strncpy, strlen," "" string(3)
.xx "string operations" "strcat, strncat, strcmp," "strncmp, strcpy, strncpy, strlen, index, rindex:" "" string(3)
.xx "" "strcat, strncat, strcmp, strncmp, strcpy," "strncpy, strlen, index, rindex: string operations" "" string(3)
.xx "" "" "struct: structure Fortran programs" "" struct(1)
.xx "" "struct:" "structure Fortran programs" "" struct(1)
.xx "" "" "stty, gtty: set and get terminal state (defunct)" "" stty(3C)
.xx "" "" "stty: set terminal options" "" stty(1)
.xx "" "" "style: analyze surface characteristics of a document" "" style(1)
.xx "" "" "su: substitute user id temporarily" "" su(1)
.xx "" "mailbug:" "submit a bug report or enhancement request" "" mailbug(1)
.xx "" "m_fork: execute a" "subprogram in parallel" "" m_fork(3P)
.xx "" "fetch, store, delete, firstkey, nextkey: data base" "subroutines" "dbminit," dbm(3X)
.xx "" "lib2648:" "subroutines for the HP 2648 graphics terminal" "" lib2648(3X)
.xx "" "su:" "substitute user id temporarily" "" su(1)
.xx "" "sccs: front end for the SCCS" "subsystem" "" sccs(1)
.xx "" "sum:" "sum and count blocks in a file" "" sum(1)
.xx "" "" "sum: sum and count blocks in a file" "" sum(1)
.xx "" "du:" "summarize disk usage" "" du(1)
.xx "" "quot:" "summarize file system ownership" "" quot(8)
.xx "" "repquota:" "summarize quotas for a filesystem" "" repquota(8)
.xx "" "s_init_lock, s_lock, s_clock," "s_unlock: initialize, lock, unlock locks" "" s_lock(3P)
.xx "" "sync: update the" "super block" "" sync(8)
.xx "" "update: periodically update the" "super block" "" update(8)
.xx "" "sync: update" "super-block" "" sync(2)
.xx "" "suspend: suspend a shell, resuming its" "superior." "" csh(1)
.xx "" "intro: introduction to special files and hardware" "support" "" intro(4)
.xx "" "style: analyze" "surface characteristics of a document" "" style(1)
.xx "" "suspend:" "suspend a shell, resuming its superior." "" csh(1)
.xx "" "m_park_procs, m_rele_procs:" "suspend and resume child process execution" "" m_park_procs(3P)
.xx "" "sleep:" "suspend execution for an interval" "" sleep(1)
.xx "" "sleep:" "suspend execution for interval" "" sleep(3)
.xx "" "" "suspend: suspend a shell, resuming its superior." "" csh(1)
.xx "" "" "swab: swap bytes" "" swab(3)
.xx "" "s_init_barrier," "s_wait_barrier: initialize barrier, wait at barrier" "" s_wait_barrier(3P)
.xx "" "swab:" "swap bytes" "" swab(3)
.xx "" "swapon: add a" "swap device for interleaved paging/swapping" "" swapon(2)
.xx "paging/swapping" "" "swapon: add a swap device for interleaved" "" swapon(2)
.xx "swapping" "" "swapon: specify additional device for paging and" "" swapon(8)
.xx "" "swapon: add a swap device for interleaved paging/" "swapping" "" swapon(2)
.xx "" "swapon: specify additional device for paging and" "swapping" "" swapon(8)
.xx "" "noswap, on: run a command with priority aging, PFF," "swapping, or processor migration disabled" "/nopff," noage(8)
.xx "" "breaksw: exit from" "switch." "" csh(1)
.xx "" "case: selector in" "switch." "" csh(1)
.xx "" "default: catchall clause in" "switch." "" csh(1)
.xx "" "endsw: terminate" "switch." "" csh(1)
.xx "" "" "switch: multi-way command branch." "" csh(1)
.xx "" "berkst: read in" "symbol and string tables in berkeley format" "" berkst(3)
.xx "" "sdb:" "symbol table types" "" sdb(5)
.xx "" "stab:" "symbol table types" "" stab(5)
.xx "" "ddt: interactive" "symbolic debugger (Balance only)" "" ddt(1)
.xx "" "readclink: read value of a conditional" "symbolic link" "" readclink(2)
.xx "" "readlink: read value of a" "symbolic link" "" readlink(2)
.xx "" "csymlink: make conditional" "symbolic link to a file" "" csymlink(2)
.xx "" "symlink: make" "symbolic link to a file" "" symlink(2)
.xx "" "strip: remove" "symbols and relocation bits" "" strip(1)
.xx "" "" "symlink: make symbolic link to a file" "" symlink(2)
.xx "" "" "symorder: rearrange name list" "" symorder(1)
.xx "" "" "sync: update super-block" "" sync(2)
.xx "" "" "sync: update the super block" "" sync(8)
.xx "" "fsync:" "synchronize a file's in-core state with that on disk" "" fsync(2)
.xx "" "select:" "synchronous i/o multiplexing" "" select(2)
.xx "" "csh: a shell (command interpreter) with C-like" "syntax" "" csh(1)
.xx "" "" "syscall: indirect system call" "" syscall(2)
.xx "" "perror," "sys_errlist, sys_nerr: system error messages" "" perror(3)
.xx "terminal" "" "sysline: display system status on status line of a" "" sysline(1)
.xx "" "" "syslog: log systems messages" "" syslog(8)
.xx "" "" "syslog, openlog, closelog: control system log" "" syslog(3)
.xx "" "perror, sys_errlist," "sys_nerr: system error messages" "" perror(3)
.xx "" "psignal," "sys_siglist: system signal messages" "" psignal(3)
.xx "" "st:" "Systech MTI-800/1600 terminal multiplexor driver" "" st(4)
.xx "" "lp:" "Systech parallel line printer interface" "" lp(4)
.xx "" "ttyconfig: configure" "Systech tty lines" "" ttyconfig(8)
.xx "" "df: report free disk space on file" "systems" "" df(1)
.xx "" "syslog: log" "systems messages" "" syslog(8)
.xx "" "rehash: recompute command hash" "table." "" csh(1)
.xx "" "unhash: discard command hash" "table." "" csh(1)
.xx "" "/etc/mtab: mounted file system" "table" "" mtab(5)
.xx "" "rmtab: remotely mounted file system" "table" "" rmtab(5)
.xx "" "vwidth: make troff width" "table for a font" "" vwidth(1)
.xx "" "getdtablemax: get maximum in-use descriptor" "table index" "" getdtablemax(2)
.xx "" "getdtablesize: get descriptor" "table size" "" getdtablesize(2)
.xx "" "setdtablesize: set descriptor" "table size" "" setdtablesize(2)
.xx "" "sdb: symbol" "table types" "" sdb(5)
.xx "" "stab: symbol" "table types" "" stab(5)
.xx "" "htable: convert NIC standard format host" "tables" "" htable(8)
.xx "" "route: manually manipulate the routing" "tables" "" route(8C)
.xx "" "tbl: format" "tables for nroff or troff" "" tbl(1)
.xx "" "gettable: get NIC format host" "tables from a host" "" gettable(8C)
.xx "" "berkst: read in symbol and string" "tables in berkeley format" "" berkst(3)
.xx "" "tabs: set terminal" "tabs" "" tabs(1)
.xx "" "" "tabs: set terminal tabs" "" tabs(1)
.xx "" "expand, unexpand: expand" "tabs to spaces, and vice versa" "" expand(1)
.xx "" "ctags: create a" "tags file" "" ctags(1)
.xx "" "a.tags: create a" "tags file for Ada sources" "" a.tags(1)
.xx "" "" "tail: deliver the last part of a file" "" tail(1)
.xx "" "offline_all:" "take all but one active processor off line" "" offline_all(3)
.xx "" "" "talk: talk to another user" "" talk(1)
.xx "" "talk:" "talk to another user" "" talk(1)
.xx "functions" "sin, cos," "tan, asin, acos, atan, atan2: trigonometric" "" sin(3M)
.xx "" "sinh, cosh," "tanh: hyperbolic functions" "" sinh(3M)
.xx "" "tp: manipulate" "tape archive" "" tp(1)
.xx "" "tar:" "tape archive file format" "" tar(5)
.xx "" "tar:" "tape archiver" "" tar(1)
.xx "" "ts: SCSI" "tape controller" "" ts(4)
.xx "" "tp: DEC/mag" "tape formats" "" tp(5)
.xx "" "mt: magnetic" "tape manipulating program" "" mt(1)
.xx "" "ret: perform a standalone streamer" "tape retension" "" ret(8S)
.xx "" "" "tar: tape archive file format" "" tar(5)
.xx "" "" "tar: tape archiver" "" tar(1)
.xx "printable ASCII" "btoa, atob," "tarmail, untarmail: encode/decode binary to" "" btoa(1)
.xx "" "deroff: remove nroff, troff," "tbl and eqn constructs" "" deroff(1)
.xx "" "" "tbl: format tables for nroff or troff" "" tbl(1)
.xx "" "" "tc: photoypesetter simulator" "" tc(1)
.xx "" "" "tcp: Internet Transmission Control Protocol" "" tcp(4P)
.xx "" "" "tee: pipe fitting" "" tee(1)
.xx "" "tk: paginator for the" "Tektronix 4014" "" tk(1)
.xx "" "reset: reset the" "teletype bits to a sensible state" "" reset(1)
.xx "" "last: indicate last logins of users and" "teletypes" "" last(1)
.xx "operations" "opendir, readdir," "telldir, seekdir, rewinddir, closedir: directory" "" directory(3)
.xx "" "telnet: user interface to the" "TELNET protocol" "" telnet(1C)
.xx "" "telnetd: DARPA" "TELNET protocol server" "" telnetd(8C)
.xx "" "" "telnet: user interface to the TELNET protocol" "" telnet(1C)
.xx "" "" "telnetd: DARPA TELNET protocol server" "" telnetd(8C)
.xx "" "su: substitute user id" "temporarily" "" su(1)
.xx "" "" "term: conventional names for terminals" "" term(7)
.xx "" "" "termcap: terminal capability data base" "" termcap(5)
.xx "" "lib2648: subroutines for the HP 2648 graphics" "terminal" "" lib2648(3X)
.xx "" "lock: reserve a" "terminal" "" lock(1)
.xx "" "sysline: display system status on status line of a" "terminal" "" sysline(1)
.xx "" "ttyname, isatty, ttyslot: find name of a" "terminal" "" ttyname(3)
.xx "" "vhangup: virtually ``hangup'' the current control" "terminal" "" vhangup(2)
.xx "" "worms: animate worms on a display" "terminal" "" worms(6)
.xx "" "termcap:" "terminal capability data base" "" termcap(5)
.xx "" "gettytab:" "terminal configuration data base" "" gettytab(5)
.xx "" "tset:" "terminal dependent initialization" "" tset(1)
.xx "" "pty: pseudo" "terminal driver" "" pty(4)
.xx "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto, tputs:" "terminal independent operation routines" "" termcap(3X)
.xx "" "ttys:" "terminal initialization data" "" ttys(5)
.xx "" "tty: general" "terminal interface" "" tty(4)
.xx "" "getty: set" "terminal mode" "" getty(8)
.xx "" "st: Systech MTI-800/1600" "terminal multiplexor driver" "" st(4)
.xx "" "tty: get" "terminal name" "" tty(1)
.xx "" "stty: set" "terminal options" "" stty(1)
.xx "" "clear: clear" "terminal screen" "" clear(1)
.xx "" "script: make typescript of" "terminal session" "" script(1)
.xx "" "stty, gtty: set and get" "terminal state (defunct)" "" stty(3C)
.xx "" "tabs: set" "terminal tabs" "" tabs(1)
.xx "" "ttytype: data base of" "terminal types by port" "" ttytype(5)
.xx "development" "host: remote virtual" "terminal/fileserver for standalone program" "" host(1)
.xx "" "getpseudotty, ispseudotty: get or query pseudo" "terminals" "" getpseudotty(3)
.xx "" "term: conventional names for" "terminals" "" term(7)
.xx "" "wait, wait3: wait for process to" "terminate" "" wait(2)
.xx "" "_exit:" "terminate a process" "" exit(2)
.xx "output" "exit:" "terminate a process after flushing any pending" "" exit(3)
.xx "" "kill:" "terminate a process with extreme prejudice" "" kill(1)
.xx "" "endif:" "terminate conditional." "" csh(1)
.xx "" "end:" "terminate loop." "" csh(1)
.xx "" "endsw:" "terminate switch." "" csh(1)
.xx "" "usclk_conf: microsecond clock confidence" "test" "" usclk_conf(8)
.xx "" "" "test: condition command" "" test(1)
.xx "" "drtest: standalone disk" "test program" "" drtest(8S)
.xx "" "quiz:" "test your knowledge" "" quiz(6)
.xx "" "sticky: executable files with persistent" "text" "" sticky(8)
.xx "" "file perusal filter for crt viewing of compressed" "text" "zmore:" zmore(1)
.xx "" "ed:" "text editor" "" ed(1)
.xx "" "ex, edit:" "text editor" "" ex(1)
.xx "" "fmt: simple" "text formatter" "" fmt(1)
.xx "" "nroff:" "text formatting" "" nroff(1)
.xx "" "troff, nroff:" "text formatting and typesetting" "" troff(1)
.xx "" "ms:" "text formatting macros" "" ms(7)
.xx "" "" "tftp: trivial file transfer program" "" tftp(1C)
.xx "" "tftpd: DARPA" "Trivial File Transfer Protocol server" "" tftpd(8C)
.xx "terminal independent operation routines" "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto, tputs:" "" termcap(3X)
.xx "independent operation routines" "tgetent, tgetnum," "tgetflag, tgetstr, tgoto, tputs: terminal" "" termcap(3X)
.xx "independent operation routines" "tgetent," "tgetnum, tgetflag, tgetstr, tgoto, tputs: terminal" "" termcap(3X)
.xx "operation routines" "tgetent, tgetnum, tgetflag," "tgetstr, tgoto, tputs: terminal independent" "" termcap(3X)
.xx "routines" "tgetent, tgetnum, tgetflag, tgetstr," "tgoto, tputs: terminal independent operation" "" termcap(3X)
.xx "" "diction, explain: print wordy sentences;" "thesaurus for diction" "" diction(1)
.xx "" "explain, diction: print wordy sentences;" "thesaurus for diction" "" explain(1)
.xx "" "merge:" "three-way file merge" "" merge(1)
.xx "" "alarm: schedule signal after specified" "time" "" alarm(3C)
.xx "" "at: execute commands at a later" "time" "" at(1)
.xx "" "gettimeofday, settimeofday: get/set date and" "time" "" gettimeofday(2)
.xx "" "shutdown: close down the system at a given" "time" "" shutdown(8)
.xx "" "time, ftime: get date and" "time" "" time(3C)
.xx "" "time, ptime:" "time a command" "" time(1)
.xx "" "time:" "time command." "" csh(1)
.xx "" "" "time, ftime: get date and time" "" time(3C)
.xx "" "profil: execution" "time profile" "" profil(2)
.xx "" "" "time, ptime: time a command" "" time(1)
.xx "" "" "time: time command." "" csh(1)
.xx "" "gmtime, asctime, timezone: convert date and" "time to ASCII" "ctime, localtime," ctime(3)
.xx "" "getitimer, setitimer: get/set value of interval" "timer" "" getitimer(2)
.xx "" "times: get process" "times" "" times(3C)
.xx "" "utime: set file" "times" "" utime(3C)
.xx "" "utimes: set file" "times" "" utimes(2)
.xx "" "" "times: get process times" "" times(3C)
.xx "" "exit, export, login, read, readonly, set, shift, [," "times, trap, umask, wait: command language" "/exec," sh(1)
.xx "" "ctime, localtime, gmtime, asctime," "timezone: convert date and time to ASCII" "" ctime(3)
.xx "" "" "tip, cu: connect to a remote system" "" tip(1C)
.xx "" "" "tk: paginator for the Tektronix 4014" "" tk(1)
.xx "" "" "tmp_affinity: bind a process to a processor" "" tmp_affinity(2)
.xx "" "" "tmp_ctl: multi-processor control" "" tmp_ctl(2)
.xx "and/" "/islower, isprint, ispunct, isspace, isupper," "toascii, tolower, toupper: character classification" "" ctype(3)
.xx "" "/isprint, ispunct, isspace, isupper, toascii," "tolower, toupper: character classification and/" "" ctype(3)
.xx "" "tsort:" "topological sort" "" tsort(1)
.xx "" "" "touch: update date last modified of a file" "" touch(1)
.xx "macros" "/ispunct, isspace, isupper, toascii, tolower," "toupper: character classification and conversion" "" ctype(3)
.xx "" "" "tp: DEC/mag tape formats" "" tp(5)
.xx "" "" "tp: manipulate tape archive" "" tp(1)
.xx "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto," "tputs: terminal independent operation routines" "" termcap(3X)
.xx "" "" "tr: translate characters" "" tr(1)
.xx "" "ptrace: process" "trace" "" ptrace(2)
.xx "" "trpt: transliterate protocol" "trace" "" trpt(8C)
.xx "" "mount: keep" "track of remotely mounted filesystems" "" mount(3R)
.xx "" "copy2: perform a standalone data" "transfer" "" copy2(8S)
.xx "" "copy: perform a standalone simple data" "transfer" "" copy(8S)
.xx "" "goto: command" "transfer." "" csh(1)
.xx "" "uucico, uucpd:" "transfer files queued by uucp or uux" "" uucico(8C)
.xx "" "ftp: ARPANET file" "transfer program" "" ftp(1C)
.xx "" "tftp: trivial file" "transfer program" "" tftp(1C)
.xx "" "ftpd: DARPA Internet File" "Transfer Protocol server" "" ftpd(8C)
.xx "" "tftpd: DARPA Trivial File" "Transfer Protocol server" "" tftpd(8C)
.xx "" "tr:" "translate characters" "" tr(1)
.xx "macros" "trman: translate version 6" "manual macros to version 7" "" trman(1)
.xx "" "trpt:" "transliterate protocol trace" "" trpt(8C)
.xx "" "tcp: Internet" "Transmission Control Protocol" "" tcp(4P)
.xx "" "uuencode, uudecode: encode/decode a binary file for" "transmission via mail" "" uuencode(1C)
.xx "" "export, login, read, readonly, set, shift, [, times," "trap, umask, wait: command language" "/exec, exit," sh(1)
.xx "" "" "trek: trekkie game" "" trek(6)
.xx "" "trek:" "trekkie game" "" trek(6)
.xx "" "sin, cos, tan, asin, acos, atan, atan2:" "trigonometric functions" "" sin(3M)
.xx "" "tftp:" "trivial file transfer program" "" tftp(1C)
.xx "" "tftpd: DARPA" "Trivial File Transfer Protocol server" "" tftpd(8C)
.xx "7 macros" "trman: translate" "version 6 manual macros to version" "" trman(1)
.xx "" "tbl: format tables for nroff or" "troff" "" tbl(1)
.xx "" "checknr: check nroff/" "troff files" "" checknr(1)
.xx "" "" "troff, nroff: text formatting and typesetting" "" troff(1)
.xx "" "deroff: remove nroff," "troff, tbl and eqn constructs" "" deroff(1)
.xx "" "vtroff:" "troff to a raster plotter" "" vtroff(1)
.xx "" "vwidth: make" "troff width table for a font" "" vwidth(1)
.xx "" "" "trpt: transliterate protocol trace" "" trpt(8C)
.xx "" "" "true, false: provide truth values" "" true(1)
.xx "" "false," "true: provide truth values" "" false(1)
.xx "" "truncate, ftruncate:" "truncate a file to a specified length" "" truncate(2)
.xx "length" "" "truncate, ftruncate: truncate a file to a specified" "" truncate(2)
.xx "" "hosts.equiv: list of" "trusted hosts" "" hosts.equiv(5)
.xx "" "pdp11, u3b, u3b2, u3b5, vax: get processor type" "truth value" "machid: ns32000, i386," machid(1)
.xx "" "false, true: provide" "truth values" "" false(1)
.xx "" "true, false: provide" "truth values" "" true(1)
.xx "" "" "ts: SCSI tape controller" "" ts(4)
.xx "" "" "tset: terminal dependent initialization" "" tset(1)
.xx "" "" "tsort: topological sort" "" tsort(1)
.xx "" "" "tty: general terminal interface" "" tty(4)
.xx "" "" "tty: get terminal name" "" tty(1)
.xx "" "ttyconfig: configure Systech" "tty lines" "" ttyconfig(8)
.xx "" "" "ttyconfig: configure Systech tty lines" "" ttyconfig(8)
.xx "" "" "ttyname, isatty, ttyslot: find name of a terminal" "" ttyname(3)
.xx "" "" "ttys: terminal initialization data" "" ttys(5)
.xx "" "ttyname, isatty," "ttyslot: find name of a terminal" "" ttyname(3)
.xx "" "" "ttytype: data base of terminal types by port" "" ttytype(5)
.xx "" "vmtune:" "tune system-wide virtual-memory parameters" "" vmtune(8)
.xx "" "tunefs:" "tune up an existing file system" "" tunefs(8)
.xx "" "" "tunefs: tune up an existing file system" "" tunefs(8)
.xx "" "vm_ctl: examine and change virtual memory" "tuning parameters" "" vm_ctl(2)
.xx "" "file: determine file" "type" "" file(1)
.xx "" "i386, pdp11, u3b, u3b2, u3b5, vax: get processor" "type truth value" "machid: ns32000," machid(1)
.xx "" "sdb: symbol table" "types" "" sdb(5)
.xx "" "stab: symbol table" "types" "" stab(5)
.xx "" "types: primitive system data" "types" "" types(5)
.xx "" "ttytype: data base of terminal" "types by port" "" ttytype(5)
.xx "" "" "types: primitive system data types" "" types(5)
.xx "" "script: make" "typescript of terminal session" "" script(1)
.xx "" "man: macros to" "typeset manual" "" man(7)
.xx "" "eqn, neqn, checkeq:" "typeset mathematics" "" eqn(1)
.xx "" "troff, nroff: text formatting and" "typesetting" "" troff(1)
.xx "" "machid: ns32000, i386, pdp11," "u3b, u3b2, u3b5, vax: get processor type truth value" "" machid(1)
.xx "" "machid: ns32000, i386, pdp11, u3b," "u3b2, u3b5, vax: get processor type truth value" "" machid(1)
.xx "" "machid: ns32000, i386, pdp11, u3b, u3b2," "u3b5, vax: get processor type truth value" "" machid(1)
.xx "" "universe, att," "ucb: universe manipulations" "" universe(1)
.xx "" "" "udp: Internet User Datagram Protocol" "" udp(4P)
.xx "" "getpw: get name from" "uid" "" getpw(3C)
.xx "" "" "ul: do underlining" "" ul(1)
.xx "" "" "umask: change or display file creation mask." "" csh(1)
.xx "" "" "umask: set file creation mode mask" "" umask(2)
.xx "" "login, read, readonly, set, shift, [, times, trap," "umask, wait: command language" "/exec, exit, export," sh(1)
.xx "" "mount," "umount: mount and dismount filesystems" "" mount(8)
.xx "" "" "unalias: remove aliases." "" csh(1)
.xx "cat them" "compact, uncompact, ccat:" "compress and uncompress files, and" "" compact(1)
.xx "" "compressdir, uncompressdir: compress and" "uncompress directories of files" "" compressdir(1)
.xx "" "compact, uncompact, ccat: compress and" "uncompress files, and cat them" "" compact(1)
.xx "" "compress," "uncompress, zcat: compress and expand data" "" compress(1)
.xx "of files" "compressdir, uncompressdir:" "compress and uncompress directories" "" compressdir(1)
.xx "" "ul: do" "underlining" "" ul(1)
.xx "" "expand," "unexpand: expand tabs to spaces, and vice versa" "" expand(1)
.xx "" "" "ungetc: push character back into input stream" "" ungetc(3S)
.xx "" "" "unhash: discard command hash table." "" csh(1)
.xx "" "" "unifdef: remove ifdef'ed lines" "" unifdef(1)
.xx "" "" "uniq: report repeated lines in a file" "" uniq(1)
.xx "" "mktemp: make a" "unique file name" "" mktemp(3)
.xx "" "gethostid, sethostid: get/set" "unique identifier of current host" "" gethostid(2)
.xx "" "" "units: conversion program" "" units(1)
.xx "" "" "universe, att, ucb: universe manipulations" "" universe(1)
.xx "" "" "universe: change the universe for a process" "" universe(2)
.xx "" "universe: change the" "universe for a process" "" universe(2)
.xx "" "universe, att, ucb:" "universe manipulations" "" universe(1)
.xx "" "learn: computer aided instruction about" "UNIX" "" learn(1)
.xx "" "uux: unix to" "unix command execution" "" uux(1C)
.xx "" "uucp: unix to" "unix copy" "" uucp(1C)
.xx "" "vfontinfo: inspect and print out information about" "UNIX fonts" "" vfontinfo(1)
.xx "" "mtio:" "UNIX magtape interface" "" mtio(4)
.xx "" "uux:" "unix to unix command execution" "" uux(1C)
.xx "" "uucp:" "unix to unix copy" "" uucp(1C)
.xx "" "" "unlimit: remove resource limitiations." "" csh(1)
.xx "" "rmdir, rm: remove (" "unlink) directories or files" "" rmdir(1)
.xx "" "rm, rmdir: remove (" "unlink) files or directories" "" rm(1)
.xx "" "" "unlink: remove directory entry" "" unlink(2)
.xx "" "m_lock, m_unlock: lock," "unlock locks" "" m_lock(3P)
.xx "" "s_lock, s_clock, s_unlock: initialize, lock," "unlock locks" "s_init_lock," s_lock(3P)
.xx "" "munmap:" "unmap part of the process's address space" "" munmap(2)
.xx "" "unmount:" "unmount a file system" "" unmount(2)
.xx "" "" "unmount: unmount a file system" "" unmount(2)
.xx "" "" "unset: discard shell variables." "" csh(1)
.xx "" "" "unsetenv: remove environment variables." "" csh(1)
.xx "" "btoa, atob, tarmail, untarmail:" "encode/decode binary to printable ASCII" "" btoa(1)
.xx "" "uptime: show how long system has been" "up" "" uptime(1)
.xx "" "uuclean: uucp spool directory clean-" "up" "" uuclean(8C)
.xx "" "tunefs: tune" "up an existing file system" "" tunefs(8)
.xx "" "boot: run a standalone program or bring" "up DYNIX" "" boot(8S)
.xx "" "touch:" "update date last modified of a file" "" touch(1)
.xx "" "" "update: periodically update the super block" "" update(8)
.xx "" "sync:" "update super-block" "" sync(2)
.xx "" "sync:" "update the super block" "" sync(8)
.xx "" "update: periodically" "update the super block" "" update(8)
.xx "" "yppasswd:" "update user password in yellow pages" "" yppasswd(3R)
.xx "" "" "uptime: show how long system has been up" "" uptime(1)
.xx "" "du: summarize disk" "usage" "" du(1)
.xx "" "gate: SLIC gate" "usage" "" gate(4)
.xx "" "quota: display disk" "usage and limits" "" quota(1)
.xx "" "" "usclk: 32-bit microsecond counter" "" usclk(4)
.xx "" "" "usclk_conf: microsecond clock confidence test" "" usclk_conf(8)
.xx "" "getusclk," "usclk_init: get/init microsecond clock" "" getusclk(3)
.xx "" "getdtablemax: get maximum in-" "use descriptor table index" "" getdtablemax(2)
.xx "" "what: show what versions of object modules were" "used to construct a file" "" what(1)
.xx "" "miscellaneous: miscellaneous" "useful information pages" "" intro(7)
.xx "" "login: login new" "user." "" csh(1)
.xx "" "talk: talk to another" "user" "" talk(1)
.xx "" "write: write to another" "user" "" write(1)
.xx "" "seteuid, setruid, setgid, setegid, setrgid: set" "user and group ID" "setuid," setuid(3)
.xx "" "udp: Internet" "User Datagram Protocol" "" udp(4P)
.xx "" "environ:" "user environment" "" environ(7)
.xx "" "whoami: print effective current" "user id" "" whoami(1)
.xx "" "su: substitute" "user id temporarily" "" su(1)
.xx "" "getuid, geteuid: get" "user identity" "" getuid(2)
.xx "" "setreuid: set real and effective" "user ID's" "" setreuid(2)
.xx "" "finger:" "user information lookup program" "" finger(1)
.xx "" "telnet:" "user interface to the TELNET protocol" "" telnet(1C)
.xx "" "yppasswd: update" "user password in yellow pages" "" yppasswd(3R)
.xx "" "edquota: edit" "user quotas" "" edquota(8)
.xx "" "sail: multi-" "user wooden ships and iron men" "" sail(6)
.xx "" "" "USERFILE: UUCP pathname permissions file" "" userfile(5)
.xx "" "rusersd: network" "username server" "" rusersd(8C)
.xx "" "adduser: procedure for adding new" "users" "" adduser(8)
.xx "" "binmail: send or receive mail among" "users" "" binmail(1)
.xx "" "wall: write to all" "users" "" wall(1)
.xx "" "last: indicate last logins of" "users and teletypes" "" last(1)
.xx "" "" "users: compact list of users who are on the system" "" users(1)
.xx "" "rnusers, rusers: return information about" "users on remote machines" "" rnusers(3R)
.xx "" "rwall: write to all" "users over a network" "" rwall(1)
.xx "" "users: compact list of" "users who are on the system" "" users(1)
.xx "" "cat: standalone file display" "utility" "" cat(8S)
.xx "" "getrusage: get information about resource" "utilization" "" getrusage(2)
.xx "" "vtimes: get information about resource" "utilization" "" vtimes(3C)
.xx "" "" "utime: set file times" "" utime(3C)
.xx "" "" "utimes: set file times" "" utimes(2)
.xx "" "" "utmp, wtmp: login records" "" utmp(5)
.xx "" "" "uucico, uucpd: transfer files queued by uucp or uux" "" uucico(8C)
.xx "" "" "uuclean: uucp spool directory clean-up" "" uuclean(8C)
.xx "" "rmail: handle remote mail received via" "uucp" "" rmail(1)
.xx "" "L-devices:" "UUCP device description file" "" l-devices(5)
.xx "" "uuxqt:" "UUCP execution file interpreter" "" uuxqt(8C)
.xx "" "L.aliases:" "UUCP hostname alias file" "" l.aliases(5)
.xx "" "uuname: list names of" "UUCP hosts" "" uuname(1C)
.xx "" "uulog: display" "UUCP log files" "" uulog(1C)
.xx "" "uucico, uucpd: transfer files queued by" "uucp or uux" "" uucico(8C)
.xx "" "USERFILE:" "UUCP pathname permissions file" "" userfile(5)
.xx "" "L-dialcodes:" "UUCP phone number index file" "" l-dialcodes(5)
.xx "" "uuq: examine or manipulate the" "uucp queue" "" uuq(1C)
.xx "" "L.cmds:" "UUCP remote command permissions file" "" l.cmds(5)
.xx "" "L.sys:" "UUCP remote host description file" "" l.sys(5)
.xx "" "uupoll: poll a remote" "UUCP site" "" uupoll(8C)
.xx "" "uuclean:" "uucp spool directory clean-up" "" uuclean(8C)
.xx "" "uusnap: show snapshot of the" "UUCP system" "" uusnap(8C)
.xx "" "" "uucp: unix to unix copy" "" uucp(1C)
.xx "" "uucico," "uucpd: transfer files queued by uucp or uux" "" uucico(8C)
.xx "transmission via mail" "uuencode," "uudecode: encode/decode a binary file for" "" uuencode(1C)
.xx "" "uuencode: format of an encoded" "uuencode file" "" uuencode(5)
.xx "" "" "uuencode: format of an encoded uuencode file" "" uuencode(5)
.xx "" "" "uulog: display UUCP log files" "" uulog(1C)
.xx "" "" "uuname: list names of UUCP hosts" "" uuname(1C)
.xx "" "" "uupoll: poll a remote UUCP site" "" uupoll(8C)
.xx "" "" "uuq: examine or manipulate the uucp queue" "" uuq(1C)
.xx "" "" "uusend: send a file to a remote host" "" uusend(1C)
.xx "" "" "uusnap: show snapshot of the UUCP system" "" uusnap(8C)
.xx "" "uucico, uucpd: transfer files queued by uucp or" "uux" "" uucico(8C)
.xx "" "" "uux: unix to unix command execution" "" uux(1C)
.xx "" "" "uuxqt: UUCP execution file interpreter" "" uuxqt(8C)
.xx "" "" "valloc: aligned memory allocator" "" valloc(3)
.xx "" "abs: integer absolute" "value" "" abs(3)
.xx "" "u3b, u3b2, u3b5, vax: get processor type truth" "value" "machid: ns32000, i386, pdp11," machid(1)
.xx "" "fabs, floor, ceil: absolute" "value, floor, ceiling functions" "" floor(3M)
.xx "" "getenv:" "value for environment name" "" getenv(3)
.xx "" "readclink: read" "value of a conditional symbolic link" "" readclink(2)
.xx "" "readlink: read" "value of a symbolic link" "" readlink(2)
.xx "" "getitimer, setitimer: get/set" "value of interval timer" "" getitimer(2)
.xx "" "set: change" "value of shell variable." "" csh(1)
.xx "" "false, true: provide truth" "values" "" false(1)
.xx "" "true, false: provide truth" "values" "" true(1)
.xx "" "htonl, htons, ntohl, ntohs: convert" "values between host and network byte order" "" byteorder(3N)
.xx "" "" "varargs: variable argument list" "" varargs(3)
.xx "" "set: change value of shell" "variable." "" csh(1)
.xx "" "varargs:" "variable argument list" "" varargs(3)
.xx "" "setenv: set" "variable in environment." "" csh(1)
.xx "" "@: arithmetic on shell" "variables." "" csh(1)
.xx "" "unset: discard shell" "variables." "" csh(1)
.xx "" "unsetenv: remove environment" "variables." "" csh(1)
.xx "" "vfont: font formats for the Benson-" "Varian or Versatec" "" vfont(5)
.xx "" "proc_ctl: control over" "various process attributes" "" proc_ctl(2)
.xx "" "machid: ns32000, i386, pdp11, u3b, u3b2, u3b5," "vax: get processor type truth value" "" machid(1)
.xx "" "getopt: get option letter from argument" "vector" "" getopt(3X)
.xx "" "assert: program" "verification" "" assert(3X)
.xx "" "lint: a C program" "verifier" "" lint(1)
.xx "" "expand, unexpand: expand tabs to spaces, and vice" "versa" "" expand(1)
.xx "" "vfont: font formats for the Benson-Varian or" "Versatec" "" vfont(5)
.xx "" "rup: show host status of local machines (RPC" "version)" "" rup(1C)
.xx "" "rusers: who's logged in on local machines (RPC" "version)" "" rusers(1C)
.xx "" "trman: translate" "version 6 manual macros to version 7 macros" "" trman(1)
.xx "" "trman: translate version 6 manual macros to" "version 7 macros" "" trman(1)
.xx "" "" "version: display DYNIX version number" "" version(8)
.xx "" "version: display DYNIX" "version number" "" version(8)
.xx "" "hangman: Computer" "version of the game hangman" "" hangman(6)
.xx "file" "what: show what" "versions of object modules were used to construct a" "" what(1)
.xx "Versatec" "" "vfont: font formats for the Benson-Varian or" "" vfont(5)
.xx "UNIX fonts" "" "vfontinfo: inspect and print out information about" "" vfontinfo(1)
.xx "efficient way" "" "vfork: spawn new process in a virtual memory" "" vfork(2)
.xx "" "" "vgrind: grind nice listings of programs" "" vgrind(1)
.xx "" "" "vgrindefs: vgrind's language definition data base" "" vgrindefs(5)
.xx "" "vgrindefs:" "vgrind's language definition data base" "" vgrindefs(5)
.xx "terminal" "" "vhangup: virtually ``hangup'' the current control" "" vhangup(2)
.xx "based on ex" "" "vi, view: screen oriented (visual) display editor" "" vi(1)
.xx "" "a.vi:" "vi with extensions for Ada source files" "" a.vi(1)
.xx "" "encode/decode a binary file for transmission" "via mail" "uuencode, uudecode:" uuencode(1C)
.xx "" "rmail: handle remote mail received" "via uucp" "" rmail(1)
.xx "" "expand, unexpand: expand tabs to spaces, and" "vice versa" "" expand(1)
.xx "on ex" "vi," "view: screen oriented (visual) display editor based" "" vi(1)
.xx "" "more, page: file perusal filter for crt" "viewing" "" more(1)
.xx "" "zmore: file perusal filter for crt" "viewing of compressed text" "" zmore(1)
.xx "" "" "vipw: edit the password file" "" vipw(8)
.xx "" "pmap: map physical addresses into process's" "virtual address space" "" pmap(4)
.xx "" "vfork: spawn new process in a" "virtual memory efficient way" "" vfork(2)
.xx "" "vmstat: report" "virtual memory statistics" "" vmstat(1)
.xx "" "vm_ctl: examine and change" "virtual memory tuning parameters" "" vm_ctl(2)
.xx "development" "host: remote" "virtual terminal/fileserver for standalone program" "" host(1)
.xx "" "vhangup:" "virtually ``hangup'' the current control terminal" "" vhangup(2)
.xx "" "vmtune: tune system-wide" "virtual-memory parameters" "" vmtune(8)
.xx "" "pmap: display or alter parameters of" "virtual-to-physical mapping devices" "" pmap(8)
.xx "" "vi, view: screen oriented (" "visual) display editor based on ex" "" vi(1)
.xx "" "vlimit: control maximum" "system resource consumption" "" vlimit(3C)
.xx "parameters" "" "vm_ctl: examine and change virtual memory tuning" "" vm_ctl(2)
.xx "" "" "vmstat: report virtual memory statistics" "" vmstat(1)
.xx "" "vmtune: tune" "system-wide virtual-memory parameters" "" vmtune(8)
.xx "" "fs, inode: format of file system" "volume" "" fs(5)
.xx "" "vpr, vprm," "vpq, vprint: raster printer/plotter spooler" "" vpr(1)
.xx "spooler" "" "vpr, vprm, vpq, vprint: raster printer/plotter" "" vpr(1)
.xx "" "vpr, vprm, vpq," "vprint: raster printer/plotter spooler" "" vpr(1)
.xx "" "vpr," "vprm, vpq, vprint: raster printer/plotter spooler" "" vpr(1)
.xx "" "" "vtimes: get information about resource utilization" "" vtimes(3C)
.xx "" "" "vtroff: troff to a raster plotter" "" vtroff(1)
.xx "" "" "vwidth: make troff width table for a font" "" vwidth(1)
.xx "" "" "w: who is on and what they are doing" "" w(1)
.xx "" "s_init_barrier, s_wait_barrier: initialize barrier," "wait at barrier" "" s_wait_barrier(3P)
.xx "" "" "wait: await completion of process" "" wait(1)
.xx "" "read, readonly, set, shift, [, times, trap, umask," "wait: command language" "/exec, exit, export, login," sh(1)
.xx "" "wait:" "wait for background processes to complete." "" csh(1)
.xx "" "sigpause: atomically release blocked signals and" "wait for interrupt" "" sigpause(2)
.xx "" "wait, wait3:" "wait for process to terminate" "" wait(2)
.xx "" "" "wait: wait for background processes to complete." "" csh(1)
.xx "" "" "wait, wait3: wait for process to terminate" "" wait(2)
.xx "" "wait," "wait3: wait for process to terminate" "" wait(2)
.xx "" "" "wall: write to all users" "" wall(1)
.xx "" "" "wc: word count" "" wc(1)
.xx "" "what: show what versions of object modules" "were used to construct a file" "" what(1)
.xx "" "whatis: describe" "what a command is" "" whatis(1)
.xx "were used to construct a file" "" "what: show what versions of object modules" "" what(1)
.xx "" "w: who is on and" "what they are doing" "" w(1)
.xx "construct a file" "what: show" "what versions of object modules were used to" "" what(1)
.xx "" "" "whatis: describe what a command is" "" whatis(1)
.xx "" "leave: remind you" "when you have to leave" "" leave(1)
.xx "program" "" "whereis: locate source, binary, and or manual for" "" whereis(1)
.xx "paths (csh only)" "" "which: locate a program file including aliases and" "" which(1)
.xx "export, login, read, readonly,/" "sh, for, case, if," "while, :, ., break, continue, cd, eval, exec, exit," "" sh(1)
.xx "" "" "while: repeat commands conditionally." "" csh(1)
.xx "" "break: exit" "while/foreach loop." "" csh(1)
.xx "" "users: compact list of users" "who are on the system" "" users(1)
.xx "" "from:" "who is my mail from?" "" from(1)
.xx "" "w:" "who is on and what they are doing" "" w(1)
.xx "" "who:" "who is on the system" "" who(1)
.xx "" "biff: be notified if mail arrives and" "who it is from" "" biff(1)
.xx "" "" "who: who is on the system" "" who(1)
.xx "" "" "whoami: print effective current user id" "" whoami(1)
.xx "" "rwho:" "who's logged in on local machines" "" rwho(1C)
.xx "" "rusers:" "who's logged in on local machines (RPC version)" "" rusers(1C)
.xx "" "vmtune: tune system-" "wide virtual-memory parameters" "" vmtune(8)
.xx "" "fold: fold long lines for finite" "width output device" "" fold(1)
.xx "" "vwidth: make troff" "width table for a font" "" vwidth(1)
.xx "" "fastboot, fasthalt: reboot/halt the system" "without checking the disks" "" fastboot(8)
.xx "" "sail: multi-user" "wooden ships and iron men" "" sail(6)
.xx "" "wc:" "word count" "" wc(1)
.xx "" "getc, getchar, fgetc, getw: get character or" "word from stream" "" getc(3S)
.xx "" "putc, putchar, fputc, putw: put character or" "word on a stream" "" putc(3S)
.xx "" "diction, explain: print" "wordy sentences; thesaurus for diction" "" diction(1)
.xx "" "explain, diction: print" "wordy sentences; thesaurus for diction" "" explain(1)
.xx "" "cd: change" "working directory" "" cd(1)
.xx "" "chdir: change current" "working directory" "" chdir(2)
.xx "" "pwd:" "working directory name" "" pwd(1)
.xx "" "getwd: get current" "working directory pathname" "" getwd(3)
.xx "" "worm: Play the growing" "worm game" "" worm(6)
.xx "" "" "worm: Play the growing worm game" "" worm(6)
.xx "" "" "worms: animate worms on a display terminal" "" worms(6)
.xx "" "worms: animate" "worms on a display terminal" "" worms(6)
.xx "" "bad144: read/" "write dec standard 144 bad sector information" "" bad144(8)
.xx "" "write, writev:" "write on a file" "" write(2)
.xx "" "lseek: move read/" "write pointer" "" lseek(2)
.xx "" "wall:" "write to all users" "" wall(1)
.xx "" "rwall:" "write to all users over a network" "" rwall(1)
.xx "" "write:" "write to another user" "" write(1)
.xx "" "rwall:" "write to specified remote machines" "" rwall(3R)
.xx "" "" "write: write to another user" "" write(1)
.xx "" "" "write, writev: write on a file" "" write(2)
.xx "" "write," "writev: write on a file" "" write(2)
.xx "" "open: open a file for reading or" "writing, or create a new file" "" open(2)
.xx "" "utmp," "wtmp: login records" "" utmp(5)
.xx "" "" "wump: the game of hunt-the-wumpus" "" wump(6)
.xx "" "wump: the game of hunt-the-" "wumpus" "" wump(6)
.xx "command" "" "xargs: construct argument list(s) and execute" "" xargs(1)
.xx "representation" "" "xdr: library routines for external data" "" xdr(3N)
.xx "" "xsend," "xget, enroll: secret mail" "" xsend(1)
.xx "" "" "xp: Xylogics 450 MULTIBUS disk interface" "" xp(4)
.xx "" "" "xpformat: standalone 400-Mbyte disk formatter" "" xpformat(8S)
.xx "" "" "xsend, xget, enroll: secret mail" "" xsend(1)
.xx "shared strings" "" "xstr: extract strings from C programs to implement" "" xstr(1)
.xx "" "" "xt: Xylogics 472 MULTIBUS magtape interface" "" xt(4)
.xx "" "xp:" "Xylogics 450 MULTIBUS disk interface" "" xp(4)
.xx "" "xt:" "Xylogics 472 MULTIBUS magtape interface" "" xt(4)
.xx "" "j0, j1, jn," "y0, y1, yn: bessel functions" "" j0(3M)
.xx "" "j0, j1, jn, y0," "y1, yn: bessel functions" "" j0(3M)
.xx "" "eyacc: modified" "yacc allowing much improved error recovery" "" eyacc(1)
.xx "" "" "yacc: yet another compiler-compiler" "" yacc(1)
.xx "" "yppasswd: update user password in" "yellow pages" "" yppasswd(3R)
.xx "" "yp_all yp_order yp_master yperr_string ypprot_err:" "yellow pages client interface" "/yp_first yp_next" ypclnt(3N)
.xx "" "" "yes: be repetitively affirmative" "" yes(1)
.xx "" "j0, j1, jn, y0, y1," "yn: bessel functions" "" j0(3M)
.xx "yellow/" "/yp_bind yp_unbind yp_match yp_first yp_next" "yp_all yp_order yp_master yperr_string ypprot_err:" "" ypclnt(3N)
.xx "" "/yp_match yp_first yp_next yp_all yp_order yp_master" "yperr_string ypprot_err: yellow pages client/" "" ypclnt(3N)
.xx "" "yp_get_default_domain yp_bind yp_unbind yp_match" "yp_first yp_next yp_all yp_order yp_master/" "ypclnt" ypclnt(3N)
.xx "" "/yp_unbind yp_match yp_first yp_next yp_all yp_order" "yp_master yperr_string ypprot_err: yellow pages/" "" ypclnt(3N)
.xx "ypprot_err:/" "/yp_bind yp_unbind yp_match yp_first" "yp_next yp_all yp_order yp_master yperr_string" "" ypclnt(3N)
.xx "" "" "yppasswd: update user password in yellow pages" "" yppasswd(3R)
.xx "" "yp_next yp_all yp_order yp_master yperr_string" "ypprot_err: yellow pages client interface" "/yp_first" ypclnt(3N)
.xx "" "compress, uncompress," "zcat: compress and expand data" "" compress(1)
.xx "" "" "zcmp, zdiff: compare compressed files" "" zcmp(1)
.xx "" "" "zd: Sequent Dual-Channel Disk Controller" "" zd(4)
.xx "disk controller" "zdformat: standalone disk" "formatter for dual-channel" "" zdformat(8S)
.xx "" "zcmp," "zdiff: compare compressed files" "" zcmp(1)
.xx "compressed text" "" "zmore: file perusal filter for crt viewing of" "" zmore(1)
