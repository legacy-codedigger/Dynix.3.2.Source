.\" $Copyright:	$
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990 
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: if.4n 1.7 87/08/06 $
.\" @(#)if.4n 1.1 85/12/28 SMI;
.TH IF 4N "\*(V)" "4BSD"
.SH NAME
if \- general properties of network interfaces
.SH DESCRIPTION
.\".IX  "if device"  ""  "\f2if\fP \(em network interface general properties"  ""  PAGE START
Each network interface in a system corresponds to a
path through which messages can be sent and received.  A network
interface usually has a hardware device associated with it, although
certain interfaces such as the loopback interface,
.IR lo (4),
do not.
.LP
During the autoconfiguration process at boot time,
each interface that has underlying hardware support
makes itself known to the system.
Once the interface has acquired its address,
it is expected to install a routing table entry so that messages can
be routed through it.  Most interfaces require some part of
their address specified with an SIOCSIFADDR ioctl before they
allow traffic to flow through them.  On interfaces where
the network-link layer address mapping is static, only the
network number is taken from the ioctl; the remainder
is found in a hardware specific manner.
Interfaces that provide dynamic network-link layer address mapping facilities,
such as 10Mb/s Ethernets using
.IR arp (4P),),
use the entire address specified in the ioctl.
.LP
The following 
.I ioctl
calls can be used to manipulate network interfaces.  Unless
specified otherwise, the request takes an
.I ifreq
structure as its parameter.  This structure has the form
.if t .ta \w'struct\0\0\0'u +\w'union\0\0'u +\w'struct\0sockaddr\0\0\0\0'u +\w'ifru_broadaddr;\0\0\0\0'u
.if n .ta \w'struct\0\0'u +\w'union\0\0'u +\w'struct\0sockaddr\0\0'u +\w'ifru_broadaddr;\0\0'u
.Ps
struct	ifreq {
	char	ifr_name[16];	/* name of interface (e.g. "ec0") */
	union {
		struct sockaddr	ifru_addr;
		struct sockaddr	ifru_dstaddr;
		struct sockaddr	ifru_broadaddr;
		short	ifru_flags;
		int	ifru_metric;
		short	ifru_mtu;
	} ifr_ifru;
.Pe
.if t .ta \w'#define ifr_broadaddr\0\0\0\0\0'u +\w'ifr_ifru.ifru_broadaddr\0\0\0\0\0\0\0'u
.if n .ta \w'#define ifr_broadaddr\0'u +\w'ifr_ifru.ifru_broadaddr\0'u
.Ps
#define ifr_addr	ifr_ifru.ifru_addr	/* address */
#define ifr_dstaddr	ifr_ifru.ifru_dstaddr	/* other end of p-to-p link */
#define ifr_broadaddr	ifr_ifru.ifru_broadaddr	/* broadcast address */
#define ifr_flags	ifr_ifru.ifru_flags	/* flags */
#define ifr_metric	ifr_ifru.ifru_metric	/* routing metric */
#define ifr_mtu	ifr_ifru.ifru_mtu	/* mtu */
};
.Pe
.IP SIOCSIFADDR 5
.\".IX  "ioctls for sockets"  "SIOCSIFADDR"  "\f2ioctl\fP's for sockets"  "\f2SIOCSIFADDR\fP \(em set ifnet address"
.\".IX  "SIOCSIFADDR set ifnet address"  ""  "\f2SIOCSIFADDR\fP \(em set ifnet address"
.\".IX  "set ifnet address ioctl"  ""  "set ifnet address \f2ioctl\fP \(em \f2SIOCSIFADDR\fP"
.\".IX  "network interface ioctls"  SIOCSIFADDR  "network interface \f2ioctl\fP's" "\f2SIOCSIFADDR\fP \(em set ifnet address"
Set interface address.  Following the address
assignment, the ``initialization'' routine for
the interface is called.
.IP SIOCGIFADDR
.\".IX  "ioctls for sockets"  "SIOCGIFADDR"  "\f2ioctl\fP's for sockets"  "\f2SIOCGIFADDR\fP \(em get ifnet address"
.\".IX  "SIOCGIFADDR get ifnet address"  ""  "\f2SIOCGIFADDR\fP \(em get ifnet address"
.\".IX  "get ifnet address ioctl"  ""  "get ifnet address \f2ioctl\fP \(em \f2SIOCGIFADDR\fP"
.\".IX  "network interface ioctls"  SIOCGIFADDR  "network interface \f2ioctl\fP's" "\f2SIOCGIFADDR\fP \(em get ifnet address"
Get interface address.
.IP SIOCSIFDSTADDR
.\".IX  "ioctls for sockets"  "SIOCSIFDSTADDR"  "\f2ioctl\fP's for sockets"  "\f2SIOCSIFDSTADDR\fP \(em set p-p address"
.\".IX  "SIOCSIFDSTADDR set p-p address"  ""  "\f2SIOCSIFDSTADDR\fP \(em set p-p address"
.\".IX  "set p-p address ioctl"  ""  "set p-p address \f2ioctl\fP \(em \f2SIOCSIFDSTADDR\fP"
.\".IX  "network interface ioctls"  SIOCSIFDSTADDR  "network interface \f2ioctl\fP's" "\f2SIOCSIFDSTADDR\fP \(em set p-p address"
Set point to point address for interface.
.IP SIOCGIFDSTADDR
.\".IX  "ioctls for sockets"  "SIOCGIFDSTADDR"  "\f2ioctl\fP's for sockets"  "\f2SIOCGIFDSTADDR\fP \(em get p-p address"
.\".IX  "SIOCGIFDSTADDR get p-p address"  ""  "\f2SIOCGIFDSTADDR\fP \(em get p-p address"
.\".IX  "get p-p address ioctl"  ""  "get p-p address \f2ioctl\fP \(em \f2SIOCGIFDSTADDR\fP"
.\".IX  "network interface ioctls"  SIOCGIFDSTADDR  "network interface \f2ioctl\fP's" "\f2SIOCGIFDSTADDR\fP \(em get p-p address"
Get point to point address for interface.
.IP SIOCSIFBRDADDR
Set broadcast address for protocol family and interface.
.IP SIOCGIFBRDADDR
Get broadcast address for protocol family and interface.
.IP SIOCSIFFLAGS
.\".IX  "ioctls for sockets"  "SIOCSIFFLAGS"  "\f2ioctl\fP's for sockets"  "\f2SIOCSIFFLAGS\fP \(em set ifnet flags"
.\".IX  "SIOCSIFFLAGS set ifnet flags"  ""  "\f2SIOCSIFFLAGS\fP \(em set ifnet flags"
.\".IX  "set ifnet flags ioctl"  ""  "set ifnet flags \f2ioctl\fP \(em \f2SIOCSIFFLAGS\fP"
.\".IX  "network interface ioctls"  SIOCSIFFLAGS  "network interface \f2ioctl\fP's" "\f2SIOCSIFFLAGS\fP \(em set ifnet flags"
Set interface flags field.  If the interface is marked down,
any processes currently routing packets through the interface
are notified.
.IP SIOCGIFFLAGS
.\".IX  "ioctls for sockets"  "SIOCGIFFLAGS"  "\f2ioctl\fP's for sockets"  "\f2SIOCGIFFLAGS\fP \(em get ifnet flags"
.\".IX  "SIOCGIFFLAGS get ifnet flags"  ""  "\f2SIOCGIFFLAGS\fP \(em get ifnet flags"
.\".IX  "get ifnet flags ioctl"  ""  "get ifnet flags \f2ioctl\fP \(em \f2SIOCGIFFLAGS\fP"
.\".IX  "network interface ioctls"  SIOCGIFFLAGS  "network interface \f2ioctl\fP's" "\f2SIOCGIFFLAGS\fP \(em get ifnet flags"
Get interface flags.
.IP SIOCSIFMETRIC
Set interface routing metric.
The metric is used only by user-level routers.
.IP SIOCGIFMETRIC
Get interface metric.
.IP SIOCGIFCONF
.\".IX  "ioctls for sockets"  "SIOCGIFCONF"  "\f2ioctl\fP's for sockets"  "\f2SIOCGIFCONF\fP \(em get ifnet list"
.\".IX  "SIOCGIFCONF get ifnet list"  ""  "\f2SIOCGIFCONF\fP \(em get ifnet list"
.\".IX  "get ifnet list ioctl"  ""  "get ifnet list \f2ioctl\fP \(em \f2SIOCGIFCONF\fP"
.\".IX  "network interface ioctls"  SIOCGIFCONF  "network interface \f2ioctl\fP's" "\f2SIOCGIFCONF\fP \(em get ifnet list"
Get interface configuration list.  This request takes an
.I ifconf
structure (see below) as a value-result parameter.  The 
.I ifc_len
field should be initially set to the size of the buffer
pointed to by 
.IR ifc_buf .
On return it will contain the length, in bytes, of the
configuration list.
.IP SIOCSIFMTU
set the maximum transfer unit (mtu) of an interface 
.IP SIOCGIFMTU
get the maximum transfer unit (mtu) of an interface 
.if t .ta \w'struct\0\0\0'u +\w'ifconf {\0\0\0'u +\w'struct ifreq\0\0\0\0\0'u
.if n .ta \w'struct\0\0'u +\w'ifconf {\0\0'u +\w'struct ifreq\0\0'u
.KS
.Ps
/*
 * Structure used in SIOCGIFCONF request.
 * Used to retrieve interface configuration
 * for machine (useful for programs which
 * must know all networks accessible).
 */
struct	ifconf	{
	int	ifc_len;	/* size of associated buffer */
	union	{
		caddr_t	ifcu_buf;
		struct ifreq	*ifcu_req;
	} ifc_ifcu;
.if t .ta \w'define ifc_req\0\0\0'u +\w'ifc_ifcu.ifcu_req\0\0\0'u
.if n .ta \w'define ifc_req\0\0'u +\w'ifc_ifcu.ifcu_req\0\0'u
#define ifc_buf	ifc_ifcu.ifcu_buf	/* buffer address */
#define ifc_req	ifc_ifcu.ifcu_req	/* array of structures returned */
};
.KE
.Pe
.SH "SEE ALSO"
arp(4P),
ec(4S),
en(4S),
lo(4)
.\".IX  "if device"  ""  "\f2if\fP \(em network interface general properties"  ""  PAGE END
