.\" $Copyright: $
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: ypclnt.3n 1.6 1991/08/06 22:43:32 $
.TH YPCLNT 3N "\*(V)" "4BSD"
.\" @(#)ypclnt.3n 1.1 85/12/28 SMI; from UCB 4.2
.SH NAME
ypclnt yp_get_default_domain yp_bind yp_unbind yp_match yp_first yp_next yp_all yp_order yp_master yperr_string ypprot_err \- yellow pages client interface
.SH SYNOPSIS
.nf
\f3#include <rpcsvc/ypclnt.h>
.sp
yp_bind(indomain);
char *indomain;
.sp
void yp_unbind(indomain)
char *indomain;
.sp
yp_get_default_domain(outdomain);
char **outdomain;
.sp
yp_match(indomain, inmap, inkey, inkeylen, outval, outvallen)
char *indomain;
char *inmap;
char *inkey;
int inkeylen;
char **outval;
int *outvallen;
.sp
yp_first(indomain, inmap, outkey, outkeylen, outval, outvallen)
char *indomain;
char *inmap;
char **outkey;
int *outkeylen;
char **outval;
int *outvallen;
.sp
yp_next(indomain, inmap, inkey, inkeylen, outkey, outkeylen, outval, outvallen);
char *indomain;
char *inmap;
char *inkey;
int inkeylen;
char **outkey;
int *outkeylen;
char **outval;
int *outvallen;
.sp
yp_all(indomain, inmap, incallback);
char *indomain;
char *inmap;
struct ypall_callback incallback;
.sp
yp_order(indomain, inmap, outorder);
char *indomain;
char *inmap;
int *outorder;
.sp
yp_master(indomain, inmap, outname);
char *indomain;
char *inmap;
char **outname;
.sp
char *yperr_string(incode)
int incode;
.sp
ypprot_err(incode)
unsigned int incode;\f1
.fi
.\".IX  "yp_bind function"  ""  "\f2yp_bind\fP \(em yellow pages client interface"
.\".IX  "yp_get_default_domain function"  ""  "\f2yp_get_default_domain\fP \(em yellow pages client interface"
.\".IX  "yp_unbind function"  ""  "\f2yp_unbind\fP \(em yellow pages client interface"
.\".IX  "yp_match function"  ""  "\f2yp_match\fP \(em yellow pages client interface"
.\".IX  "yp_first function"  ""  "\f2yp_first\fP \(em yellow pages client interface"
.\".IX  "yp_all function"  ""  "\f2yp_all\fP \(em yellow pages client interface"
.\".IX  "yp_next function"  ""  "\f2yp_next\fP \(em yellow pages client interface"
.\".IX  "yp_order function"  ""  "\f2yp_order\fP \(em yellow pages client interface"
.\".IX  "yp_master function"  ""  "\f2yp_master\fP \(em yellow pages client interface"
.\".IX  "yp_next function"  ""  "\f2yp_next\fP \(em yellow pages client interface"
.\".IX  "yperr_string function"  ""  "\f2yperr_string\fP \(em yellow pages client interface"
.\".IX  "ypprot_err function"  ""  "\f2ypprot_err\fP \(em yellow pages client interface"
.\".IX  "yellow pages client interface"
.SH DESCRIPTION
This package of functions provides an interface to the 
yellow pages (YP) network lookup service.  The package can be loaded 
from the standard library,
.IR /lib/libc.a .
Refer to
.I ypfiles(5)
and
.I ypserv(8)
for an overview of the yellow pages,
including the definitions of 
.I map
and 
\f2domain\f1,
and a description of the various servers, databases, 
and commands that comprise the YP.
.LP
All input parameters names begin with 
.BR in . 
Output parameters begin with 
.BR out .  
Output parameters of type
.I "char **"
should be addresses of uninitialized character pointers.  Memory is
allocated by the YP client package using
.IR malloc (3),
and may be freed if the user code has no continuing need for it.  
For each
.I outkey 
and
.IR outval ,
two extra bytes of memory are allocated at the end that contain
NEWLINE and NULL, respectively,
but these two bytes are not reflected in
.I outkeylen 
or
.IR outvallen .
.I Indomain
and 
.I inmap
strings must be non-null and null-terminated.  String
parameters which are accompanied by a count parameter may not be null, but
may point to null strings, with the count parameter indicating this.
Counted strings need not be null-terminated.
.LP
All functions in this package of type \fBint\fP
return 0 if they succeed, and a failure code
.RI (YPERR_ xxxx )
otherwise.  Failure codes are described under
.BR DIAGNOSTICS .
.LP
The YP lookup calls require a map name and a domain name, at minimum.  
It is assumed that the client process knows the name of the map of 
interest.  Client processes 
should fetch the node's default domain by calling 
.IR yp_get_default_domain() ,
and use the returned
.I outdomain 
as the
.I indomain 
parameter to successive YP calls.
.LP
To use the YP services, the client process must be bound to a YP 
server, which serves the appropriate domain, using
.IR yp_bind .
Binding need not be done explicitly by user code; this 
is done automatically whenever a YP lookup function is called.
.I Yp_bind
can be called directly for processes that make use of a backup
strategy in cases when YP services are not available, such as a local file.
.LP
Each binding allocates (uses up) one client process socket descriptor;
each bound domain costs one socket descriptor.  However, multiple 
requests to the same domain use that same descriptor.
.I Yp_unbind()
is available at the client interface for processes that 
explicitly manage their socket descriptors while accessing 
multiple domains.  The call to 
.I yp_unbind()
makes the domain 
.IR unbound , 
and frees all per-process and per-node resources used to bind it.
.LP
If an RPC failure results upon use of a binding, that domain is
unbound automatically.  At that point, the ypclnt layer retries
forever or until the operation succeeds, provided that 
.I ypbind
is running and either
the client process can't bind a server for the proper domain,
or RPC requests to the server fail.  
.LP
If an error is not RPC-related,
.I ypbind
is not running,
or a bound
.I ypserv
process returns,
the ypclnt layer returns control to the user code with either an error code,
or a success code and any results.
.LP
.I Yp_match
returns the value associated with a passed key.  This key 
must be exact; no pattern matching is available.
.LP
.I Yp_first
returns the first key-value pair from the named map in the named domain.
.LP
.I Yp_next()
returns the next key-value pair in a named map.  The 
.I inkey 
parameter should be the
.I outkey
returned from an initial call to 
.I yp_first()
(to get the second key-value pair),
 or the one returned from the nth call to 
.I yp_next()
(to get the nth + second key-value pair).
.LP
The concept of first (and, for that matter, of next) is particular 
to the
structure of the YP map being processing; there is no relation in
retrieval order to either the lexical order within any original (non-YP)
data base, or to any obvious numerical sorting order on the keys, 
values, or key-value pairs.  The only ordering guarantee made is 
that if the 
.I yp_first()
function is called on a particular map, and then the
.I yp_next()
function is repeatedly called on the same map at the same server 
until the call fails with a reason of 
\f3YPERR_NOMORE\f1,
every entry in the data base is seen exactly once.  
Further, if the same sequence of operations is performed on the same 
map at the same server, the entries are seen in the same order.  
.LP
Under conditions of heavy server load or server failure, it
is possible for the domain to become unbound, then bound
once again (perhaps to a different server) while a client is running.  
This can cause a break in one of the enumeration rules;
specific entries may be seen twice by the client, or not at all.
This approach protects the client from error messages that would
otherwise be returned in the midst of the enumeration.
However, there is a better solution to enumerating all 
entries in a map.
.LP
.I Yp_all
provides a way to transfer an entire map
from server to client in a single request using TCP 
(rather than UDP as with other functions in this package).
The entire transaction take place as a single RPC request and response.
You can use 
.I yp_all
just like any other YP procedure, 
identify the map in the normal manner, and supply the name of a
function which is called to process each key-value pair 
within the map.  You return from the call to
.I yp_all
only when the transaction is completed 
(successfully or unsuccessfully), or your 
.I foreach
function decides that it doesn't want to see any more key-value pairs.
.LP
The third parameter to
.I yp_all
is 
.br
.nf
	struct ypall_callback *incallback {
		int (*foreach)();
		char *data;
	};
.fi
.LP
The function
.I foreach
is called 
.br
.sp
.nf
	\fBforeach(instatus, inkey, inkeylen, inval, invallen, indata);
	int instatus;
	char *inkey;
	int inkeylen;
	char *inval;
	int invallen;
	char *indata;\fP
.fi
.br
.LP
The
.I instatus
parameter holds one of the return status values defined in 
\f2<rpcsvc/yp_prot.h>\fP \(em either \f2YP_TRUE\fP or an error code.  (See 
.I ypprot_err ,
below, for a function which converts a YP protocol error code to a ypclnt 
layer error code.)
.LP
The key and value parameters are somewhat different than defined in the 
synopsis section above.  First, the memory pointed to by the 
.I inkey
and 
.I inval
parameters is private to the 
.I yp_all
function, and is overwritten with the arrival of each new key-value pair.
It is the responsibility of the 
.I foreach 
function to do something useful with the contents of that memory, but it
does not own the memory itself.  Key and value objects 
presented to the
.I foreach 
function look exactly as they do in the server's map \(em if they
were not newline-terminated or null-terminated in the map, they won't be
here either.
.LP
The
.I indata
parameter is the contents of the 
.I incallback->data
element passed to
.IR yp_all .
The
.I data
element of the callback structure may be used to share state information
between the 
.I foreach
function and the mainline code.  Its use is optional, 
and no part of the YP client package inspects its contents \(em 
cast it to something useful, or ignore it as you see fit.
.LP
The 
.I foreach
function is a Boolean.  It should return zero to indicate that it can
be called again for further received key-value pairs, or non-zero to stop
the flow of key-value pairs.  If
.I foreach
returns a non-zero value, it is not called again; the functional
value of
.I yp_all
is then 0.
.LP
.I Yp_order
returns the order number for a map.
.LP
.I Yp_master
returns the machine name of the master YP server for a map.
.LP
.I Yperr_string
returns a pointer to an error message string that is null-terminated but 
contains no period or newline.
.LP
.I Ypprot_err
takes a YP protocol error code as input, and returns a ypclnt layer error
code, which can be used as an input to 
.IR yperr_string .
.SH FILES
/usr/include/rpcsvc/ypclnt.h
.br
/usr/include/rpcsvc/yp_prot.h
.SH "SEE ALSO"
ypfiles(5), ypserv(8), 
.SH DIAGNOSTICS
All integer functions return 0 if the requested operation is successful,
or one of the following errors if the operation fails.
.IP
.ta \w'#define\0'u +\w'YPERR_BADARGS\0\0'u +\w'1\0\0'u
.nf
YPERR_BADARGS	args to function are bad
YPERR_RPC	RPC failure - domain has been unbound
YPERR_DOMAIN	can't bind to server on this domain
YPERR_MAP	no such map in server's domain
YPERR_KEY	no such key in map
YPERR_YPERR	internal yp server or client error
YPERR_RESRC	resource allocation failure
YPERR_NOMORE	no more records in map database
YPERR_PMAP	can't communicate with portmapper
YPERR_YPBIND	can't communicate with ypbind
YPERR_YPSERV	can't communicate with ypserv
YPERR_NODOM	local domain name not set
.fi
