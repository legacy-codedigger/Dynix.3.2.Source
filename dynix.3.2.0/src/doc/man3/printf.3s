.\" $Copyright: $
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: printf.3s 1.15 1991/08/06 22:43:12 $
.TH PRINTF 3S "\*(V)" "7th Edition"
.SH NAME
printf, fprintf, sprintf \- formatted output conversion
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.B printf(format
.RB [ ,
arg ] ...
.B )
.br
.B char *format;
.PP
.B fprintf(stream, format
.RB [ ,
arg ] ...
.B )
.br
.SM
.B FILE
.B *stream;
.br
.B char *format;
.PP
.B char *sprintf(s, format
.RB [ ,
arg ] ...
.B )
.br
.B char *s, *format;
.PP
.B #include <varargs.h>
.br
.B _doprnt(format, args, stream)
.br
.B char *format;
.br
.B va_list *args;
.br
.B FILE *stream;
.SH DESCRIPTION
.I Printf
places output on the standard output stream
.BR stdout .
.I Fprintf
places output on the named output
.IR stream .
.I Sprintf
places `output' in the string
.IR s ,
followed by the character `\\0'.
All of these routines work by calling the internal
routine
.B _doprnt,
using the variable-length argument facilities of
.IR varargs (3).
.PP
Each of these functions converts,
formats,
and prints its arguments as specified by
.IR format .
.I Format
is a character string that contains two types of objects:
plain characters,
which are simply copied to the output stream,
and conversion specifications,
each of which causes conversion and printing of the next successive
.IR arg .
.PP
Each conversion specification is introduced by the character
.BR % .
Following the
.BR % ,
there may be
.TP
.B \(bu
an optional minus sign `\-' which specifies
.I "left adjustment"
of the converted value in the indicated field;
.TP
.B \(bu
an optional digit string specifying a
.I "field width;"
if the converted value has fewer characters than the field width,
the value will be blank-padded on the left
(or right,
if the left-adjustment indicator has been given)
to make up the field width;
if the field width begins with a zero,
zero-padding will be done instead of blank-padding;
.TP
.B \(bu
an optional period
.RB ` . '
which serves to separate the field width from the next digit string;
.TP
.B \(bu
an optional digit string specifying a
.I precision
which specifies the number of digits to appear after the decimal point,
for e- and f-conversion,
or the maximum number of characters to be printed from a string;
.TP
.B \(bu
an optional `#' character
specifying that the value should be converted to an ``alternate form''.
For
.BR c ,
.BR d ,
.BR s ,
and
.BR u ,
conversions,
this option has no effect.
For
.B o
conversions,
the precision of the number is increased to force the first character
of the output string to a zero.
For
.BR x ( X )
conversion,
a non-zero result has the string
.BR 0x ( 0X )
prepended to it.
For
.BR e ,
.BR E ,
.BR f ,
.BR g ,
and
.BR G ,
conversions,
the result will always contain a decimal point,
even if no digits follow the point
(normally,
a decimal point only appears in the results of those conversions
if a digit follows the decimal point).
For
.B g
and
.B G
conversions,
trailing zeros are not removed from the result
(as they would otherwise be).
.TP
.B \(bu
the character
.B l
specifying that a following
.BR d ,
.BR o ,
.BR x ,
or
.B u
corresponds to a long integer
.IR arg .
.TP
.B \(bu
a character which indicates the type of conversion to be applied.
.PP
A field width or precision may be `*' instead of a digit string.
In this case an integer
.I arg
supplies the field width or precision.
.PP
The conversion characters and their meanings are
.TP
.B dox
The integer
.I arg
is converted to decimal,
octal,
or hexadecimal notation respectively.
.TP
.B f
The float or double
.I arg
is converted to decimal notation in the style `[\f3\-\f1]ddd.ddd'
where the number of d's after the decimal point
is equal to the precision specification for the argument.
If the precision is missing,
6 digits are given;
if the precision is explicitly 0,
no digits and no decimal point are printed.
.TP
.B e
The float or double
.I arg
is converted in the style
`[\f3\-\f1]d\f3.\f1ddd\f3e\f1\(+-dd'
where there is one digit before the decimal point
and the number after
is equal to the precision specification for the argument;
when the precision is missing,
6 digits are produced.
.TP
.B g
The float or double
.I arg
is printed in style
.BR d ,
in style
.BR f ,
or in
style
.BR e ,
whichever gives full precision in minimum space.
.TP
.B c
The character
.I arg
is printed.
.TP
.B s
.I Arg
is taken to be a string
(character pointer)
and characters from the string are printed
until a null character
or the number of characters indicated by the precision specification
is reached;
however if the precision is 0 or missing,
all characters up to a null are printed.
.TP
.B u
The unsigned integer
.I arg
is converted to decimal and printed
(the result will be in the range 0 through MAXUINT,
where MAXUINT equals 4294967295 on the BALANCE Series or VAX-11
and 65535 on a PDP-11).
.TP
.B %
Print a `%'; no argument is converted.
.PP
.PP
In printing floating point types (float and double),
if the exponent is 0x7FF and the mantissa is not equal to zero,
then the output is
.RS
.HP
.nh
[-]nan0xdddddddd
.RE
.hy
.PP
where 0xdddddddd is the hexadecimal representation
of the leftmost 32 bits of the mantissa.
If the mantissa is zero, the output is
.RS
.HP
.nh
[\(+-]inf
.RE
.hy
.PP
If the exponent is zero and the mantissa is not equal to zero,
then the output is
.RS
.HP
.nh
[-]den0xdddddddd
.RE
.hy
.PP
where 0xdddddddd is the hexadecimal representation
of the leftmost 32 bits of the mantissa.
.PP
In no case does a non-existent or small field width
cause truncation of a field;
padding takes place only if the specified field width
exceeds the actual width.
Characters generated by
.I printf
are printed by
.IR putc (3S).
.PP
.B Examples
.br
To print a date and time in the form `Sunday, July 3, 10:02',
where
.I weekday
and
.I month
are pointers to null-terminated strings:
.RS
.HP
.nh
printf("%s, %s %d, %02d:%02d", weekday, month, day, hour, min);
.RE
.hy
.PP
To print
.if n pi
.if t \(*p
to 5 decimals:
.IP
printf("pi = %.5f", 4*atan(1.0));
.SH "RETURN VALUES"
All calls return EOF on error,
zero if successful.
.I Sprintf
returns the string in the argument
.IR s .
.SH "SEE ALSO"
putc(3S),
scanf(3S),
ecvt(3)
.SH BUGS
Very wide fields (>128 characters) fail.
