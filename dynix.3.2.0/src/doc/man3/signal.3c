.\" $Copyright: $
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: signal.3c 1.10 1992/02/12 01:56:32 $
.TH SIGNAL 3C "\*(V)" "4BSD"
.ie t .ds d \(dg
.el .ds d \z'|+'
.ie t .ds b \(bu
.el .ds b @
.SH NAME
signal \- simplified software signal facilities
.SH SYNOPSIS
.nf
.B #include <signal.h>
.PP
.B int  (*signal(sig, func))()
.B int  (*func)();
.fi
.SH DESCRIPTION
.I Signal
is a simplified interface to the more general
.IR sigvec (2)
facility.
.PP
A signal
is generated by some abnormal event,
initiated by a user at a terminal (quit, interrupt, stop),
by a program error (bus error, etc.),
by request of another program (kill),
or when a process is stopped because it wishes to access
its control terminal while in the background (see
.IR tty (4)).
Signals are optionally generated
when a process resumes after being stopped,
when the status of child processes changes,
or when input is ready at the control terminal.
Most signals cause termination of the receiving process if no action
is taken; some signals instead cause the process receiving them
to be stopped, or are simply discarded if the process has not
requested otherwise.
Except for the SIGKILL and SIGSTOP
signals, the
.I signal
call allows signals either to be ignored
or to cause an interrupt to a specified location.
The following is a list of all signals with
names as in the include file
.RI < signal.h >:
.LP
.nf
.ta \w'SIGVTALRM 'u +\w'15*  'u
SIGHUP	1	hangup
SIGINT	2	interrupt
SIGQUIT	3*	quit
SIGILL	4*	illegal instruction
SIGTRAP	5*	trace trap
SIGIOT	6*	IOT instruction
SIGEMT	7*	EMT instruction
SIGFPE	8*	floating point exception
SIGKILL	9	kill (cannot be caught or ignored)
SIGBUS	10*	bus error
SIGSEGV	11*	segmentation violation
SIGSYS	12*	bad argument to system call
SIGPIPE	13	write on a pipe with no one to read it
SIGALRM	14	alarm clock
SIGTERM	15	software termination signal
SIGURG	16\*b	urgent condition present on socket
SIGSTOP	17\*d	stop (cannot be caught or ignored)
SIGTSTP	18\*d	stop signal generated from keyboard
SIGCONT	19\*b	continue after stop
SIGCHLD	20\*b	child status has changed
SIGTTIN	21\*d	background read attempted from control terminal
SIGTTOU	22\*d	background write attempted to control terminal
SIGIO	23\*b	i/o is possible on a descriptor (see \f2fcntl\fP(2))
SIGXCPU	24	cpu time limit exceeded (see \f2setrlimit\fP(2))
SIGXFSZ	25	file size limit exceeded (see \f2setrlimit\fP(2))
SIGVTALRM	26	virtual time alarm (see \f2setitimer\fP(2))
SIGPROF	27	profiling timer alarm (see \f2setitimer\fP(2))
SIGWINCH	28\*b	used by PCI to signal a window size change
SIGUSR1	30	user-defined signal 1
SIGUSR2	31	user-defined signal 2
.fi
.PP
The starred signals in the list above cause a core image
if not caught or ignored.
.PP
If
.I func
is SIG_DFL, the default action
for signal
.I sig
is reinstated; this default is termination
(with a core image for starred signals)
except for signals marked with \*b or \*d.
Signals marked with \*b are discarded if the action
is SIG_DFL; signals marked
with \*d cause the process to stop.
If
.I func
is SIG_IGN the signal is subsequently ignored
and pending instances of the signal are discarded.
Otherwise, when the signal occurs
further occurrences of the signal are
automatically blocked and
.I func
is called.
.PP
A return from the function unblocks
the handled signal and
continues the process at the point it was interrupted.
\f3Unlike previous signal facilities, the handler \f2func\fP
remains installed after a signal has been delivered.\fP
.PP
If a caught signal occurs
during certain system calls, causing
the call to terminate prematurely, the call
is automatically restarted.
In particular this can occur
during a
.I read
or
.IR write (2)
on a slow device (such as a terminal; but not a file)
and during a
.IR wait (2).
.PP
The value of
.I signal
is the previous (or initial)
value of
.I func
for the particular signal.
.PP
After a
.IR fork (2)
or
.IR vfork (2)
the child inherits
all signals.
.IR  Execve (2)
resets all caught signals to the default action;
ignored signals remain ignored.
.SH NOTES
Note that floating-point context is saved and restored across all
signal handlers EXCEPT SIGFPE handlers.  In the case of a SIGFPE, the
corresponding handler inherits the floating-point context of the
interrupted procedure.  And, on return from the SIGFPE handler, the
interrupted procedure inherits any modifications the signal handler
made to its floating-point state.  Thus, floating-point applications
can reset the faulting state directly in the fpu/fpa hardware from
within the SIGFPE handler.  All other signal handlers receive
initialized fpu/fpa state and, on normal return, the fpu/fpa context
of the interrupted procedure is restored.

.SH "RETURN VALUE
The previous action is returned on a successful call.
Otherwise, \-1 is returned and 
.I errno
is set to indicate the error.
.SH ERRORS
.I Signal
will fail and no action will take place if one of the
following occur:
.TP 15
[EINVAL]
.I Sig
is not a valid signal number.
.TP 15
[EINVAL]
An attempt is made to ignore or supply a handler for SIGKILL
or SIGSTOP.
.TP 15
[EINVAL]
An attempt is made to ignore SIGCONT (by default SIGCONT
is ignored).
.SH "SEE ALSO"
kill(1),
ptrace(2), kill(2),
sigvec(2), sigblock(2), sigsetmask(2), sigpause(2),
sigstack(2), setjmp(3), tty(4)
