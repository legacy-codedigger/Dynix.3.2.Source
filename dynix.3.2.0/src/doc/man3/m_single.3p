.\" $Copyright:	$
.\" Copyright (c) 1984, 1985, 1986 Sequent Computer Systems, Inc.
.\" All rights reserved
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: m_single.3p 1.6 90/02/07 $
.TH M_SINGLE 3P "\*(V)" "DYNIX"
.SH NAME
m_single, m_multi \- mark single-process code section
.SH SYNOPSIS
.nf
\f2C syntax:\fP
.PP
\f3#include <parallel/microtask.h>
m_single();
(CODE)
m_multi();\fP
.PP
\f2Pascal syntax\fP
.PP
\f3procedure m_single;
cexternal;
procedure m_multi;
cexternal;\fP
.PP
\f2FORTRAN syntax\fP
.PP
\f3subroutine m_single
subroutine m_multi\fP
.fi
.SH DESCRIPTION
The
.IR m_single 
routine causes child processes to spin at a barrier
until the parent process has executed the code
following the
.I m_single
call and called the
.I m_multi
routine.
The child processes then resume execution at the source line
after the
.I m_multi
call.
These routines are typically used to allow the parent
process to perform I/O or other serial operations during an
m_fork call.
.SH NOTES
Calls to
.I m_single 
are allowed
only during
.I m_fork
calls.
To suspend child processes after an \f2m_fork\fP call, use
\f2m_park_procs\fP and \f2m_rele_procs\fP.
.PP
Do not call
.I m_multi
without calling 
.I m_single first.
.PP
Nested 
.I m_single
calls are not allowed.
Neither are 
.I m_single 
calls nested between calls to other lock routines,
such as 
.I s_lock
and
.IR s_unlock .
.SH RETURN VALUE
Upon successful completion, a value of 0 is returned.
Otherwise, a value of \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
These routines can return the following error:
.TP 15
[EINVAL]
The routine was called in an inappropriate context.
For example,
.I m_fork 
had never been called, or
the processes were already suspended with a call to
.I m_park_procs.
.SH "SEE ALSO"
m_park_procs(3P), \f2Guide to Parallel Programming\fP
