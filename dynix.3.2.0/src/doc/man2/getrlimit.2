.\" $Copyright:	$
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990 
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
.\"
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.  This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
.\"
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.  This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: getrlimit.2 1.9 86/08/15 $
.TH GETRLIMIT 2 "\*(V)" "4BSD"
.SH NAME
getrlimit, setrlimit \- control maximum system resource consumption
.SH SYNOPSIS
.ft 3
.nf
#include <sys/time.h>
#include <sys/resource.h>
.PP
.ft 3
getrlimit(resource, rlp)
int resource;
struct rlimit *rlp;
.PP
.ft 3
setrlimit(resource, rlp)
int resource;
struct rlimit *rlp;
.fi
.ft 1
.SH DESCRIPTION
Limits on the consumption of system resources by the current process
and each process it creates may be obtained with the
.I getrlimit
call,
and set with the
.I setrlimit
call.
.PP
The
.I resource
parameter is one of the following:
.TP 17
RLIMIT_CPU
the maximum amount of cpu time
(in seconds)
to be used by each process.
.TP 17
RLIMIT_FSIZE
the largest size,
in bytes,
of any single file which may be created.
.TP 17
RLIMIT_DATA
the maximum size,
in bytes,
of the data segment for a process;
this defines how far a program may extend its break with the
.IR sbrk (2)
system call.
.TP 17
RLIMIT_STACK
the maximum size,
in bytes,
of the stack segment for a process;
this defines how far a program's stack segment may be extended
(automatically by the system).
.TP 17
RLIMIT_CORE
the largest size,
in bytes,
of a
.I core
file which may be created.
.TP 17
RLIMIT_RSS
the maximum size,
in bytes,
a process's resident set size may grow to.
This imposes a limit on the amount of physical memory to be given
to a process;
if memory is tight,
the system will prefer to take memory from processes
that are exceeding their declared resident set size.
.PP
A resource limit is specified as a soft limit and a hard limit.
When a soft limit is exceeded a process may receive a signal
(for example,
if the cpu time is exceeded),
but it will be allowed to continue execution
until it reaches the hard limit
(or modifies its resource limit).
The
.I rlimit
structure is used to specify the hard and soft limits on a resource,
.PP
.nf
.RS
.DT
struct rlimit {
	int	rlim_cur;	/* current (soft) limit */
	int	rlim_max;	/* hard limit */
};
.RE
.fi
.PP
Only the super-user may raise the maximum limits.
Other users may only alter
.I rlim_cur
within the range from 0 to
.I rlim_max
or
(irreversibly)
lower
.IR rlim_max .
.PP
An \*(lqinfinite\*(rq value for a limit is defined as RLIM_INFINITY
(0x7\&f\&f\&f\&f\&f\&f\&f).
.PP
Because this information is stored in the per-process information,
this system call must be executed directly by the shell
if it is to affect all future processes created by the shell;
.I limit
is thus a built-in command to
.IR csh (1).
.PP
The system refuses to extend the data or stack space
when the limits would be exceeded in the normal way:
a
.I break
call fails if the data space limit is reached,
or the process is killed when the stack limit is reached
(since the stack cannot be extended,
there is no way to send a signal!).
.PP
A file I/O operation that would create too large a file
will cause a signal SIGXFSZ to be generated,
this normally terminates the process,
but may be caught.
When the soft cpu time limit is exceeded,
a signal SIGXCPU is sent to the offending process.
.SH "RETURN VALUE
A 0 return value indicates that the call succeeded,
changing or returning the resource limit.
A return value of \-1 indicates that an error occurred,
and an error code is stored in the global location \f2errno\fP.
.SH "ERRORS
The possible errors are:
.TP 15
[EFAULT]
The address specified for \f2rlp\fP is invalid.
.TP 15
[EPERM]	The limit specified to \f2setrlimit\fP
would have raised the maximum limit value,
and the caller is not the super-user.
.SH SEE ALSO
csh(1)
.SH BUGS
There should be
.I limit
and
.I unlimit
commands in
.IR sh (1)
as well as in
.IR csh.
