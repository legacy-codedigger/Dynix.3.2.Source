.\" $Copyright: $
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: sigvec.2 1.24 1992/02/12 01:53:24 $
.TH SIGVEC 2 "\*(V)" "4BSD/DYNIX"
.ie t .ds d \(dg
.el .ds d \z'|+'
.ie t .ds b \(bu
.el .ds b @
.SH NAME
sigvec \- software signal facilities
.SH SYNOPSIS
.nf
.ft 3
#include <signal.h>
.sp
struct sigvec {
	int	(*sv_handler)();
	int	sv_mask;
	int	sv_onstack;
};
.sp
sigvec(sig, vec, ovec)
	int sig;
	struct sigvec *vec, *ovec;
.fi
.SH DESCRIPTION
DYNIX defines a set of signals that may be delivered to a process.
Signal delivery resembles the occurrence of a hardware interrupt\(emthe
signal is blocked from further occurrence, the current process 
context is saved, and a new process context is built.  A process may specify a
.I handler
to which a signal is delivered, or specify that a signal is to be 
.I blocked
or
.IR ignored .
A process can tell the system to take a default action when a signal occurs.
Normally,
signal handlers execute on the current stack of the process.
Processes can change this on a per-handler basis,
so that signals are taken on a special
.IR "signal stack" ,
with a
.IR sigstack (2)
system call.
.PP
Signals have the same priority.
While a signal handler is executing,
the signal that caused its invocation is blocked;
however,
other signals are not blocked.
When a signal condition arises for a process,
the signal is added to the set of signals pending for the process.
If the process has not blocked the signal,
the signal is delivered to the process.
When a process receives a signal,
the current state of the process is saved,
a new signal mask is calculated,
and
.I sv_handler
is invoked.
The call to the signal handler
is arranged so that if the signal handling routine returns normally,
the process resumes execution in the context
from before the signal's delivery.
If the process wishes to resume in a different context,
it must arrange to restore the previous context itself.
.PP
.B "Signal Mask"
.PP
A global 
.I "signal mask"
defines the set of signals currently blocked from delivery
to a process.  The signal mask for a process is initialized
from that of its parent,
which is usually 0.
The process can change
.I "signal mask"
with a
.IR sigblock (2)
or
.IR sigsetmask (2)
call,
or DYNIX changes it when it delivers a signal to the process.
.PP
When a signal is delivered to a process,
a new signal mask is installed for the duration of the process'
signal handler or until a
.I sigblock
or
.I sigsetmask
call is made.
This mask is formed by taking the current signal mask,
adding the signal to be delivered, and 
.IR or 'ing
in the signal mask associated with the handler to be invoked.
.PP
.B "Signal Handler"
.PP
.I Sigvec
assigns a handler for a specific signal.  If
.I vec
is non-zero, it
specifies a handler routine
.RI ( sv_handler )
and mask
.RI ( sv_mask )
to be used when delivering the specified signal.  Further, if
.I sv_onstack
is 1,
DYNIX delivers the signal to the process on a
.IR "signal stack" ,
as previously specified by
.IR sigstack (2).
If 
.I ovec
is non-zero, the previous handling information for the signal
is returned to the user process.
.PP
.ne 3
The following is the list of signals as defined in
.RI < signal.h >:
.sp
.in +0.5i
.nf
.ta \w'SIGVTALRM\0\0\0'u +\w'23*\0\0\0'u
SIGHUP	1	hangup
SIGINT	2	interrupt
SIGQUIT	3*	quit
SIGILL	4*	illegal instruction
SIGTRAP	5*	trace trap
SIGIOT	6*	IOT instruction
SIGEMT	7*	EMT instruction
SIGFPE	8*	floating point exception
SIGKILL	9	kill (cannot be caught, blocked, or ignored)
SIGBUS	10*	bus error
SIGSEGV	11*	segmentation violation
SIGSYS	12*	bad argument to system call
SIGPIPE	13	write on a pipe with no one to read it
SIGALRM	14	alarm clock
SIGTERM	15	software termination signal
SIGURG	16\*b	urgent condition present on socket
SIGSTOP	17\*d	stop (cannot be caught, blocked, or ignored)
SIGTSTP	18\*d	stop signal generated from keyboard
SIGCONT	19\*b	continue after stop (cannot be blocked)
SIGCHLD	20\*b	child status has changed
SIGTTIN	21\*d	background read attempted from control terminal
SIGTTOU	22\*d	background write attempted to control terminal
SIGIO	23\*b	i/o is possible on a descriptor (see \f2fcntl\fP(2))
SIGXCPU	24	cpu time limit exceeded (see \f2setrlimit\fP(2))
SIGXFSZ	25	file size limit exceeded (see \f2setrlimit\fP(2))
SIGVTALRM	26	virtual time alarm (see \f2setitimer\fP(2))
SIGPROF	27	profiling timer alarm (see \f2setitimer\fP(2))
SIGWINCH	28\*b	used by PCI to signal a window size change
SIGUSR1	30	user-defined signal 1
SIGUSR2	31	user-defined signal 2
.fi
.in -0.5i
.PP
If the starred signals in the previous list are not caught or ignored,
a core image is generated.
.PP
Once a signal handler is installed, it remains installed
until another
.I sigvec
call is made, or an 
.IR execve (2)
is performed.
The default action for a signal may be reinstated by setting
.I sv_handler
to SIG_DFL; this default is termination
(with a core image for starred signals)
except for signals marked with \*b or \*d.
Signals marked with \*b are discarded if the action
is SIG_DFL; signals marked
with \*d cause the process to stop.
If
.I sv_handler
is SIG_IGN the signal is subsequently ignored,
and pending instances of the signal are discarded.
.PP
If a caught signal occurs
during certain system calls, causing
the call to terminate prematurely, the call
is automatically restarted.  In particular this can occur
during a
.I read
or
.IR write (2)
on a slow device (such as a terminal; but not a file)
and during a
.IR wait (2).
Note that if the
.I read
or 
.IR write (2)
have already completed some of the request, they will just return
what they have finished.
.PP
After a
.IR fork (2)
or
.IR vfork (2)
the child inherits
all signals, the signal mask, and the signal stack.
.PP
.IR  Execve (2)
resets all
caught signals to default action; ignored signals remain ignored;
the signal mask remains the same; the signal stack state is reset.
.SH NOTES
The mask specified in 
.I vec
is not allowed to block SIGKILL, SIGSTOP, or SIGCONT.
This is enforced silently by the system.
.PP
Signals do not stack.
If two or more identical signals are sent to the process before the
the process signal handler is called or the default action is taken,
the second and subsequent consecutive identical signals are lost.
.PP
.ne 5
The handler routine can be declared:
.Ps
handler(sig, code, scp)
	int sig, code;
	struct sigcontext *scp;
.Pe
Here
.I sig
is the signal number, into which the hardware faults and traps are
mapped as defined below. 
.I Code
is a parameter
as given below.
.I Scp
is a pointer to the
.I sigcontext
structure defined in
.RI < signal.h >,
which is used to restore the pre-signal context.
.PP
.B "Balance Series"
.PP
The following table shows the mapping of hardware traps to signals
and codes as are defined in either
.RI < signal.h >
or
.RI < machine/fpu.h >.
.PP
.in +0.5i
.ta \w'FPE_FLTUND_TRAP\0\0\0\0'u
.ne 5
The following codes are associated with the SIGFPE floating point exception:
.nf
.sp
Code	Hardware condition
.sp
FPE_INTDIV_TRAP	Integer division by zero
FPE_FLTUND_TRAP	Floating underflow trap
FPE_FLTOVF_TRAP	Floating overflow trap
FPE_FLTDIV_TRAP	Floating division by zero
FPE_FLTILL_TRAP	Floating illegal instruction
FPE_FLTINV_TRAP	Floating invalid operation
FPE_FLTIER_TRAP	Floating inexact result
.sp
.fi
The following codes are associated with the SIGILL illegal instruction:
.nf
.sp
Code	Hardware condition
.sp
ILL_PRIVIN_FAULT	Privileged instruction fault
ILL_RESOP_FAULT	Reserved operand fault
.fi
.in -0.5i
.PP
When a user process causes a segmentation violation
.RI ( SIGVEC ),
the
.I code
parameter contains the address that caused the violation.
Otherwise,
.I code
is set to zero for all other signals:
.PP
.in +0.5i
.ta \w'Code\0\0\0'u +\w'SIGTRAP\0\0\0'u
.nf
Code	Signal	Hardware condition
.sp
0	SIGTRAP	Trace pending
0	SIGTRAP	Bpt instruction
0	SIGEMT	Flag trap
.fi
.in -0.5i
.PP
Unlike other processor architectures,
such as the VAX,
the stacked PC for a signal resulting from a hardware trap
designates the instruction causing the trap,
not the following instruction.
Therefore,
a hardware trap signal handler that
returns without changing the context will attempt to execute the
failed instruction repeatedly.
.PP
.B "Symmetry Series"
.PP
The following table shows the mapping of hardware traps to signals
and codes as are defined in either
.RI < signal.h >
or
.RI < machine/fpu.h >.
.PP
.in +0.5i
.ta \w'FPE_FLTINV_TRAP\0\0\0\0'u
.ne 5
The following codes are associated with the SIGFPE floating point exception:
.nf
.sp
Code	Hardware condition
.sp
FPE_FLTINV_TRAP	Floating invalid operation
FPE_FLTDEN_TRAP	Floating denormal trap
FPE_FLTDIV_TRAP	Floating division by zero
FPE_FLTOVF_TRAP	Floating overflow trap
FPE_FLTUND_TRAP	Floating underflow trap 
FPE_FLTPRE_TRAP	Floating precision trap
FPE_FLTSTK_TRAP	Floating stack overflow/underflow
FPE_INTDIV_TRAP	Integer division by zero
FPE_INTOVF_TRAP	Integer overflow (into)
.sp
FPE_NOFPA_AVAIL	No Weitek 1167 FPA's in the system
.sp
.fi
The following codes are associated with the SIGILL floating point exception:
.nf
.sp
Code	Hardware condition
.sp
ILL_PRIVIN_FAULT	Privileged instruction fault
ILL_RESOP_FAULT	Reserved operand fault
.fi
.in -0.5i
.PP
In addition,
the following signals are defined for the Weitek 1167
floating point hardware:
.in +0.5i
.ta \w'FPA_PCR_AE_UOE\0\0\0\0'u
.nf
.sp
Code	Hardware condition
.sp
FPA_PCR_AE	Accumulated exceptions
FPA_PCR_AE_DE	Data chain exception
FPA_PCR_AE_UOE	Unimplemented op-code exception
FPA_PCR_AE_PE	Precision exception
FPA_PCR_AE_UE	Underflow exception
FPA_PCR_AE_OE	Overflow exception
FPA_PCR_AE_ZE	Zero divide exception
FPA_PCR_AE_EE	Enabled exception (1 == interrupt)
FPA_PCR_AE_IE	Invalid operation exception
.sp
.fi
.in

Note that floating-point context is saved and restored across all
signal handlers EXCEPT SIGFPE handlers.  In the case of a SIGFPE, the
corresponding handler inherits the floating-point context of the
interrupted procedure.  And, on return from the SIGFPE handler, the
interrupted procedure inherits any modifications the signal handler
made to its floating-point state.  Thus, floating-point applications
can reset the faulting state directly in the fpu/fpa hardware from
within the SIGFPE handler.  All other signal handlers receive
initialized fpu/fpa state and, on normal return, the fpu/fpa context
of the interrupted procedure is restored.
.SH "RETURN VALUES"
If the call succeeds,
.I signal
returns a 0.
If the call fails,
.I signal
returns a \-1 and sets
.I errno
to indicate the reason.
.SH ERRORS
.I Sigvec
fails and no new signal handler is installed if one
of the following errors occurs:
.TP 15
[EFAULT]
Either
.I vec
or 
.I ovec
points to memory which is not a valid part of the process
address space.
.TP 15
[EINVAL]
.I Sig
is not a valid signal number.
.TP 15
[EINVAL]
An attempt is made to ignore or supply a handler for SIGKILL
or SIGSTOP.
.TP 15
[EINVAL]
An attempt is made to ignore SIGCONT (by default SIGCONT
is ignored).
.SH "SEE ALSO"
kill(1),
ptrace(2),
kill(2),
sigblock(2),
sigpause(2),
sigsetmask(2),
sigstack(2),
sigvec(2),
setjmp(3),
tty(4)
