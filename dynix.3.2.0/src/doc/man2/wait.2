.\" $Copyright:	$
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990 
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: wait.2 1.9 87/03/02 $
.TH WAIT 2 "\*(V)" "4BSD"
.SH NAME
wait, wait3 \- wait for process to terminate
.SH SYNOPSIS
.ft 3
.nf
#include <sys/wait.h>
.PP
.ft 3
pid = wait(status)
int pid;
union wait *status;
.PP
.ft 3
pid = wait((union wait*)0)
int pid;
.PP
.ft 3
#include <sys/time.h>
#include <sys/resource.h>
.PP
.ft 3
pid = wait3(status, options, rusage)
int pid;
union wait *status;
int options;
struct rusage *rusage;
.fi
.SH DESCRIPTION
.I Wait
causes its caller to delay until a signal is received or
one of its child
processes terminates.
If any child has died since the last
.IR wait ,
return is immediate, returning the process id and
exit status of one of the terminated
children.
If there are no children, return is immediate with
the value \-1 returned.
.PP
If
.I status
is nonzero,
the high byte of 
.I status
contains the low byte of the argument to
.I exit
supplied by the child process,
and the low byte of 
.I status
contains the termination status of the process.
A more precise definition of the
.I status
word is given in
.RI < sys/wait.h >.
.PP
.I Wait3
provides an alternate interface for programs
which must not block when collecting the status
of child processes.  The
.I status
parameter is defined as above.  The
.I options
parameter is used to indicate the call should not block if
there are no processes which wish to report status (WNOHANG),
and/or that only children of the current process which are stopped
due to a SIGTTIN, SIGTTOU, SIGTSTP, or SIGSTOP signal should have
their status reported (WUNTRACED).  If
.I rusage
is non-zero, a summary of the resources used by the terminated
process and all its
children is returned (this information is currently not available
for stopped processes).
.PP
When the WNOHANG option is specified and no processes
wish to report status, 
.I wait3
returns a 
.I pid
of 0.  The WNOHANG and WUNTRACED options may be combined by 
.IR or 'ing
the two values.
.SH NOTES
See
.IR sigvec (2)
for a list of termination statuses (signals);
0 status indicates normal termination.
A special status (0177) is returned for a stopped process
which has not terminated and can be restarted;
see
.IR ptrace (2).
If the 0200 bit of the termination status
is set,
a core image of the process was produced
by the system.
.PP
If the parent process terminates without
waiting on its children,
the initialization process
(process ID = 1)
inherits the children.
.PP
.I Wait
and
.I wait3
are automatically restarted when a process receives a
signal while awaiting termination of a child process.
.SH "RETURN VALUE
If \f2wait\fP returns due to a stopped
or terminated child process, the process ID of the child
is returned to the calling process.  Otherwise, a value of \-1
is returned and \f2errno\fP is set to indicate the error.
.PP
.I Wait3
returns \-1 if there are no children not previously waited
for;  0 is returned if WNOHANG is specified and there are
no stopped or exited children.
.SH ERRORS
.I Wait
will fail and return immediately if one or more of the following
are true:
.TP 15
[ECHILD]
The calling process has no existing unwaited-for
child processes.
.TP 15
[EFAULT]
The \f2status\fP or \f2rusage\fP arguments point to an illegal address.
.SH "SEE ALSO"
exit(2)
