.\" $Copyright: $
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: getitimer.2 1.13 1991/06/12 00:39:56 $
.TH GETITIMER 2 "\*(V)" "4BSD"
.SH NAME
getitimer, setitimer \- get/set value of interval timer
.SH SYNOPSIS
.nf
.ft 3
#include <sys/time.h>
.PP
.ft 3
#define ITIMER_REAL   	0	/* real time intervals */
#define ITIMER_VIRTUAL	1	/* virtual time intervals */
#define ITIMER_PROF   	2	/* user and system virtual time */
.sp
.ft 3
getitimer(which, value)
int which;
struct itimerval *value;
.PP
.ft 3
setitimer(which, value, ovalue)
int which;
struct itimerval *value, *ovalue;
.fi
.SH DESCRIPTION
The system provides each process with three interval timers,
defined in
.RI < sys/time.h >.
The
.I getitimer
call returns the current value for the timer specified in
.IR which .
The
.I setitimer
call sets a timer to the specified
.I value
(returning the previous value of the timer if
.I ovalue
is nonzero).
.PP
A timer value is defined by the 
.I itimerval
structure:
.PP
.nf
.RS
.DT
struct itimerval {
	struct	timeval it_interval;	/* timer interval */
	struct	timeval it_value;\0	/* current value */
};
.RE
.fi
.PP
If
.I it_value
is non-zero, it indicates the time to the next timer expiration. 
If
.I it_interval
is non-zero, it specifies a value to be used in reloading 
.I it_value
when the timer expires.
Setting 
.I it_value
to 0 disables a timer.  Setting 
.I it_interval
to 0 causes a timer to be disabled after its next expiration (assuming
.I it_value
is non-zero).
.PP
Time values smaller than the resolution of the
system clock are rounded up to this resolution
(10 milliseconds).
.PP
The ITIMER_REAL timer decrements in real time.  A SIGALRM signal is
delivered when this timer expires.
.PP
The ITIMER_VIRTUAL timer decrements in process virtual time.
It runs only when the process is executing.  A SIGVTALRM signal
is delivered when it expires.
.PP
The ITIMER_PROF timer decrements both in process virtual time and
when the system is running on behalf of the process.  It is designed
to be used by interpreters in statistically profiling the execution
of interpreted programs.
Each time the ITIMER_PROF timer expires, the SIGPROF signal is
delivered.  Because this signal may interrupt in-progress
system calls, programs using this timer must be prepared to
restart interrupted system calls.
.PP
Timer values are not inherited by the child process during a
.IR fork (2);
they are reset back to the system default (no timers active).
.SH NOTES
Three macros for manipulating time values are defined in
.RI < sys/time.h >.
.I Timerclear
sets a time value to zero,
.I timerisset
tests if a time value is non-zero, and
.I timercmp
compares two time values (beware that >= and <= do not
work with this macro).
.SH "RETURN VALUE
If the calls succeed, a value of 0 is returned.  If an error occurs,
the value \-1 is returned, and a more precise error code is placed
in the global variable \f2errno\fP.
.SH "ERRORS
The possible errors are:
.TP 15
[EFAULT]
The \f2value\fP parameter specified a bad address.
.TP 15
[EINVAL]
A \f2value\fP parameter specified a time was too large
to be handled.
.SH "SEE ALSO"
sigvec(2), gettimeofday(2)
