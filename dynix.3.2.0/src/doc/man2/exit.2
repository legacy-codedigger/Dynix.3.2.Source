.\" $Copyright:	$
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990 
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: exit.2 1.6 86/05/13 $
.TH EXIT 2 "\*(V)" "4BSD"
.SH NAME
_exit \- terminate a process
.SH SYNOPSIS
.nf
.ft 3
_exit(status)
int status;
.fi
.SH DESCRIPTION
.I _exit
terminates a process with the following consequences:
.in +5n
.PP
All of the descriptors open in the calling process are closed.
.PP
If the parent process of the calling process is executing a
.I wait
or is interested in the SIGCHLD signal,
then it is notified of the calling process's termination and
the low-order eight bits of \f2status\fP are made available to it;
see
.IR wait (2).
.PP
The parent process ID of all of the calling process's existing child
processes are also set to 1.  This means that the initialization process
(see 
.IR intro (2))
inherits each of these processes as well.
.in -5n
.PP
Most C programs call the library routine
.IR exit (3)
which performs cleanup actions in the standard i/o library before
calling \f2_exit\fP\|.
.SH "RETURN VALUE"
This call never returns.
.SH "SEE ALSO"
fork(2), wait(2), exit(3)
