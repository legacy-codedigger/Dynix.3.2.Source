.\" $Copyright: $
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
.\"
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: ptrace.2 1.17 1991/05/08 21:19:21 $
.TH PTRACE 2 "\*(V)" "4BSD"
.SH NAME
ptrace \- process trace
.SH SYNOPSIS
.nf
.ft 3
#include <signal.h>
#include <machine/ptrace.h>
.PP
.ft 3
ptrace(request, pid, addr, data)
int request, pid, *addr, data;
.fi
.SH DESCRIPTION
.I Ptrace
provides a means by which a parent process
may control the execution of a child process,
and examine and change its core image.
Its primary use is for the implementation of breakpoint debugging.
There are four arguments whose interpretation
depends on a
.I request
argument.
Generally,
.I pid
is the process ID of the traced process,
which must be a child (no more distant descendant)
of the tracing process.
A process being traced
behaves normally until it encounters some signal
whether internally generated
like \*(lqillegal instruction\*(rq or externally
generated like \*(lqinterrupt\*(rq.
See
.IR sigvec (2)
for the list.
Then the traced process enters a stopped state
and its parent is notified via
.IR  wait (2).
When the child is in the stopped state,
its core image can be examined and modified
using
.IR ptrace .
If desired, another
.I ptrace
request can then cause the child either to terminate
or to continue, possibly ignoring the signal.
.PP
The value of the
.I request
argument determines the precise
action of the call:
.TP 4
PT_CHILD
This request is the only one used by the child process;
it declares that the process is to be traced by its parent.
All the other arguments are ignored.
Peculiar results will ensue
if the parent does not expect to trace the child.
The child process requesting to be traced must
.IR execve (2)
an image before
.I ptrace
requests generated by the parent process are effective.
.TP 4
PT_RTEXT, PT_RDATA
The
word in the child process's address space
at
.I addr
is returned.
If I and D space are separated (e.g. historically
on a pdp-11), request 1 indicates I space,
2 D space.
.I Addr
must be even.
The child must be stopped.
The input
.I data
is ignored.
.TP 4
PT_RUSER
The word
of the system's per-process data area corresponding to
.I addr
is returned.
.I Addr
must be even and less than 4096.
This space contains the registers and other information about
the process;
its layout corresponds to the
.I user
structure in the system.
.TP 4
PT_WTEXT, PT_WDATA
The
given
.I data
is written at the word in the process's address space corresponding to
.I addr,
which must be even.
No useful value is returned.
If I and D space are separated, request 4 indicates I space,
5 D space.
Attempts to write in pure procedure
fail if another process is executing the same file.
.TP 4
PT_WUSER
The process's system data is written,
as it is read with request 3.
Only a few locations can be written in this way:
the general registers,
the floating point status and registers,
and certain bits of the processor status word.
.TP 4
PT_CONTSIG
The
.I data
argument is taken as a signal number
and the child's execution continues
at location
.I addr
as if it had incurred that signal.
Normally the signal number will be
either 0 to indicate that the signal that caused the stop
should be ignored,
or that value fetched out of the
process's image indicating which signal caused
the stop.
If
.I addr
is (int *)1 then execution continues from where it stopped.
.TP 4
PT_KILL
The traced process terminates.
.TP 4
PT_SSTEP
Execution continues as in request 7;
however, as soon as possible after execution of at least one instruction,
execution stops again.
The signal number from the stop is
SIGTRAP.
This is part of the mechanism for implementing breakpoints.
.sp
.PP
Unlike a single process debugger all decendants of the process declared
as a multi-process debugger are traced and do not require themselves
to use
PT_CHILD
as in ptrace(2).
.TP 4
XPT_DEBUGGER
A process uses this request to declare itself a
multi-process debugger.  All other arguments are
ignored.  All subsequent 
.BR fork s,
.BR exec s,
and
.BR exits ,
as well as signals of all children of the calling process,
their descendants, and selected other processes (see
.SM XPT_DEBUG),
notify the debugger with
.SM SIGCHLD.
.TP 4
XPT_SETSIGMASK
The 
.B data
parameter points to a mask of signals in
the selected process.
Signals so set are passed directly to the selected process, rather
than notifying the debugger and stopping the process.
This mask is inherited across forks of the process, and
kept when the process 
.BR exec 's.
A passed-through
signal is a process attribute; it is passed
through regardless of how many debuggers are controlling
the process.
.TP 4
XPT_RREGS, XPT_WREGS
The selected process's register set is read or written.
.B addr
points to a
.B pt_regset
structure (see 
.IR ptrace.h ).
Machine specific restrictions usually apply; for example,
typically only a few of the processor-status register bits
are actually written.
.TP 4
XPT_RPROC
The selected process's process table entry is placed
at 
.B *addr.
See 
.I <sys/proc.h>
for definition of 
\f(CWstruct proc\f1.
.TP 4
XPT_SIGNAL
The 
.B data
argument is a signal number that is sent to
process selected by
.BR pid .
If
.BR pid == 0 ,
the signal is sent to all processes under control of the debugger.
.TP 4
XPT_STOPSTAT
Information about a stopped process is returned.  The
.B pid
argument is ignored.  A debugged process stops
whenever it
.BR fork s,
.BR exec s,
.BR exit s,
hits a watchpoint, or is about to process
a signal, and sends the debugger a
.SM SIGCHLD.  
.B addr
points at a 
.B pt_stop
structure, which receives the 
.B pid
and reason for the stop.  If the reason was because of a watchpoint
hit, it also contains the number of the watchpoint.  If no controlled 
process is stopped that has not yet been reported by
.SM XPT_STOPSTAT,
an
.SM ESRCH
error is returned.
.TP 4
XPT_DUPFD
The open file descriptor in the caller given by 
.B data
is
.BR dup 'd
(see \f3dup\f1(2)) into 
.B pid's
file-descriptor named by
.B addr.
If 
.B pid
already has an open file-descriptor
there it is closed.  This is an experimental interface.
.PP
The following functions are not supported in the first
implementation:
.TP 4
XPT_DEBUG
The process tree rooted at 
.B pid 
becomes controlled by
the debugger.  
.B pid
must not be an ancestor of the
debugger or already under debug.   The caller must be
root or match the effective \f3uid\f1 of all processes in the
selected process tree.  No process in the tree can be
running a set-user or set-group process.
.TP 4 
XPT_OPENT
ptrace returns an open, read-only file descriptor
for the binary file being executed by 
.B pid.
The debugger
must have read-access to the file for this to succeed.
This allows the debugger to access the symbol table without
having to know the name of the executable file.
.TP 4
XPT_WATCHPT_SET
An instruction or data watchpoint is set for the selected process.
.B addr
points to a
.B pt_watchpt
structure which specifies the address, type, length, and number of
the watchpoint.
.TP 4
XPT_WATCHPT_CLEAR
The specified watchpoint is cleared for the selected process.
.B addr
points to a
.B pt_watchpt
structure which contains the number of the watchpoint to be cleared.
Other fields in the watchpt structure are ignored.
.PP
As indicated,
these calls
(except for request PT_CHILD)
can be used only when the subject process has stopped.
The
.I wait
call is used to determine
when a process stops;
in such a case the \*(lqtermination\*(rq status
returned by
.I wait
has the value 0177 to indicate stoppage rather
than genuine termination.
.PP
To forestall possible fraud,
.I ptrace
inhibits the set-user-id and set-group-id facilities
on subsequent
.IR  execve (2)
calls.
If a traced process calls
.IR execve ,
it will stop before executing the first instruction of the new image
showing signal SIGTRAP.
.PP
On the BALANCE Series, \*(lqword\*(rq also means a 32-bit integer,
but the \*(lqeven\*(rq
restriction does not apply.
.SH "RETURN VALUE
A 0 value is returned if the call succeeds.  If the call fails
then a \-1 is returned and the global variable \f2errno\fP is
set to indicate the error.
.SH "ERRORS
.TP 15
[EBADF]
The data or addr argument specifies a bad file
descriptor number for XPT_DUPFD.
.TP 15
[EIO]
The request code is invalid.
.TP 15
[ESRCH]
The specified process does not exist.
.TP 15
[ESRCH]
The child is not stopped.
.TP 15
[ESRCH]
The process requested itself to be traced and it is a child of
.IR init (8)
(process 1).
.TP 15
[ESRCH]
The process to be traced is not the child of the current process.
.TP 15
[ESRCH]
The child process has not requested to be traced.
.TP 15
[EIO]
The given signal number is invalid.
.TP 15
[EIO]
The specified address is out of bounds.
.TP 15
[EPERM]
The specified process cannot be traced.
.TP 15
[EIO]
The child cannot perform the task requested.
.SH "SEE ALSO"
ddt(1),
sigvec(2),
wait(2)
.SH BUGS
.I Ptrace
is unique and arcane; it should be replaced with a special file which
can be opened and read and written.  The control functions could then
be implemented with
.IR ioctl (2)
calls on this file.  This would be simpler to understand and have much
higher performance.
.PP
The request 0 call should be able to specify
signals which are to be treated normally and not cause a stop.
In this way, for example,
programs with simulated floating point (which
use \*(lqillegal instruction\*(rq signals at a very high rate)
could be efficiently debugged.
.PP
The error indication, \-1, is a legitimate function value;
.I errno,
see
.IR intro (2),
can be used to disambiguate.
.PP
It should be possible to stop a process on occurrence of a system
call;
in this way a completely controlled environment could
be provided.
