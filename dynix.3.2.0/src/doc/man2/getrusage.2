.\" $Copyright: $
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: getrusage.2 1.11 1991/08/06 22:37:21 $
.TH GETRUSAGE 2 "\*(V)" "4BSD/DYNIX"
.SH NAME
getrusage \- get information about resource utilization
.SH SYNOPSIS
.nf
.ft 3
#include <sys/time.h>
#include <sys/resource.h>
.PP
.ft 3
.ta \w'#define 'u +\w'RUSAGE_CHILDREN  'u +\w'-1        'u
#define	RUSAGE_SELF	0	/* calling process */
#define	RUSAGE_CHILDREN	-1	/* terminated child processes */
.DT
.PP
.ft 3
getrusage(who, rusage)
int who;
struct rusage *rusage;
.fi
.SH DESCRIPTION
.I Getrusage
returns information describing the resources utilized by the current
process, or all its terminated child processes.
The
.I who
parameter is one of RUSAGE_SELF and RUSAGE_CHILDREN.
If
.I rusage
is non-zero, the buffer it points to will be filled in with
the following structure:
.PP
.nf
.RS
.ta \w'struct  'u +\w'struct  'u +3u*\w'struct  'u
struct	rusage {
	struct timeval ru_utime;	/* user time used */
	struct timeval ru_stime;	/* system time used */
	long	ru_maxrss;
	/* NEXT THREE VALUES NOT COMPUTED IN DYNIX (always returned as 0) */
	long	ru_ixrss;	/* integral shared memory size */
	long	ru_idrss;	/* integral unshared data size */
	long	ru_isrss;	/* integral unshared stack size */
	long	ru_minflt;	/* page reclaims */
	long	ru_majflt;	/* page faults */
	long	ru_nswap;	/* swaps */
	long	ru_inblock;	/* block input operations */
	long	ru_oublock;	/* block output operations */
	long	ru_msgsnd;	/* messages sent */
	long	ru_msgrcv;	/* messages received */
	long	ru_nsignals;	/* signals received */
	long	ru_nvcsw;	/* voluntary context switches */
	long	ru_nivcsw;	/* involuntary context switches */
};
.RE
.DT
.fi
.PP
The fields are interpreted as follows:
.TP 15
ru_utime
the total amount of time spent executing in user mode.
.TP 15
ru_stime
the total amount of time spent in the system executing on behalf
of the process(es).
.TP 15
ru_maxrss
the maximum resident set size utilized (in pages, as defined by
.IR getpagesize (2)).
.TP 15
ru_ixrss
an \*(lqintegral\*(rq value indicating the amount of memory used
which was also shared among other processes.  This value is expressed
in units of kilobytes * seconds-of-execution and is calculated by
summing the number of shared memory pages in use each time the internal
system clock ticks and then averaging over 1 second intervals.
.B "Not computed in DYNIX; always returns as 0."
.TP 15
ru_idrss
an integral value of the amount of unshared memory residing in the
data segment of a process (expressed in units of
kilobytes * seconds-of-execution).
.B "Not computed in DYNIX; always returns as 0."
.TP 15
ru_isrss
an integral value of the amount of unshared memory residing in the
stack segment of a process (expressed in units of
kilobytes * seconds-of-execution).
.B "Not computed in DYNIX; always returns as 0."
.TP 15
ru_minflt
the number of page faults serviced without any i/o activity; here
i/o activity is avoided by \*(lqreclaiming\*(rq a page frame from
the list of pages awaiting reallocation.
.TP 15
ru_majflt
the number of page faults serviced which required i/o activity.
.TP 15
ru_nswap
the number of times a process was \*(lqswapped\*(rq out of main
memory.
.TP 15
ru_inblock
the number of times the file system had to perform input.
.TP 15
ru_outblock
the number of times the file system had to perform output.
.TP 15
ru_msgsnd
the number of ipc messages sent.
.TP 15
ru_msgrcv
the number of ipc messages received.
.TP 15
ru_nsignals
the number of signals delivered.
.TP 15
ru_nvcsw
the number of times a context switch resulted due to a process
voluntarily giving up the processor before its time slice was
completed (usually to await availability of a resource).
.TP 15
ru_nivcsw
the number of times a context switch resulted due to a higher
priority process becoming runnable or because the current process
exceeded its time slice.
.SH NOTES
The numbers 
.I ru_inblock
and 
.I ru_outblock
account only for real
i/o; data supplied by the caching mechanism is charged only
to the first process to read or write the data.
.SH ERRORS
.TP 15
[EFAULT]
The memory pointed to by
.I rusage
lies outside the valid address space for the process.
.SH SEE ALSO
gettimeofday(2), wait(2)
.SH BUGS
There is no way to obtain information about a child process
which has not yet terminated.
.PP
Due to the multi-processing nature of DYNIX, it is possible for the
CPU time (user + system time) for a child process to greatly exceed the
elapsed real time.
This is especially true if the child process forks and waits for children
of its own.
