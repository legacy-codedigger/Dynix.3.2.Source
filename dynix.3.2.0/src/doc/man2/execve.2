.\" $Copyright: $
.\" Copyright (c) 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991
.\" Sequent Computer Systems, Inc.   All rights reserved.
.\"  
.\" This software is furnished under a license and may be used
.\" only in accordance with the terms of that license and with the
.\" inclusion of the above copyright notice.   This software may not
.\" be provided or otherwise made available to, or used by, any
.\" other person.  No title to or ownership of the software is
.\" hereby transferred.
...
.V= $Header: execve.2 1.13 1991/08/06 22:36:35 $
.TH EXECVE 2 "\*(V)" "4BSD/DYNIX"
.SH NAME
execve \- execute a file
.SH SYNOPSIS
.ft 3
execve(name, argv, envp)
.br
char *name, *argv[], *envp[];
.fi
.SH DESCRIPTION
.I Execve
transforms the calling process into a new process.
The new process is constructed from an ordinary file
called the \f2new process file\fP.
This file is either an executable object file,
or a file of data for an interpreter.
An executable object file consists of an identifying header,
followed by pages of data representing the initial program (text)
and initialized data pages.  Additional pages may be specified
by the header to be initialize with zero data.  See
.IR a.out (5).
.PP
An interpreter file begins with a line of the form ``#! \f2interpreter\fP'';
When an interpreter file is
.IR execve\| 'd,
the system \f2execve\fP\|'s the specified \f2interpreter\fP, giving
it the name of the originally exec'd file as an argument,
shifting over the rest of the original arguments.
.PP
There can be no return from a successful \f2execve\fP because the calling
core image is lost.
This is the mechanism whereby different process images become active.
.PP
The argument \f2argv\fP is an array of character pointers
to null-terminated character strings.  These strings constitute
the argument list to be made available to the new
process.  By convention, at least one argument must be present in
this array, and the first element of this array should be
the name of the executed program (i.e. the last component of \f2name\fP).
.PP
The argument \f2envp\fP is also an array of character pointers
to null-terminated strings.  These strings pass information to the
new process which are not directly arguments to the command, see
.IR environ (7).
.PP
Descriptors open in the calling process remain open in
the new process, except for those for which the close-on-exec
flag is set; see
.IR close (2).
Descriptors which remain open are unaffected by
.IR execve .
.PP
Ignored signals remain ignored across an
.IR execve ,
but signals that are caught are reset to their default values.
The signal stack is reset to be undefined; see
.IR sigvec (2)
for more information.
.PP
Each process has
.I real
user and group IDs and a
.I effective
user and group IDs.  The
.I real
ID identifies the person using the system; the
.I effective
ID determines his access privileges.
.I Execve
changes the effective user and group ID to
the owner of the executed file if the file has the \*(lqset-user-ID\*(rq
or \*(lqset-group-ID\*(rq modes.  The
.I real
user ID is not affected.
.PP
The new process also inherits the following attributes from
the calling process:
.PP
.in +5n
.nf
.ta +2i
process ID	see \f2getpid\fP\|(2)
parent process ID	see \f2getppid\fP\|(2)
process group ID	see \f2getpgrp\fP\|(2)
access groups	see \f2getgroups\fP\|(2)
working directory	see \f2chdir\fP\|(2)
root directory	see \f2chroot\fP\|(2)
control terminal	see \f2tty\fP\|(4)
resource usages	see \f2getrusage\fP\|(2)
interval timers	see \f2getitimer\fP\|(2)
resource limits	see \f2getrlimit\fP\|(2)
file mode mask	see \f2umask\fP\|(2)
signal mask	see \f2sigvec\fP\|(2)
affinity	see \f2tmpaffinity\fP\|(2)
.in -5n
.fi
.PP
When the executed program begins, it is called as follows:
.PP
.nf
	main(argc, argv, envp)
	int argc;
	char **argv, **envp;
.fi
.PP
where
.I argc
is the number of elements in \f2argv\fP
(the ``arg count'')
and
.I argv
is the array of character pointers
to the arguments themselves.
.PP
.I Envp
is a pointer to an array of strings that constitute
the
.I environment
of the process.
A pointer to this array is also stored in the global variable ``environ''.
Each string consists of a name, an \*(lq=\*(rq, and a null-terminated value.
The array of pointers is terminated by a null pointer.
The shell
.IR sh (1)
passes an environment entry for each global shell variable
defined when the program is called.
See
.IR environ (7)
for some conventionally
used names.
.PP
If a process has requested to be traced
(via the
.IR ptrace (2)
syscall),
the
.I execve
will succeed only if the process has both read
.B and
write access to the file.
.I execve
won't actually write anything to the file, however.
.SH "RETURN VALUE
If
.I execve
returns to the calling process an error has occurred; the
return value will be \-1 and the global variable
.I errno
will contain an error code.
.SH ERRORS
.I Execve
will fail and return to the calling process if one or more
of the following are true:
.TP 15
[ENOENT]
One or more components of the new process file's
path name do not exist.
.TP 15
[ENOTDIR]
A component of the new process file is not a directory.
.TP 15
[EACCES]
Search permission is denied for a directory listed
in the new process file's path prefix.
.TP 15
[EACCES]
The new process file is not an ordinary file.
.TP 15
[EACCES]
The new process file mode denies execute permission.
.TP 15
[ENOEXEC]
The new process file has the appropriate access
permission, but has a misformed or inconsistent header or bad magic number.
See
.IR a.out (5).
.TP 15
[ETXTBSY]
The new process file is a pure procedure (shared text)
file that is currently open for writing by some process.
.TP 15
[ENOMEM]
The new process requires more virtual memory than
is allowed by the imposed maximum
.RI ( getrlimit (2)),
or the memory required to execute the new image
exceeds the available space in the swap area.
.TP 15
[E2BIG]
The number of bytes in the new process's argument list
is larger than the system-imposed limit of 10240 bytes.
.TP 15
[EFAULT]
.IR Name ,
.IR argv ,
or
.I envp
to an illegal address.
.TP 15
[ENOENT]
The path name is too long.
.TP 15
[EIO]
An I/O error occurred while reading from or writing to the file system.
.SH CAVEATS
If a program is
.I setuid
to a non-super-user, but is executed when
the real \f2uid\fP is ``root'', then the program has the powers
of a super-user as well.
.SH "SEE ALSO"
exit(2), fork(2), execl(3), environ(7), a.out(5)
